"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[966],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var m=n.createContext({}),c=function(e){var t=n.useContext(m),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(m.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(r),g=a,d=u["".concat(m,".").concat(g)]||u[g]||p[g]||i;return r?n.createElement(d,o(o({ref:t},s),{},{components:r})):n.createElement(d,o({ref:t},s))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=g;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},4101:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const i={"date created":"Sunday, August 7th 2022, 1:16:43 pm","date modified":"Wednesday, August 10th 2022, 6:14:39 pm",title:"Dynamic Programming Template"},o="Dynamic Programming Template",l={unversionedId:"Algo/Fundamental Algorithms/Recursion/Dynamic programming template",id:"Algo/Fundamental Algorithms/Recursion/Dynamic programming template",title:"Dynamic Programming Template",description:"- First read, Intro to Dynamic programming",source:"@site/docs/Algo/Fundamental Algorithms/Recursion/Dynamic programming template.md",sourceDirName:"Algo/Fundamental Algorithms/Recursion",slug:"/Algo/Fundamental Algorithms/Recursion/Dynamic programming template",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Recursion/Dynamic programming template",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Fundamental Algorithms/Recursion/Dynamic programming template.md",tags:[],version:"current",frontMatter:{"date created":"Sunday, August 7th 2022, 1:16:43 pm","date modified":"Wednesday, August 10th 2022, 6:14:39 pm",title:"Dynamic Programming Template"},sidebar:"tutorialSidebar",previous:{title:"What is Backtracking",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Recursion/Backtracking"},next:{title:"What is Dynamic Programming",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Recursion/Intro to Dynamic programming"}},m={},c=[{value:"Knapsack Question",id:"knapsack-question",level:2}],s={toc:c},u="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dynamic-programming-template"},"Dynamic Programming Template"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Recursion/Intro%20to%20Dynamic%20programming"},"First read, Intro to Dynamic programming")),(0,a.kt)("li",{parentName:"ul"},"Dynamic programming starts by solving sub-problems and builds up to solving the big problem."),(0,a.kt)("li",{parentName:"ul"},"Every dynamic-programming algorithm starts with a grid.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The values in the cells are usually what you\u2019re trying to optimize."),(0,a.kt)("li",{parentName:"ul"},"For the knapsack problem, the values were the value of the goods."))),(0,a.kt)("li",{parentName:"ul"},"At each step/cell of DP, we will make a decision that will maximize/minimize our output depending on what we want.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"#current_value = max(prev_value, curr + some_value)\ncell[r][c] = max(cell[r-1][c], current + cell[r-1][c-items_weight])\n\nfor r in range(Row):\n    for c in range(Column):\n         cell[r][c] = max(cell[r-1][c], current + cell[r-1][c-items_weight])\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"It's possible to use 2D, nD array to solve DP problems however using dictionary will make things a lot easier.")),(0,a.kt)("h2",{id:"knapsack-question"},"Knapsack Question"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You\u2019re a thief with a knapsack that can carry 4 lb of goods."),(0,a.kt)("li",{parentName:"ul"},"You have three items that you can put into the knapsack.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Guitar -> 1lb -> $1500"),(0,a.kt)("li",{parentName:"ul"},"Stereo -> 4lb -> $3000"),(0,a.kt)("li",{parentName:"ul"},"Laptop -> 3lb -> $2000"))),(0,a.kt)("li",{parentName:"ul"},"What items should you steal so that you steal the maximum money\u2019s worth of goods?")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict\ndp = defaultdict(int)\nitems = [['G', 1500, 1], ['S', 3000, 4], ['L', 2000, 3]]\n\nfor r in range(3):\n    for c in range(1, 5):\n        items_weight = items[r][2]\n        if items_weight > c:\n            dp[(r,c)] = dp[(r-1,c)]\n        elif items_weight == c:\n            dp[(r,c)] = max(dp[(r-1,c)], items[r][1])\n        else:\n            dp[(r,c)] = max(dp[(r-1,c)], items[r][1] + dp[(r-1, c-items_weight)])\n\nprint(dp[(2,4)])\n")))}p.isMDXComponent=!0}}]);