"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2695],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6463:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={title:"22 Generate Parentheses","date created":"Sunday, December 18th 2022, 3:42:32 pm","date modified":"Sunday, December 18th 2022, 4:11:20 pm"},o="22 Generate Parentheses",l={unversionedId:"Algo/Coding Practice/Stack/22 Generate Parentheses",id:"Algo/Coding Practice/Stack/22 Generate Parentheses",title:"22 Generate Parentheses",description:"Solution",source:"@site/docs/Algo/Coding Practice/Stack/22 Generate Parentheses.md",sourceDirName:"Algo/Coding Practice/Stack",slug:"/Algo/Coding Practice/Stack/22 Generate Parentheses",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Stack/22 Generate Parentheses",draft:!1,editUrl:"https://github.com/321paranoiawhy/321paranoiawhy.github.io/blob/main/docs/Algo/Coding Practice/Stack/22 Generate Parentheses.md",tags:[],version:"current",frontMatter:{title:"22 Generate Parentheses","date created":"Sunday, December 18th 2022, 3:42:32 pm","date modified":"Sunday, December 18th 2022, 4:11:20 pm"},sidebar:"tutorialSidebar",previous:{title:"146. LRU Cache",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/LinkedList/LRU Cache"},next:{title:"739 Daily Temperatures",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Stack/739 Daily Temperatures"}},c={},s=[{value:"Solution",id:"solution",level:2}],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"22-generate-parentheses"},"22 Generate Parentheses"),(0,r.kt)("h2",{id:"solution"},"Solution"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"we're asked to generate all combinations, thus the first algorithm that should come to mind should be ",(0,r.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Fundamental%20Algorithms/Recursion/Backtracking"},"Backtracking"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"but how to control the backtracking, we don't want all permutation(i.e ",(0,r.kt)("inlineCode",{parentName:"li"},")))((("),"), we want all the valid ones(i.e ",(0,r.kt)("inlineCode",{parentName:"li"},"((())), ()()()"),"\u2026)"),(0,r.kt)("li",{parentName:"ul"},"well, how can we control whether out path is valid and leading to a valid path, to do this",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"we keep the number of open and close tags along the path and decide whether adding another open/close tag will make the path invalid"),(0,r.kt)("li",{parentName:"ul"},"to decide what to add next",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"adding open as much as we can won't make out path invalid, hence we can add open tags while it is less than n,  ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"i.e ",(0,r.kt)("inlineCode",{parentName:"li"},"(")," => becomes ",(0,r.kt)("inlineCode",{parentName:"li"},"((")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"()()")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"()()(")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"((())")," => can't add ",(0,r.kt)("inlineCode",{parentName:"li"},")")))),(0,r.kt)("li",{parentName:"ul"},"we can add close tags to out path if it won't make close tag count above open tag",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"i.e open=1, close=0 ",(0,r.kt)("inlineCode",{parentName:"li"},"("),", we can add close tag since close < open"),(0,r.kt)("li",{parentName:"ul"},"i.e open=3, close=1 ",(0,r.kt)("inlineCode",{parentName:"li"},"(()("),", we can add another close"),(0,r.kt)("li",{parentName:"ul"},"i.e open=2, close=2 ",(0,r.kt)("inlineCode",{parentName:"li"},"()()"),", we can't add another close"))),(0,r.kt)("li",{parentName:"ul"},"if the number of open tags and close tags is the same as n, we reached the base case, thus we can add the path to our result",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"i.e open=3, close=3 ",(0,r.kt)("inlineCode",{parentName:"li"},"()()()")),(0,r.kt)("li",{parentName:"ul"},"i.e open=3, close=3 ",(0,r.kt)("inlineCode",{parentName:"li"},"(())()")," \u2026")))))))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'result = []\n    \ndef generateParenthesisRec(path, openC, closeC):\n    if openC == closeC == n: #base case\n        result.append("".join(path))\n        return\n    if openC < n:  #while open is less than n we can add another open tag\n        path.append("(")\n        generateParenthesisRec(path, openC+1, closeC)\n        path.pop()\n    if closeC < openC: #add close tag only if it is less than open tag\'s count \n        path.append(")")\n        generateParenthesisRec(path, openC, closeC+1)\n        path.pop()        \n\npath = []\ngenerateParenthesisRec(path, 0,0)\nreturn result\n')))}u.isMDXComponent=!0}}]);