"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1928],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=i,g=c["".concat(s,".").concat(m)]||c[m]||p[m]||o;return n?r.createElement(g,a(a({ref:t},d),{},{components:n})):r.createElement(g,a({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,a[1]=l;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4334:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const o={"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, July 24th 2022, 8:40:49 pm",title:"Radix Sort"},a="Radix Sort",l={unversionedId:"Algo/Fundamental Algorithms/Sorting algos/Radix Sort",id:"Algo/Fundamental Algorithms/Sorting algos/Radix Sort",title:"Radix Sort",description:"- Division and modulo with 10",source:"@site/docs/Algo/Fundamental Algorithms/Sorting algos/5. Radix Sort.md",sourceDirName:"Algo/Fundamental Algorithms/Sorting algos",slug:"/Algo/Fundamental Algorithms/Sorting algos/Radix Sort",permalink:"/Obsidian-Docusaurus/docs/Algo/Fundamental Algorithms/Sorting algos/Radix Sort",draft:!1,editUrl:"https://github.com/321paranoiawhy/321paranoiawhy.github.io/blob/main/docs/Algo/Fundamental Algorithms/Sorting algos/5. Radix Sort.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, July 24th 2022, 8:40:49 pm",title:"Radix Sort"},sidebar:"tutorialSidebar",previous:{title:"Quick Sort",permalink:"/Obsidian-Docusaurus/docs/Algo/Fundamental Algorithms/Sorting algos/Quick Sort"},next:{title:"Python Data Conversion",permalink:"/Obsidian-Docusaurus/docs/Algo/Python Tips & Tricks/Data conversion"}},s={},u=[],d={toc:u},c="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"radix-sort"},"Radix Sort"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Python%20Tips%20&%20Tricks/Division%20and%20modulo%20with%2010"},"Division and modulo with 10")),(0,i.kt)("li",{parentName:"ul"},"Runtime: O( kn)"),(0,i.kt)("li",{parentName:"ul"},"Radix sort is a fast distribution sorting algorithm that orders keys by examining the individual components of the keys instead of comparing the keys themselves.")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://ds055uzetaobb.cloudfront.net/brioche/uploads/IEZs8xJML3-radixsort_ed.png?width=1200",alt:null})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For example ,",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"When sorting integer keys, the individual digits of the keys are compared from least significant to most significant."),(0,i.kt)("li",{parentName:"ul"},"This is a special purpose sorting algorithm but can be used to sort many types of keys, including positive integers, strings, and floating-point values.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque as Queue\n\n\ndef radixSort(Array):\n    numdigit = len(numDigit(Array))\n\n    holder = []\n    for i in range(10):\n        holder.append(Queue())\n    column = 1\n\n    for i in range(numdigit):\n        for key in Array:\n            place = (key // column) % 10\n            holder[place].append(key)\n\n        i = 0\n        for bin in holder:\n            while bin:\n                Array[i] = bin.popleft()\n                i += 1\n\n        column *= 10\n    print(Array)\n\n\ndef numDigit(Array):\n    return str(max(Array))\n\n\nif __name__ == '__main__':\n    radixSort([10, 23, 51, 18, 4, 31, 5, 13])\n")))}p.isMDXComponent=!0}}]);