"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1772],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=a,m=u["".concat(c,".").concat(h)]||u[h]||p[h]||i;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3303:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={title:"600. Client Side Data Fetching","date created":"Monday, November 14th 2022, 7:15:05 pm","date modified":"Thursday, December 8th 2022, 12:13:38 pm"},o="600. Client Side Data Fetching",s={unversionedId:"Frameworks/Nextjs/Client side data fetching",id:"Frameworks/Nextjs/Client side data fetching",title:"600. Client Side Data Fetching",description:"- You might not always need to pre-render the data",source:"@site/docs/Frameworks/Nextjs/600. Client side data fetching.md",sourceDirName:"Frameworks/Nextjs",slug:"/Frameworks/Nextjs/Client side data fetching",permalink:"/obsidian/docs/Frameworks/Nextjs/Client side data fetching",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Frameworks/Nextjs/600. Client side data fetching.md",tags:[],version:"current",sidebarPosition:600,frontMatter:{title:"600. Client Side Data Fetching","date created":"Monday, November 14th 2022, 7:15:05 pm","date modified":"Thursday, December 8th 2022, 12:13:38 pm"},sidebar:"tutorialSidebar",previous:{title:"500. Server Side Rendering",permalink:"/obsidian/docs/Frameworks/Nextjs/Server side rendering"},next:{title:"700. API Routes",permalink:"/obsidian/docs/Frameworks/Nextjs/API routes"}},c={},l=[{value:"Client Side Data Fetching with Fetch",id:"client-side-data-fetching-with-fetch",level:2},{value:"Client Side Data Fetching with SWR",id:"client-side-data-fetching-with-swr",level:2},{value:"Client Side Fetching with Plus Pre Rendering",id:"client-side-fetching-with-plus-pre-rendering",level:2}],d={toc:l},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"600-client-side-data-fetching"},"600. Client Side Data Fetching"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You might not always need to pre-render the data",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"ex: A dashboard that is",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"behind a login screen"),(0,a.kt)("li",{parentName:"ul"},"highly user-specific, thus SEO not relevant"))),(0,a.kt)("li",{parentName:"ul"},"for this kind of website, no need to pre-render the data, we can rely on the client side data fetching")))),(0,a.kt)("h2",{id:"client-side-data-fetching-with-fetch"},"Client Side Data Fetching with Fetch"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import {useEffect, useState} from "react";\n\nfunction Carts() {\n    const [isLoading, setIsLoading] = useState(true);\n    const [data, setData] = useState(null);\n\n    useEffect(() => {\n        async function loadCarts() {\n            const response = await fetch("https://dummyjson.com/carts");\n            const data = await response.json();\n            setData(data.carts);\n            setIsLoading(false);\n        }\n\n        loadCarts();\n    }, [])\n\n    if (isLoading) {\n        return <h3>Cart loading...</h3>\n    }\n\n    return (\n        <>\n            <h3>Showing {data.length} carts</h3>\n            {\n                data.map(cart => {\n                    return <div key={cart.id}>\n                        <h3>Total price == {cart.total}</h3>\n                        <p>Total Quantity == {cart.totalQuantity}</p>\n                    </div>\n                })\n            }\n        </>\n    )\n}\n\nexport default Carts;\n')),(0,a.kt)("h2",{id:"client-side-data-fetching-with-swr"},"Client Side Data Fetching with SWR"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://swr.vercel.app/docs/with-nextjs"},"SWR DOC")),(0,a.kt)("li",{parentName:"ul"},"SWR is derived from ",(0,a.kt)("inlineCode",{parentName:"li"},"stale-while-revalidate"),".",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"SWR is a strategy to first return the data from cache(stale), then send the fetch request(re-validate), and finally come with the up-to-date data."))),(0,a.kt)("li",{parentName:"ul"},"can handle",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"caching"),(0,a.kt)("li",{parentName:"ul"},"re-validation"),(0,a.kt)("li",{parentName:"ul"},"pagination"),(0,a.kt)("li",{parentName:"ul"},"suspense"),(0,a.kt)("li",{parentName:"ul"},"..")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import useSWR from \'swr\'\n// const fetcher = fetch("https://dummyjson.com/carts").then(res => res.json());\nconst fetcher = (args) => fetch(args).then(res => res.json())\n\nfunction Carts() {\n    const {data, error} = useSWR("https://dummyjson.com/carts", fetcher);\n\n\n    if (error){\n        return <h3>error occured</h3>\n    }\n    if (!data) {\n        return <h3>Cart loading...</h3>\n    }\n    return (\n        <>\n            <h3>Showing {data.carts.length} carts</h3>\n            {\n                data.carts.map(cart => {\n                    return <div key={cart.id}>\n                        <h3>Total price == {cart.total}</h3>\n                        <p>Total Quantity == {cart.totalQuantity}</p>\n                    </div>\n                })\n            }\n        </>\n    )\n}\n\nexport default Carts;\n')),(0,a.kt)("h2",{id:"client-side-fetching-with-plus-pre-rendering"},"Client Side Fetching with Plus Pre Rendering"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import {useState} from "react";\nimport {useRouter} from "next/router";\n\nfunction Products({productList}) {\n    const [products, setProducts] = useState(productList);\n    const router = useRouter();\n\n    const filterProducts = async () => {\n        const response = await fetch(`https://dummyjson.com/products/category/laptops`);\n        const data = await response.json();\n        setProducts(data.products);\n        router.push("/carts/server-client?category=laptops", undefined, {shallow: true})\n    }\n\n\n    return (\n        <div>\n            <button onClick={filterProducts}>Filter only laptops</button>\n            {\n                products.map(product => {\n                    return <div key={product.id}>\n                        <h2>{product.title}</h2>\n                        <p>{product.description}</p>\n                    </div>\n                })\n            }\n        </div>\n    )\n\n}\n\nexport default Products;\n\nexport async function getServerSideProps(context) {\n    const {query} = context\n    const {category} = query;\n    const queryString = category || \'smartphones\';\n    const response = await fetch(`https://dummyjson.com/products/category/${queryString}`);\n    const data = await response.json();\n\n    return {\n        props: {\n            productList: data.products\n        }\n    }\n}\n')))}p.isMDXComponent=!0}}]);