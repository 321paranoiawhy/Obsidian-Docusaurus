"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2502],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),s=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(r),d=a,g=m["".concat(u,".").concat(d)]||m[d]||p[d]||o;return r?n.createElement(g,i(i({ref:t},c),{},{components:r})):n.createElement(g,i({ref:t},c))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5075:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, July 3rd 2022, 11:03:53 am",title:"Quick Sort"},i="Quick Sort",l={unversionedId:"Algo/Fundamental Algorithms/Sorting algos/Quick Sort",id:"Algo/Fundamental Algorithms/Sorting algos/Quick Sort",title:"Quick Sort",description:"- Runtime 0 (log (n) ) .",source:"@site/docs/Algo/Fundamental Algorithms/Sorting algos/4. Quick Sort.md",sourceDirName:"Algo/Fundamental Algorithms/Sorting algos",slug:"/Algo/Fundamental Algorithms/Sorting algos/Quick Sort",permalink:"/Obsidian-Docusaurus/docs/Algo/Fundamental Algorithms/Sorting algos/Quick Sort",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Fundamental Algorithms/Sorting algos/4. Quick Sort.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, July 3rd 2022, 11:03:53 am",title:"Quick Sort"},sidebar:"tutorialSidebar",previous:{title:"Merge Sort",permalink:"/Obsidian-Docusaurus/docs/Algo/Fundamental Algorithms/Sorting algos/Merge Sort"},next:{title:"Radix Sort",permalink:"/Obsidian-Docusaurus/docs/Algo/Fundamental Algorithms/Sorting algos/Radix Sort"}},u={},s=[],c={toc:s},m="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"quick-sort"},"Quick Sort"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Runtime: 0 (n Log (n)) Average, 0 (n*2) Worst Case. Memory: 0 (log (n) ) ."),(0,a.kt)("li",{parentName:"ul"},"In quick sort, we pick a random element and partition the array, such that all numbers that are less than the partitioning element come before all elements that are greater than it."),(0,a.kt)("li",{parentName:"ul"},"The partitioning can be performed efficiently through a series of swaps.")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/1400/1*XNXraasGW-D_YZq-Yuep9g.png",alt:null})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If we repeatedly partition the array (and its sub-arrays) around an element, the array will eventually become sorted."),(0,a.kt)("li",{parentName:"ul"},"However, as the partitioned element is not guaranteed to be the median (or anywhere near the median), our sorting could be very slow. This is the reason for the 0 (n","*","*2) worst case runtime.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def quickSort(Array):\n    return divide(Array)\n\ndef divide(Array):\n    if len(Array) <= 1:\n        return Array\n    else:\n        pivote = Array[0]\n        left = divide([elt for elt in Array if elt < pivote])\n        right = divide([elt for elt in Array if elt > pivote])\n        array = concure(Array, left, pivote, right)\n        return array\n\ndef concure(Array, left, pivote, right):\n    return left + [pivote] + right\n\nprint(quickSort([6,5,4,3,2,1]))\n")))}p.isMDXComponent=!0}}]);