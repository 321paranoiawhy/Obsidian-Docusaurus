"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[283],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},h="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),h=u(n),p=a,d=h["".concat(s,".").concat(p)]||h[p]||m[p]||i;return n?r.createElement(d,l(l({ref:t},c),{},{components:n})):r.createElement(d,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[h]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1508:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Tuesday, November 8th 2022, 12:47:05 pm",title:"Binary Search"},l="Binary Search",o={unversionedId:"Algo/Fundamental Algorithms/Searching algos/Binary search",id:"Algo/Fundamental Algorithms/Searching algos/Binary search",title:"Binary Search",description:"Binary Search Loop",source:"@site/docs/Algo/Fundamental Algorithms/Searching algos/1. Binary search.md",sourceDirName:"Algo/Fundamental Algorithms/Searching algos",slug:"/Algo/Fundamental Algorithms/Searching algos/Binary search",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Searching algos/Binary search",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Fundamental Algorithms/Searching algos/1. Binary search.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Tuesday, November 8th 2022, 12:47:05 pm",title:"Binary Search"},sidebar:"tutorialSidebar",previous:{title:"What is Dynamic Programming",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Recursion/Intro to Dynamic programming"},next:{title:"Boundary Binary Search",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Searching algos/Binary search-Find boundary"}},s={},u=[{value:"Binary Search Loop",id:"binary-search-loop",level:2},{value:"Binary Search Recursion",id:"binary-search-recursion",level:2},{value:"Bug with Binary Search and Merge Sort",id:"bug-with-binary-search-and-merge-sort",level:2},{value:"Resource",id:"resource",level:2}],c={toc:u},h="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"binary-search"},"Binary Search"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://www.computerhope.com/jargon/b/binary-search.jpg",alt:null})),(0,a.kt)("h2",{id:"binary-search-loop"},"Binary Search Loop"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def search(nums, target):\n        low, high = 0, len(nums)-1\n        while low <= high:\n            mid = (low+high) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] > target:\n                high = mid -1\n            else:\n                low = mid + 1\n        return -1\n\nprint(search([1,2,3,4,5,6], 4))\n")),(0,a.kt)("h2",{id:"binary-search-recursion"},"Binary Search Recursion"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Note that although the concept is fairly simple, getting all the details right is far more difficult than you might think. Pay attention to the plus ones and minus ones.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def search(nums, target, low, high):\n    if low > high:\n        return -1\n    mid = (low + high) // 2\n    if nums[mid] == target:\n        return mid\n    elif nums[mid] > target:\n        return search(nums, target, low, mid-1)\n    else:\n        return search(nums, target, mid+1, high)\n\nprint(search([1,2,3,4,5,6], 4, 0, 6))\n")),(0,a.kt)("h2",{id:"bug-with-binary-search-and-merge-sort"},"Bug with Binary Search and Merge Sort"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"where is the bug/problem",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mid = (low + high) // 2")))),(0,a.kt)("li",{parentName:"ul"},"how is the bug happening",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"if the sum of low and high is greater than the maximum positive int value (2^31 - 1). The sum overflows to a negative value, and the value stays negative when divided by two"),(0,a.kt)("li",{parentName:"ul"},"This can cause",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Index out of bound exception, in Java"),(0,a.kt)("li",{parentName:"ul"},"in python this can cause, unexpected result"))))),(0,a.kt)("li",{parentName:"ul"},"what inputs can cause the bug?",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"this bug can manifest itself for arrays whose length (in elements) is 2^30 or greater (roughly a billion elements)."))),(0,a.kt)("li",{parentName:"ul"},"What is the best way to calculate mid then?")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"int mid = low + ((high - low) / 2);\n\nint mid = (low + high) >>> 1;  #faster and clean [recommended]\n\nint mid = (low + high) >> 1;  #for python\n\nmid = ((unsigned int)low + (unsigned int)high)) >> 1; #for c and c+=\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Source",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://ai.googleblog.com/2006/06/extra-extra-read-all-about-it-nearly.html"},"https://ai.googleblog.com/2006/06/extra-extra-read-all-about-it-nearly.html"))))),(0,a.kt)("h2",{id:"resource"},"Resource"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Python%20Tips%20&%20Tricks/In-built%20Binary%20search"},"Python In-built Binary search"))))}m.isMDXComponent=!0}}]);