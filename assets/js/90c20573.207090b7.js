"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4925],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var m=r.createContext({}),s=function(e){var t=r.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=s(e.components);return r.createElement(m.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,m=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(a),p=n,h=d["".concat(m,".").concat(p)]||d[p]||c[p]||i;return a?r.createElement(h,o(o({ref:t},u),{},{components:a})):r.createElement(h,o({ref:t},u))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=p;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[d]="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},3710:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=a(7462),n=(a(7294),a(3905));const i={"date created":"Sunday, August 7th 2022, 4:08:37 pm","date modified":"Sunday, December 4th 2022, 5:34:09 pm",title:"Algorithms You Should Know"},o="Algorithms You Should Know",l={unversionedId:"Algo/Fundamental Algorithms/Recommendations/Algorithms you should know",id:"Algo/Fundamental Algorithms/Recommendations/Algorithms you should know",title:"Algorithms You Should Know",description:"Data Structure Paired with Algorithms",source:"@site/docs/Algo/Fundamental Algorithms/Recommendations/Algorithms you should know.md",sourceDirName:"Algo/Fundamental Algorithms/Recommendations",slug:"/Algo/Fundamental Algorithms/Recommendations/Algorithms you should know",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Recommendations/Algorithms you should know",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Fundamental Algorithms/Recommendations/Algorithms you should know.md",tags:[],version:"current",frontMatter:{"date created":"Sunday, August 7th 2022, 4:08:37 pm","date modified":"Sunday, December 4th 2022, 5:34:09 pm",title:"Algorithms You Should Know"},sidebar:"tutorialSidebar",previous:{title:"What is Prefix Sum",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Misc/Prefix sum/"},next:{title:"How to Act During Interviews",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Recommendations/How to act during interviews"}},m={},s=[{value:"Data Structure Paired with Algorithms",id:"data-structure-paired-with-algorithms",level:2},{value:"General Techniques",id:"general-techniques",level:2}],u={toc:s},d="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"algorithms-you-should-know"},"Algorithms You Should Know"),(0,n.kt)("h2",{id:"data-structure-paired-with-algorithms"},"Data Structure Paired with Algorithms"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Array",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Binary search",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Searching%20algos/Binary%20search"},"Binary search")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Searching%20algos/Binary%20search-Find%20boundary"},"Binary search-Find boundary")))),(0,n.kt)("li",{parentName:"ul"},"Two Pointers"),(0,n.kt)("li",{parentName:"ul"},"Sliding Window",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Misc/Monotonic/Monotonic%20queue"},"Sliding window maximum")))),(0,n.kt)("li",{parentName:"ul"},"Sorting",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Sorting%20algos/Merge%20Sort"},"3. Merge Sort")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Sorting%20algos/Quick%20Sort"},"4. Quick Sort")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Sorting%20algos/Radix%20Sort"},"5. Radix Sort")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Misc/Intervals/Merge%20intervals"},"Merge intervals")),(0,n.kt)("li",{parentName:"ul"},"Kadane algorithm"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Misc/Prefix%20sum/"},"Prefix sum")))),(0,n.kt)("li",{parentName:"ul"},"String"),(0,n.kt)("li",{parentName:"ul"},"Hash Table"),(0,n.kt)("li",{parentName:"ul"},"Tree",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Tree%20&%20Graph/Tree/Union%20find"},"Union find")),(0,n.kt)("li",{parentName:"ul"},"Depth First Search(in,pre,post)"),(0,n.kt)("li",{parentName:"ul"},"Breadth First Search"),(0,n.kt)("li",{parentName:"ul"},"Segment tree"))),(0,n.kt)("li",{parentName:"ul"},"Matrix"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Linked%20List/Stack%20&%20Queue"},"Stack & Queue"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Misc/Monotonic/Monotonic%20Stack"},"Monotonic Stack")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Misc/Monotonic/Monotonic%20queue"},"Monotonic queue")))),(0,n.kt)("li",{parentName:"ul"},"Graph",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Depth First Search"),(0,n.kt)("li",{parentName:"ul"},"Breadth First Search"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Tree%20&%20Graph/Graph/Topological%20Sort%20Kahns%20Algorithm"},"Topological Sort Kahns Algorithm"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Tree%20&%20Graph/Graph/Topological%20sort%20DFS"},"Topological sort DFS")))),(0,n.kt)("li",{parentName:"ul"},"Kosaraju's algorithm"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Linked%20List/"},"Linked list"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Linked%20List/Stack%20&%20Queue"},"Stack & Queue")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Tree%20&%20Graph/Tree/Trie%20data%20structure"},"Trie data structure"))),(0,n.kt)("h2",{id:"general-techniques"},"General Techniques"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Recursion/Intro%20to%20Dynamic%20programming"},"Intro to Dynamic programming")),(0,n.kt)("li",{parentName:"ul"},"Divide and Conquer"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Recursion/"},"Recursion")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Recursion/Backtracking"},"Backtracking")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Greedy%20algorithms"},"Greedy algorithms")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Misc/Intervals/Merge%20intervals"},"Merge intervals"))))}c.isMDXComponent=!0}}]);