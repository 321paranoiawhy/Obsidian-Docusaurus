"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[302],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(r),h=a,d=c["".concat(s,".").concat(h)]||c[h]||m[h]||o;return r?n.createElement(d,i(i({ref:t},u),{},{components:r})):n.createElement(d,i({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},8198:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={title:"More Heapq","date created":"Friday, November 18th 2022, 1:00:20 pm","date modified":"Friday, November 18th 2022, 1:37:33 pm"},i="More Heapq",l={unversionedId:"Algo/Python Tips & Tricks/More on heapq",id:"Algo/Python Tips & Tricks/More on heapq",title:"More Heapq",description:"For Heapq Introduction",source:"@site/docs/Algo/Python Tips & Tricks/More on heapq.md",sourceDirName:"Algo/Python Tips & Tricks",slug:"/Algo/Python Tips & Tricks/More on heapq",permalink:"/Obsidian-Docusaurus/docs/Algo/Python Tips & Tricks/More on heapq",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Python Tips & Tricks/More on heapq.md",tags:[],version:"current",frontMatter:{title:"More Heapq","date created":"Friday, November 18th 2022, 1:00:20 pm","date modified":"Friday, November 18th 2022, 1:37:33 pm"},sidebar:"tutorialSidebar",previous:{title:"Inspiring Math Algos",permalink:"/Obsidian-Docusaurus/docs/Algo/Python Tips & Tricks/Inspiring Math algos"},next:{title:"More on List",permalink:"/Obsidian-Docusaurus/docs/Algo/Python Tips & Tricks/More on list"}},s={},p=[{value:"For Heapq Introduction",id:"for-heapq-introduction",level:2},{value:"Merge Sorted Array with Heapq",id:"merge-sorted-array-with-heapq",level:2},{value:"Merge Using a Function That Returns a Comparison Key",id:"merge-using-a-function-that-returns-a-comparison-key",level:3},{value:"Find N Largest or Smallest Elt with Heapq",id:"find-n-largest-or-smallest-elt-with-heapq",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"more-heapq"},"More Heapq"),(0,a.kt)("h2",{id:"for-heapq-introduction"},"For Heapq Introduction"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Fundamental%20Algorithms/Linked%20List/Stack%20&%20Queue#Priority%20Queue%202%20%7B%20Heapq%20%7D"},"Priority Queue 2 { Heapq }"))),(0,a.kt)("h2",{id:"merge-sorted-array-with-heapq"},"Merge Sorted Array with Heapq"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Source",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://pythontic.com/algorithms/heapq/merge"},"https://pythontic.com/algorithms/heapq/merge")))),(0,a.kt)("li",{parentName:"ul"},"Python's heapq has a function called merge"),(0,a.kt)("li",{parentName:"ul"},"The merge() function takes multiple Python iterables as parameters."),(0,a.kt)("li",{parentName:"ul"},"For the merge() function to work correctly each of the input sequence should be in sorted order.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"heapq.merge(*iterables, key=None, reverse=False)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Example Python program that merges multiple sorted sequences\n# into one\n\nimport heapq\n\n# Create sorted sequences\nsequence1 = [1,2,3] # A list\nsequence2 = (5,7,9) # A tuple\nsequence3 = {6,8,10} # A set\n\n# Merge the sequences\nmerged = heapq.merge(sequence1, sequence2, sequence3)\n\n# Print the merged sequences\nprint("The merged sequence:")\n\nfor item in merged:\n    print(item)\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Coding question related to this",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Coding%20Practice/Heap/Merge%20K%20Sorted%20Lists"},"Merge K Sorted Lists"))))),(0,a.kt)("h3",{id:"merge-using-a-function-that-returns-a-comparison-key"},"Merge Using a Function That Returns a Comparison Key"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\n\nsequence1 = [('a', 1), ('b', 2), ('c', 3)]\nsequence2 = [('p', 15), ('q', 20), ('r', 30)]\n\nmerged = heapq.merge(sequence1, sequence2, key=lambda x: x[1])\n\nprint(list(merged))\n")),(0,a.kt)("h2",{id:"find-n-largest-or-smallest-elt-with-heapq"},"Find N Largest or Smallest Elt with Heapq"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Source",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://pythontic.com/algorithms/heapq/nsmallest"},"https://pythontic.com/algorithms/heapq/nsmallest")))),(0,a.kt)("li",{parentName:"ul"},"The nlargest() function of the Python module heapq returns the specified number of largest elements from a Python iterable like a list, tuple and others."),(0,a.kt)("li",{parentName:"ul"},"The function nlargest() can also be passed a key function that returns a comparison key to be used in the sorting.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\n\niterable = [6,1,7,9,3,5,4]\nlargests = heapq.nlargest(3, iterable)\n\nprint(largests)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\n\niterable = [('cat', 4), ('dog', 1), ('fish', 45)]\nlargests = heapq.nlargest(2, iterable, key = lambda x: x[1])\n\nprint(largests)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The nsmallest() method of the Python module heapify returns the specified number of smallest elements from an iterable in sorted order."),(0,a.kt)("li",{parentName:"ul"},"API similar to nlargest()")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\n\niterable = [6,1,7,9,3,5,4]\nlargests = heapq.nsmallest(3, iterable)\n\nprint(largests)\n")))}m.isMDXComponent=!0}}]);