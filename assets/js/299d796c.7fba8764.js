"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3218],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=u(n),m=i,d=g["".concat(l,".").concat(m)]||g[m]||p[m]||o;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[g]="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2841:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const o={tags:["string","set"],"date created":"Wednesday, August 17th 2022, 10:14:23 am","date modified":"Wednesday, August 17th 2022, 10:26:56 am",title:"128 Longest Consecutive Sequence"},a="128 Longest Consecutive Sequence",s={unversionedId:"Algo/Coding Practice/String/128 Longest Consecutive Sequence",id:"Algo/Coding Practice/String/128 Longest Consecutive Sequence",title:"128 Longest Consecutive Sequence",description:"Solution",source:"@site/docs/Algo/Coding Practice/String/128 Longest Consecutive Sequence.md",sourceDirName:"Algo/Coding Practice/String",slug:"/Algo/Coding Practice/String/128 Longest Consecutive Sequence",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/String/128 Longest Consecutive Sequence",draft:!1,editUrl:"https://github.com/321paranoiawhy/321paranoiawhy.github.io/blob/main/docs/Algo/Coding Practice/String/128 Longest Consecutive Sequence.md",tags:[{label:"string",permalink:"/Obsidian-Docusaurus/docs/tags/string"},{label:"set",permalink:"/Obsidian-Docusaurus/docs/tags/set"}],version:"current",frontMatter:{tags:["string","set"],"date created":"Wednesday, August 17th 2022, 10:14:23 am","date modified":"Wednesday, August 17th 2022, 10:26:56 am",title:"128 Longest Consecutive Sequence"},sidebar:"tutorialSidebar",previous:{title:"Next Greater Elt",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Stack/Next greater elt"},next:{title:"3 Longest Sub-string Without Repeating Characters",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/String/3 Longest Substring Without Repeating Characters"}},l={},u=[{value:"Solution",id:"solution",level:2}],c={toc:u},g="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(g,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"128-longest-consecutive-sequence"},"128 Longest Consecutive Sequence"),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We can sort and count the increasing sequences, which will be O(nlogn)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def longestConsecutive(self, nums):\n        if not nums:\n            return 0\n\n        nums.sort()\n\n        longest_streak = 1\n        current_streak = 1\n\n        for i in range(1, len(nums)):\n            if nums[i] != nums[i-1]:\n                if nums[i] == nums[i-1]+1:\n                    current_streak += 1\n                else:\n                    longest_streak = max(longest_streak, current_streak)\n                    current_streak = 1\n\n        return max(longest_streak, current_streak)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We need O(N) solution",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ex: ",(0,i.kt)("inlineCode",{parentName:"li"},"nums = [4,3,2,1]")),(0,i.kt)("li",{parentName:"ul"},"First turn the list to set, so we get O(1) time in lookup",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"set(nums)")))),(0,i.kt)("li",{parentName:"ul"},"For each element, we check if it is the first sequence,",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"4 is not a first sequence since 3 is also in the set")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 is a first sequence because 0 is not in the set")))),(0,i.kt)("li",{parentName:"ul"},"For all first sequences, count how long we can go up{curr + 1, curr + 2, curr+n}",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"i.e for 1 we can go 1 -> 2 -> 3 - 4, total length = 4")),(0,i.kt)("li",{parentName:"ul"},"Stop when the next step {elt +1} is not in the set")))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        memo = set(nums)\n        res = 0\n        \n        for elt in nums:\n            if (elt - 1) in memo:  #not beg of a sequence\n                continue\n            \n            local_res = 1\n            local_elt = elt\n            while (local_elt + 1) in memo: #count the no of hops we can get\n                local_res += 1\n                local_elt += 1\n            \n            res = max(res, local_res)\n            \n        return res\n")))}p.isMDXComponent=!0}}]);