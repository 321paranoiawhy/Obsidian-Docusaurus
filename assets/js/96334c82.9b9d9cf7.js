"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5553],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),m=l(t),d=r,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||i;return t?o.createElement(f,a(a({ref:n},s),{},{components:t})):o.createElement(f,a({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=d;var u={};for(var c in n)hasOwnProperty.call(n,c)&&(u[c]=n[c]);u.originalType=e,u[m]="string"==typeof e?e:r,a[1]=u;for(var l=2;l<i;l++)a[l]=t[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8742:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>u,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const i={"date created":"Wednesday, August 10th 2022, 4:56:48 pm","date modified":"Sunday, October 23rd 2022, 4:26:24 pm",title:"Monotonic Decreasing Queue"},a="Monotonic Decreasing Queue",u={unversionedId:"Algo/Fundamental Algorithms/Misc/Monotonic/Monotonic queue",id:"Algo/Fundamental Algorithms/Misc/Monotonic/Monotonic queue",title:"Monotonic Decreasing Queue",description:"- Reference",source:"@site/docs/Algo/Fundamental Algorithms/Misc/Monotonic/Monotonic queue.md",sourceDirName:"Algo/Fundamental Algorithms/Misc/Monotonic",slug:"/Algo/Fundamental Algorithms/Misc/Monotonic/Monotonic queue",permalink:"/Obsidian-Docusaurus/docs/Algo/Fundamental Algorithms/Misc/Monotonic/Monotonic queue",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Fundamental Algorithms/Misc/Monotonic/Monotonic queue.md",tags:[],version:"current",frontMatter:{"date created":"Wednesday, August 10th 2022, 4:56:48 pm","date modified":"Sunday, October 23rd 2022, 4:26:24 pm",title:"Monotonic Decreasing Queue"},sidebar:"tutorialSidebar",previous:{title:"Monotonic Stack",permalink:"/Obsidian-Docusaurus/docs/Algo/Fundamental Algorithms/Misc/Monotonic/Monotonic Stack"},next:{title:"What is Prefix Sum",permalink:"/Obsidian-Docusaurus/docs/Algo/Fundamental Algorithms/Misc/Prefix sum/"}},c={},l=[{value:"Example with Code",id:"example-with-code",level:2}],s={toc:l},m="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"monotonic-decreasing-queue"},"Monotonic Decreasing Queue"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://1e9.medium.com/monotonic-queue-notes-980a019d5793"},"Reference")),(0,r.kt)("li",{parentName:"ul"},"Monotonic Queue is a data structure that keeps it\u2019s elements either entirely in increasing, or entirely in decreasing order."),(0,r.kt)("li",{parentName:"ul"},"The advantage of MQ is linear time complexity."),(0,r.kt)("li",{parentName:"ul"},"Monotonic Decreasing Queue",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For each element, Before actually adding an element to the queue, we remove values which are smaller than the current value, this way we can keep a non-increasing sequence.")))),(0,r.kt)("h2",{id:"example-with-code"},"Example with Code"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sliding Window Maximum",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Find the maximum integer within the window each time it moves.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def sliding_window_maximum(nums: List[int], k: int) -> List[int]:\n\n    q = deque() # stores *indices*\n    res = []\n    \n    for i, cur in enumerate(nums):\n        while q and nums[q[-1]] <= cur:\n            q.pop() #pop from right/end\n        q.append(i)\n        \n        # if q[0] is out of bound(window size)-> remove it\n        if q[0] == i - k:\n            q.popleft()\n\n        # if window size == k, (k-1) since we're starting from 0(i=0)\n        if i >= k - 1:\n            res.append(nums[q[0]])\n            \n    return res\n")))}p.isMDXComponent=!0}}]);