"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9421],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=u(n),p=o,d=g["".concat(l,".").concat(p)]||g[p]||m[p]||i;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[g]="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5082:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const i={tags:["dp","string"],"date created":"Sunday, August 7th 2022, 3:36:00 pm","date modified":"Wednesday, August 10th 2022, 11:20:39 am",title:"Longest Common Sub-string"},a="Longest Common Sub-string",s={unversionedId:"Algo/Coding Practice/DP/Longest common substring",id:"Algo/Coding Practice/DP/Longest common substring",title:"Longest Common Sub-string",description:"Solution",source:"@site/docs/Algo/Coding Practice/DP/Longest common substring.md",sourceDirName:"Algo/Coding Practice/DP",slug:"/Algo/Coding Practice/DP/Longest common substring",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/DP/Longest common substring",draft:!1,editUrl:"https://github.com/321paranoiawhy/321paranoiawhy.github.io/blob/main/docs/Algo/Coding Practice/DP/Longest common substring.md",tags:[{label:"dp",permalink:"/Obsidian-Docusaurus/docs/tags/dp"},{label:"string",permalink:"/Obsidian-Docusaurus/docs/tags/string"}],version:"current",frontMatter:{tags:["dp","string"],"date created":"Sunday, August 7th 2022, 3:36:00 pm","date modified":"Wednesday, August 10th 2022, 11:20:39 am",title:"Longest Common Sub-string"},sidebar:"tutorialSidebar",previous:{title:"300 Longest Increasing Sub-sequence",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/DP/300 Longest Increasing Subsequence"},next:{title:"130. Surrounded Regions",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Graph/Surrounded Regions"}},l={},u=[{value:"Solution",id:"solution",level:2}],c={toc:u},g="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(g,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"longest-common-sub-string"},"Longest Common Sub-string"),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://www.techiedelight.com/wp-content/uploads/Longest-common-substring.png",alt:null})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The values for the cells are usually what you\u2019re trying to optimize. In this case, the values will probably be a number: the length of the longest sub-string that the two strings have in common."),(0,o.kt)("li",{parentName:"ul"},"The Formula",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"If the letters match, the value will be {1 +  top-left neighbor}"),(0,o.kt)("li",{parentName:"ul"},"If the letters do not match, the value is zero")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        dp = defaultdict(int)\n        \n        for r in range(len(text1)):\n            for c in range(len(text2)):\n                if text1[r] == text2[c]:\n                    dp[(r,c)] = 1 + dp[(r-1,c-1)]\n        \n        return max(dp.values())\n")))}m.isMDXComponent=!0}}]);