"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6505],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>k});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(k,l(l({ref:n},c),{},{components:t})):a.createElement(k,l({ref:n},c))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5664:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, July 24th 2022, 3:44:03 pm",title:"Parts of Dockerfile"},l="Parts of Dockerfile",i={unversionedId:"Containerization/Docker/dockerfiles",id:"Containerization/Docker/dockerfiles",title:"Parts of Dockerfile",description:"From",source:"@site/docs/Containerization/Docker/2. dockerfiles.md",sourceDirName:"Containerization/Docker",slug:"/Containerization/Docker/dockerfiles",permalink:"/Obsidian-Docusaurus/docs/Containerization/Docker/dockerfiles",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Containerization/Docker/2. dockerfiles.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, July 24th 2022, 3:44:03 pm",title:"Parts of Dockerfile"},sidebar:"tutorialSidebar",previous:{title:"General Step to Dockerizing a Project",permalink:"/Obsidian-Docusaurus/docs/Containerization/Docker/General step to dockerizing a project"},next:{title:"What is an Image",permalink:"/Obsidian-Docusaurus/docs/Containerization/Docker/images"}},s={},p=[{value:"From",id:"from",level:2},{value:"WORKDIR",id:"workdir",level:2},{value:"ENV",id:"env",level:2},{value:"RUN",id:"run",level:2},{value:"EXPOSE",id:"expose",level:2},{value:"Expose Multiple Port",id:"expose-multiple-port",level:3},{value:"CMD",id:"cmd",level:2},{value:"Multiple CMD Can Be Used",id:"multiple-cmd-can-be-used",level:3},{value:"COPY",id:"copy",level:2},{value:"Build the Docker into Image",id:"build-the-docker-into-image",level:2},{value:"Examples",id:"examples",level:2},{value:"Nodejs Dockerfile",id:"nodejs-dockerfile",level:3},{value:"Spring Boot Dockerfile",id:"spring-boot-dockerfile",level:3}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"parts-of-dockerfile"},"Parts of Dockerfile"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Create image based on the official Node image from dockerhub\n\nFROM node:lts-buster\n\n# Create app directory\n\nWORKDIR /usr/src/app\n\n# Copy dependency definitions\n\nCOPY package.json /usr/src/app\n\nCOPY package-lock.json /usr/src/app\n\n# Install dependecies same as npm install\nRUN npm ci\n\n# Get all the code needed to run the app\nCOPY . /usr/src/app\n\n# Expose the port the app runs in\n\nEXPOSE 3000\n\n# Serve the app\n\nCMD ["npm", "start"]\n')),(0,r.kt)("h2",{id:"from"},"From"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The OS/framework used. Common is alpine, debian, ubuntu")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"FROM UBUNTU:18:04\nFROM node:latest\nFROM node:14\n")),(0,r.kt)("h2",{id:"workdir"},"WORKDIR"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sets working directory (also could use 'RUN cd /some/path')")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"WORKDIR /app\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"FROM nginx:latest # Extends nginx so everything included in that image is included here\n\nWORKDIR /usr/share/nginx/html\n\nCOPY index.html index.html\n")),(0,r.kt)("h2",{id:"env"},"ENV"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Environment variables")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ENV NODE_ENV = production\n")),(0,r.kt)("h2",{id:"run"},"RUN"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Run commands/shell scripts inside the container, etc"),(0,r.kt)("li",{parentName:"ul"},"To run commands inside the containers, such as to install dependencies and updates")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"RUN npm install\nRUN apt-get install -y node\n")),(0,r.kt)("h2",{id:"expose"},"EXPOSE"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Ports to expose"),(0,r.kt)("li",{parentName:"ul"},"The\xa0",(0,r.kt)("inlineCode",{parentName:"li"},"EXPOSE"),"\xa0instruction does not actually publish the port. It functions as a type of documentation between the person who builds the image and the person who runs the container, about which ports are intended to be published.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It simply is a message for the developer on which port to use, but also the developer can use whichever port it want at runtime.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"EXPOSE 8080\n")),(0,r.kt)("h3",{id:"expose-multiple-port"},"Expose Multiple Port"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"EXPOSE 8080 5055 5005\n")),(0,r.kt)("h2",{id:"cmd"},"CMD"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The Command that runs when you 'docker run' a new image")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'CMD ["node", "app.js"]\n')),(0,r.kt)("h3",{id:"multiple-cmd-can-be-used"},"Multiple CMD Can Be Used"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"CMD service sshd start && /opt/mq/sbin/rabbitmq-server start\n")),(0,r.kt)("h2",{id:"copy"},"COPY"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Copies files from host to container")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"COPY package*.json . #copy package to container\nCOPY . . #copy everything to container\n")),(0,r.kt)("h2",{id:"build-the-docker-into-image"},"Build the Docker into Image"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Containerization/Docker/images"},"3. images"))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/docker/awesome-compose"},"More examples here")),(0,r.kt)("h3",{id:"nodejs-dockerfile"},"Nodejs Dockerfile"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'FROM node:12.18.1\n\nENV NODE_ENV=production\n\nWORKDIR /app\n\nCOPY ["package.json", "package-lock.json*", "./"]\n\nRUN npm install --production\n\nCOPY . .\n\nCMD [ "node", "server.js" ]\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"it is a best practice to define a .dockerignore file for your images")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"#.dockerignore\nnode_modules\n")),(0,r.kt)("h3",{id:"spring-boot-dockerfile"},"Spring Boot Dockerfile"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'FROM openjdk:16-alpine3.13\n\nWORKDIR /app\n\nCOPY .mvn/ .mvn\nCOPY mvnw pom.xml ./\nRUN ./mvnw dependency:go-offline\n\nCOPY src ./src\n\nCMD ["./mvnw", "spring-boot:run"]\n')))}d.isMDXComponent=!0}}]);