"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4776],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},457:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={"date created":"Sunday, August 14th 2022, 10:58:12 am","date modified":"Sunday, August 14th 2022, 12:00:42 pm",title:"222 Count Complete Tree Nodes"},i="222 Count Complete Tree Nodes",l={unversionedId:"Algo/Coding Practice/Tree/222 Count Complete Tree Nodes",id:"Algo/Coding Practice/Tree/222 Count Complete Tree Nodes",title:"222 Count Complete Tree Nodes",description:"Solution",source:"@site/docs/Algo/Coding Practice/Tree/222 Count Complete Tree Nodes.md",sourceDirName:"Algo/Coding Practice/Tree",slug:"/Algo/Coding Practice/Tree/222 Count Complete Tree Nodes",permalink:"/obsidian/docs/Algo/Coding Practice/Tree/222 Count Complete Tree Nodes",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Coding Practice/Tree/222 Count Complete Tree Nodes.md",tags:[],version:"current",frontMatter:{"date created":"Sunday, August 14th 2022, 10:58:12 am","date modified":"Sunday, August 14th 2022, 12:00:42 pm",title:"222 Count Complete Tree Nodes"},sidebar:"tutorialSidebar",previous:{title:"212 Word Search II",permalink:"/obsidian/docs/Algo/Coding Practice/Tree/212 Word Search II"},next:{title:"236 Lowest Common Ancestor of a Binary Tree",permalink:"/obsidian/docs/Algo/Coding Practice/Tree/236 Lowest Common Ancestor of a Binary Tree"}},s={},c=[{value:"Solution",id:"solution",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"222-count-complete-tree-nodes"},"222 Count Complete Tree Nodes"),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We can use ",(0,o.kt)("inlineCode",{parentName:"li"},"DFS")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"BFS")," but that will be O(N), we need an algorithm better than that")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def count_nodes(node):\n    if not node:\n        return 0\n    else:\n        return 1 + count_nodes(node.left) + count_nodes(node.right)\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"What is a complete binary tree"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"A complete binary tree is ",(0,o.kt)("strong",{parentName:"li"},"a binary tree in which all the levels are completely filled except possibly the lowest one, which is filled from the left to right"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("img",{parentName:"li",src:"https://www.techiedelight.com/wp-content/uploads/Complete-Binary-Tree.png",alt:null})))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"What is a perfect binary tree"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"A perfect binary tree is a type of binary tree in which every internal node has exactly two child nodes and all the leaf nodes are at the same level."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("img",{parentName:"li",src:"https://cdn.programiz.com/sites/tutorial2program/files/perfect-binary-tree-rec.png",alt:null})),(0,o.kt)("li",{parentName:"ul"},"What is the formula to find the number of nodes in a full binary tree",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"2**N - 1"),", where N is the number of levels"),(0,o.kt)("li",{parentName:"ul"},"in The above image for instance tree-3 has ",(0,o.kt)("inlineCode",{parentName:"li"},"2**3-1 = 7")," nodes, 3 is the number of levels"),(0,o.kt)("li",{parentName:"ul"},"In a perfect binary tree, every node is also another sub-perfect binary tree"),(0,o.kt)("li",{parentName:"ul"},"Given a perfect tree, the hops to reach the left-most node it also the same as the hops to reach the right most node",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"For tree-2 for instance, it takes two hops to reach both leftmost and rightmost nodes ",(0,o.kt)("inlineCode",{parentName:"li"},"{assume initial hop as 1}")),(0,o.kt)("li",{parentName:"ul"},"With this understanding we can update our formula above, given a perfect binary tree, we first count the hops to reach the leftmost or rightmost nodes and return ",(0,o.kt)("inlineCode",{parentName:"li"},"2**hops-1")))))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"With the above thought we can come up with an algorithm that is better than O(N), note that"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Every perfect tree is also a complete tree"),(0,o.kt)("li",{parentName:"ul"},"A complete tree can be composed of perfect subtrees."),(0,o.kt)("li",{parentName:"ul"},"At every note we check if the hops to reach the leftmost and rightmost node is the same, if so we return ",(0,o.kt)("inlineCode",{parentName:"li"},"2**hops - 1")," as the total nodes, otherwise recurs to right and left nodes",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Whenever we find a perfect binary tree we're saving time since we will not search all nodes under that tree."),(0,o.kt)("li",{parentName:"ul"},"Eventually we will reach to a leaf node which is a perfect binary tree.")))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def countNodes(self, root: Optional[TreeNode]) -> int:\n        \n        \n        def traverseLeft(node):\n            res, n = 0, node\n            while n:\n                res += 1\n                n = n.left\n            return res\n        \n        def traverseRight(node):\n            res, n = 0, node\n            while n:\n                res += 1\n                n = n.right\n            return res\n        \n        def my_count_nodes(node):\n            left_count = traverseLeft(node)\n            right_count = traverseRight(node)\n            \n            if left_count == right_count:\n                return 2**left_count - 1\n            else:\n                return 1 + my_count_nodes(node.left) + my_count_nodes(node.right)\n        \n        return my_count_nodes(root)\n")))}d.isMDXComponent=!0}}]);