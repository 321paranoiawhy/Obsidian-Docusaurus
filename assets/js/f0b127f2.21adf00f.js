"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1705],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,y=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(y,a(a({ref:t},p),{},{components:n})):r.createElement(y,a({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1063:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Monday, October 3rd 2022, 10:21:17 am",title:"Sets - Intersection, Union and More"},a="Sets - Intersection, Union and More",s={unversionedId:"Algo/Python Tips & Tricks/Sets - intersection, union and more",id:"Algo/Python Tips & Tricks/Sets - intersection, union and more",title:"Sets - Intersection, Union and More",description:"- Set is a Collection of Unique Elements",source:"@site/docs/Algo/Python Tips & Tricks/Sets - intersection, union and more.md",sourceDirName:"Algo/Python Tips & Tricks",slug:"/Algo/Python Tips & Tricks/Sets - intersection, union and more",permalink:"/obsidian/docs/Algo/Python Tips & Tricks/Sets - intersection, union and more",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Python Tips & Tricks/Sets - intersection, union and more.md",tags:[],version:"current",frontMatter:{"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Monday, October 3rd 2022, 10:21:17 am",title:"Sets - Intersection, Union and More"},sidebar:"tutorialSidebar",previous:{title:"Random",permalink:"/obsidian/docs/Algo/Python Tips & Tricks/Random"},next:{title:"Sorting in Python",permalink:"/obsidian/docs/Algo/Python Tips & Tricks/Sorting"}},l={},c=[{value:"Check if a Word is without Repeating Characters",id:"check-if-a-word-is-without-repeating-characters",level:2},{value:"SET Common Operations",id:"set-common-operations",level:2},{value:"SET Non Common Operations",id:"set-non-common-operations",level:2}],p={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sets---intersection-union-and-more"},"Sets - Intersection, Union and More"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Set is a Collection of Unique Elements",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"More interesting operations on set",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"setA & setB == intersection\u2026(find items common to both)"),(0,o.kt)("li",{parentName:"ul"},"setA | setB = union\u2026all the items in one place"),(0,o.kt)("li",{parentName:"ul"},"setA\u2013setB = all elements in A that aren\u2019t in B"),(0,o.kt)("li",{parentName:"ul"},"setA ^ setB = all the elements that are either in the first set or the second set but not in both.")))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"a = set(['A', 'B', 'C','D'])\nb = set(['C', 'D', 'E', 'F'])\nprint(a & b) #C, D\nprint(a | b) #all elts\nprint(a - b) #A, B\nprint(a ^ b) #A,B,E,F\n")),(0,o.kt)("h2",{id:"check-if-a-word-is-without-repeating-characters"},"Check if a Word is without Repeating Characters"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def isUnique(word):\n    return len(word) == len(set(word))\n\nprint(isUnique("set"))\nprint(isUnique("element"))\n')),(0,o.kt)("h2",{id:"set-common-operations"},"SET Common Operations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"my_set = set('a', 'b', 'c')\n\nmy_set.add('d')\n\nmy_set.update(('d', 'e', 'f'))  #add multiple sets\n\nmy_set.remove('b')\n\nmy_set.remove('x') #caused an error x is not in the set\n\nmy_set.discard('x') #remove but doesn't cause an error\n\nmy_set.pop() #returns a random elt\n\nmy_set.clear() #removed all the elts\n")),(0,o.kt)("h2",{id:"set-non-common-operations"},"SET Non Common Operations"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"isdisjoint")," method return true if there are no common elements between sets a and b")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"a = (1,2,3)\nb = (1,2,3,4)\n\na.issubset(b) #true\n\na.issuperset(b) #false\n\na.isdisjoint(b) #false\n")))}u.isMDXComponent=!0}}]);