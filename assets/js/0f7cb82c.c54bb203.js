"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1224],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,y=m["".concat(o,".").concat(d)]||m[d]||c[d]||l;return n?a.createElement(y,i(i({ref:t},u),{},{components:n})):a.createElement(y,i({ref:t},u))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3837:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={title:"Fundamentals","date created":"Monday, December 12th 2022, 8:37:20 pm","date modified":"Saturday, April 29th 2023, 2:34:54 pm"},i="Fundamentals",s={unversionedId:"Programming langs/TypeScript/Fundamentals",id:"Programming langs/TypeScript/Fundamentals",title:"Fundamentals",description:"- Sources",source:"@site/docs/Programming langs/TypeScript/Fundamentals.md",sourceDirName:"Programming langs/TypeScript",slug:"/Programming langs/TypeScript/Fundamentals",permalink:"/Obsidian-Docusaurus/docs/Programming langs/TypeScript/Fundamentals",draft:!1,editUrl:"https://github.com/321paranoiawhy/321paranoiawhy.github.io/blob/main/docs/Programming langs/TypeScript/Fundamentals.md",tags:[],version:"current",frontMatter:{title:"Fundamentals","date created":"Monday, December 12th 2022, 8:37:20 pm","date modified":"Saturday, April 29th 2023, 2:34:54 pm"},sidebar:"tutorialSidebar",previous:{title:"Best Practices",permalink:"/Obsidian-Docusaurus/docs/Programming langs/TypeScript/Best practices"},next:{title:"More on Typescript",permalink:"/Obsidian-Docusaurus/docs/Programming langs/TypeScript/More on Typescript"}},o={},p=[{value:"Why and What of Typescript",id:"why-and-what-of-typescript",level:2},{value:"Basic Types",id:"basic-types",level:2},{value:"More Types",id:"more-types",level:2},{value:"Any Type",id:"any-type",level:3},{value:"Literal Types",id:"literal-types",level:3},{value:"Unions Types",id:"unions-types",level:3},{value:"Intersection Types",id:"intersection-types",level:3},{value:"Tuple Type",id:"tuple-type",level:3},{value:"Void Type",id:"void-type",level:3},{value:"Object Type",id:"object-type",level:3},{value:"Type Assertion",id:"type-assertion",level:2},{value:"Typing Functions",id:"typing-functions",level:2},{value:"Default-initialized Parameters",id:"default-initialized-parameters",level:3},{value:"Rest Parameters",id:"rest-parameters",level:3},{value:"Optional Properties",id:"optional-properties",level:2},{value:"Optional Parameters",id:"optional-parameters",level:3},{value:"Optional Property",id:"optional-property",level:3},{value:"Readonly Properties",id:"readonly-properties",level:2},{value:"ReadonlyArray",id:"readonlyarray",level:3},{value:"OOP",id:"oop",level:2},{value:"Classes",id:"classes",level:3},{value:"Inheritance",id:"inheritance",level:3},{value:"Interfaces",id:"interfaces",level:3},{value:"Indexed Signatures",id:"indexed-signatures",level:4},{value:"Implementing Interfaces",id:"implementing-interfaces",level:4},{value:"Extending Interfaces",id:"extending-interfaces",level:4},{value:"Enums",id:"enums",level:3},{value:"More OOP Concepts to cover\u2026",id:"more-oop-concepts-to-cover",level:3},{value:"Generics",id:"generics",level:2},{value:"Generic Function/interfaces",id:"generic-functioninterfaces",level:3},{value:"Constraints",id:"constraints",level:3}],u={toc:p},m="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"fundamentals"},"Fundamentals"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sources",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/cheatsheets"},"https://www.typescriptlang.org/cheatsheets")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/"},"https://www.typescriptlang.org/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/basic_type_example"},"Typescript for react"))))),(0,r.kt)("h2",{id:"why-and-what-of-typescript"},"Why and What of Typescript"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("img",{parentName:"li",src:"https://www.typescripttutorial.net/wp-content/uploads/2020/05/what-is-typescript-typescript-and-js.png",alt:"typescript is a super-set of JavaScript"})),(0,r.kt)("li",{parentName:"ul"},"The goal of TypeScript is to be a static typechecker for JavaScript programs",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"in other words, a tool that runs before your code runs (static) and ensure that the types of the program are correct (typechecked)."))),(0,r.kt)("li",{parentName:"ul"},"TS = JavaScript + Types",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"basically Typescript provides types for JavaScript, and understanding these types is the key to mastering Typescript."))))),(0,r.kt)("h2",{id:"basic-types"},"Basic Types"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("img",{parentName:"li",src:"https://d3n0h9tb65y8q.cloudfront.net/public_assets/assets/000/002/543/original/Typescript-primitive-types.png?1642578765",alt:null})),(0,r.kt)("li",{parentName:"ul"},"All JavaScript types",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Primitive types",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"string"),(0,r.kt)("li",{parentName:"ul"},"number",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"bingint"))),(0,r.kt)("li",{parentName:"ul"},"boolean"),(0,r.kt)("li",{parentName:"ul"},"null & undefined",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"By default null and undefined are subtypes of all other types. That means you can assign null and undefined to something like number."))),(0,r.kt)("li",{parentName:"ul"},"void & symbol"))),(0,r.kt)("li",{parentName:"ul"},"Object types",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Array, Functions, Classes, enum and interfaces\u2026")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'//primitive-types\nlet name: string = "zack";\nlet age: number = 23;\nlet planets: bigint = 10n;\nlet isDeveloper: boolean = true;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const keys: number[] = [2, 4, 8, 16];  //array\nconst map: Map<string, {name: string}> = new Map();  //map\nconst set: Set<number> = new Set();\nconst square: (x: number) => number =  x => x*x;  //function definition\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Never use uppercase, String, Number or Object, it's recommended to use lowercase, string, number and object.")),(0,r.kt)("h2",{id:"more-types"},"More Types"),(0,r.kt)("h3",{id:"any-type"},"Any Type"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The any type is a powerful way to work with existing JavaScript, allowing you to gradually opt-in and opt-out of type checking during compilation.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"let looselyTyped: any = 4;\n// OK, ifItExists might exist at runtime\nlooselyTyped.ifItExists();\n// OK, toFixed exists (but the compiler doesn't check)\nlooselyTyped.toFixed();\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Type safety is one of the main motivations for using Typescript and you should try to avoid using any when not necessary.")),(0,r.kt)("h3",{id:"literal-types"},"Literal Types"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"using literal types you can allow an exact value which a string, number, or boolean must have.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'type Easing = "ease-in" | "ease-out" | "ease-in-out";\nconst animation: Easing = \'ease-in\';\n\n\n//rolling a dice any number of times will only result in 1-6 so we can define our function with literal typea\ntype DiceRollResult = 1 | 2 | 3 | 4 | 5 | 6;\nfunction rollDice(): DiceRollResult {\n    return (Math.floor(Math.random() * 6) + 1) as DiceRollResult\n    //returning any number out side [1,6] is an error\n}\nconst result = rollDice();\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface FontConf {\n    fontName: string;\n    fontWeight: number;\n    fontSize: 12 | 14 | 16 | 18;\n}\n\nlet myFontConf: FontConf = {fontName: 'Roboto', fontWeight: 400, fontSize: 14}; \n")),(0,r.kt)("h3",{id:"unions-types"},"Unions Types"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A union type allows you to store a value of one or several types in a variable.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function movie(title: string, rating: string | number){\n    if(typeof param2 === \"string\"){\n        //...\n    }else{\n        //..\n    }\n}\n\nmovie('Movie1', 'N/A');\nmovie('Movie2', 7.8);\nmovie('Movie2', true); //error\n")),(0,r.kt)("h3",{id:"intersection-types"},"Intersection Types"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An intersection type combines two or more types to create a new type that has all properties of the existing types.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface Identity {\n    id: number;\n    name: string;\n}\n\ninterface Contact {\n    email: string;\n    phone: string;\n}\n\ntype Employee = Identity & Contact; \n\nconst e: Employee = { \n    id: 100, \n    name: 'John Doe', \n    email: 'john.doe@example.com', \n    phone: '(408)-897-5684' \n};\n")),(0,r.kt)("h3",{id:"tuple-type"},"Tuple Type"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tuples satisfy two things",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The number of elements in the tuple is fixed."),(0,r.kt)("li",{parentName:"ul"},"The types of elements are known, and need not be the same.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'//tuples\nlet name_age: [string, number] = ["zack", 23];\n//error => name_age = [12, "zack"]; //type error\n')),(0,r.kt)("h3",{id:"void-type"},"Void Type"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type for functions that do not return a value")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function warn(message: string): void{\n    log.warn(message)\n}\n")),(0,r.kt)("h3",{id:"object-type"},"Object Type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// The parameter\'s type annotation is an object type\nfunction printCoord(pt: { x: number; y: number }) {\n  console.log("The coordinate\'s x value is " + pt.x);\n  console.log("The coordinate\'s y value is " + pt.y);\n}\nprintCoord({ x: 3, y: 7 });\n\n//we can also do\ninterface Point{\n    x: number; \n    y: number;\n}\n\nfunction printCoord(pt: Point) {\n  console.log("The coordinate\'s x value is " + pt.x);\n  console.log("The coordinate\'s y value is " + pt.y);\n}\nprintCoord({ x: 3, y: 7 });\n')),(0,r.kt)("h2",{id:"type-assertion"},"Type Assertion"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A type assertion is like a type cast in other languages, but performs no special checking or restructuring of data.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'let someValue: any = "this is a string";\nlet strLength: number = (someValue as string).length;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const user = {} as User;\n\n//similarly\nconst user = <User>{};\n")),(0,r.kt)("h2",{id:"typing-functions"},"Typing Functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function login(email: string, password: string): boolean {\n    //send post request\n    return true\n}\n\nlet myAdd: (x: number, y: number) => number = function (x: number, y: number): number {\n    return x + y;\n};\n\n//we don't have to explcitly define type as Typescript can infer the types\nlet myAdd = function (x: number, y: number): number {\n    return x + y;\n};\n\n//or\nlet myAdd: (x: number, y: number) => number = function (x, y) {\n    return x + y;\n};\n")),(0,r.kt)("h3",{id:"default-initialized-parameters"},"Default-initialized Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"default-initialized parameters can be seen as an optional parameters with a default value",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"if user didn't provide a value or provided a null/undefined value the default value will be used")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'function buildName(firstName: string, lastName = "Smith") {\n    return firstName + " " + lastName;\n}\n\nlet result1 = buildName("Bob"); // works correctly now, returns "Bob Smith"\nlet result2 = buildName("Bob", undefined); // still works, also returns "Bob Smith\nlet result3 = buildName("Bob", "Adams", "Sr."); // error, too many parameters\n')),(0,r.kt)("h3",{id:"rest-parameters"},"Rest Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"used to work with multiple parameters as a group")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'function buildName(firstName: string, ...restOfName: string[]) {\n    return firstName + " " + restOfName.join(" ");\n}\n// employeeName will be "Joseph Samuel Lucas MacKinzie"\nlet employeeName = buildName("Joseph", "Samuel", "Lucas", "MacKinzie")\n')),(0,r.kt)("h2",{id:"optional-properties"},"Optional Properties"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use the parameter?: type syntax to make a parameter optional.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Use the expression typeof(parameter) !== 'undefined' to check if the parameter has been initialized.")),(0,r.kt)("h3",{id:"optional-parameters"},"Optional Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function findUserBy(email: string, username?: string): User{\n    if(typeof username != undefined){\n        return db.findUserBy({email: email, username: username});\n    }else{\n        return db.findUserBy({email: email});\n    }\n}\n")),(0,r.kt)("h3",{id:"optional-property"},"Optional Property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"//the above example with interface\ninterface User{\n    username?: string;\n    email: string;\n    //...more properties\n}\n\nfunction findUserBy(user: User): User{\n    if(typeof user.username != undefined){\n        return db.findUserBy({email: user.email, username: user.username});\n    }else{\n        return db.findUserBy({email: user,email});\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"//Optional tuple elements\nlet bgColor, headerColor: [number, number, number, number?];\nbgColor = [0, 255, 255, 0.5];\nheaderColor = [0, 255, 255];\n")),(0,r.kt)("h2",{id:"readonly-properties"},"Readonly Properties"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Some properties should only be modifiable when an object is first created.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"You can specify this by putting ",(0,r.kt)("inlineCode",{parentName:"li"},"readonly")," before the name of the property:")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface Point {\n    readonly x: number;\n    readonly y: number;\n}\n\nlet p1: Point = { x: 10, y: 20 };\np1.x = 5; // error! Cannot assign to 'x' because it is a read-only property.\n")),(0,r.kt)("h3",{id:"readonlyarray"},"ReadonlyArray"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Typescript comes with a ReadonlyArray type that is the same as Array with all mutating methods removed, so you can make sure you don't change your arrays after creation.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"let my_heros: ReadonlyArray<string> = ['Ali', 'Mike', 'Alferd'];\n\nmy_heros[0] = 'Tyson' //error! cannot assign to readonly\nmy_heros.push('Paul') //error! doesn't exist on readonly type\n")),(0,r.kt)("h2",{id:"oop"},"OOP"),(0,r.kt)("h3",{id:"classes"},"Classes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'class Greeter {\n    greeting: string;\n    \n    constructor(message: string) {\n        this.greeting = message;\n    }\n    \n    greet() {\n        return "Hello, " + this.greeting;\n    }\n}\n\nlet greeter = new Greeter("world");\n')),(0,r.kt)("h3",{id:"inheritance"},"Inheritance"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'class Animal {\n    name: string;\n\n    constructor(theName: string) {\n        this.name = theName;\n    }\n\n    move(distanceInMeters: number = 0) {\n        console.log(`${this.name} moved ${distanceInMeters}m.`);\n    }\n}\n\nclass Snake extends Animal {\n    \n    constructor(name: string) {\n        super(name);\n    }\n\n    move(distanceInMeters = 5) {\n        console.log("Slithering...");\n        super.move(distanceInMeters);\n    }\n}\nlet sam = new Snake("Sammy the Python");\nsam.move();\n')),(0,r.kt)("h3",{id:"interfaces"},"Interfaces"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"interfaces are a useful tool to define the structure of our or external data.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'interface HomeComponentProps{\n    title: string,\n    description: string\n    callBack?: (x: string, b: string) => void\n}\n\nfunction HomeComponent(props: HomeComponentProps){\n    console.log(props.title);\n}\n\n//function HomeComponent({title, description}: Props) { ... }\n\nlet my_props: HomeComponentProps = {title: "Avatar", description: "Blue people in outer space"}\n\nHomeComponent(my_props)\n//<HomeComponent ...props />\n')),(0,r.kt)("h4",{id:"indexed-signatures"},"Indexed Signatures"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface SquareConfig {\n    color?: string;\n    width?: number;\n    [propName: string]: any;\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Here we're saying a SquareConfig can have any number of properties, and as long as they aren't color or width, their types don't matter.")),(0,r.kt)("h4",{id:"implementing-interfaces"},"Implementing Interfaces"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface ClockInterface {\n    currentTime: Date;\n    setTime(d: Date): void; //or setTime: (d: Date) => void\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class Clock implements ClockInterface {\n    currentTime: Date = new Date();\n    \n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    \n    constructor(h: number, m: number) {}\n}\n")),(0,r.kt)("h4",{id:"extending-interfaces"},"Extending Interfaces"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Like classes, interfaces can extend each other. This allows you to copy the members of one interface into another")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'interface Shape {\n    color: string;\n}\n\ninterface Square extends Shape {\n    sideLength: number;\n}\n\nlet square = {} as Square;\nsquare.color = "blue";\nsquare.sideLength = 10;\n')),(0,r.kt)("h3",{id:"enums"},"Enums"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"enum Color{\n    Red,\n    Green,\n    Blue\n}\nlet favColor: Color = Color.Red;\n\n//use it in a function\nfunction draw(color: Color, pattern: ...) {...}\n")),(0,r.kt)("h3",{id:"more-oop-concepts-to-cover"},"More OOP Concepts to cover\u2026"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"access control with protected, private and public"),(0,r.kt)("li",{parentName:"ul"},"getters and setters"),(0,r.kt)("li",{parentName:"ul"},"static properties"),(0,r.kt)("li",{parentName:"ul"},"abstract classes"),(0,r.kt)("li",{parentName:"ul"},"method overloading",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads"},"https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads"))))),(0,r.kt)("h2",{id:"generics"},"Generics"),(0,r.kt)("h3",{id:"generic-functioninterfaces"},"Generic Function/interfaces"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function firstElement<Type>(arr: Type[]): Type | undefined {\n  return arr[0];\n}\n\nfirstElement<string>(['apple', 'box', 'break']);\nfirstElement<number>([120, 1]);\nfirstElement([]); //undefined\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface Box<Type> {\n  contents: Type;\n}\n\nconst box: Box<string> = {contents: 'Movie'};\n")),(0,r.kt)("h3",{id:"constraints"},"Constraints"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A tool we can use to limit the kinds of types that a type parameter can accept."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"in the example below we're saying the type passed to this function must have a property called length"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function longest<Type extends { length: number }>(a: Type, b: Type) {\n  if (a.length >= b.length) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\n// longerArray is of type 'number[]'\nconst longerArray = longest([1, 2], [1, 2, 3]);\n// longerString is of type 'alice' | 'bob'\nconst longerString = longest(\"alice\", \"bob\");\n// Error! Numbers don't have a 'length' property\nconst notOK = longest(10, 100);\n")))}c.isMDXComponent=!0}}]);