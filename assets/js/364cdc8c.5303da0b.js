"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5786],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=u(n),p=r,h=d["".concat(s,".").concat(p)]||d[p]||c[p]||i;return n?a.createElement(h,l(l({ref:t},m),{},{components:n})):a.createElement(h,l({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1321:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Saturday, February 4th 2023, 3:29:51 pm",title:"Which Algo to Select, Pattern Based Answer"},l="Which Algo to Select, Pattern Based Answer",o={unversionedId:"Algo/Fundamental Algorithms/Recommendations/Which algo to select, pattern based answer",id:"Algo/Fundamental Algorithms/Recommendations/Which algo to select, pattern based answer",title:"Which Algo to Select, Pattern Based Answer",description:"Source",source:"@site/docs/Algo/Fundamental Algorithms/Recommendations/Which algo to select, pattern based answer.md",sourceDirName:"Algo/Fundamental Algorithms/Recommendations",slug:"/Algo/Fundamental Algorithms/Recommendations/Which algo to select, pattern based answer",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Recommendations/Which algo to select, pattern based answer",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Fundamental Algorithms/Recommendations/Which algo to select, pattern based answer.md",tags:[],version:"current",frontMatter:{"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Saturday, February 4th 2023, 3:29:51 pm",title:"Which Algo to Select, Pattern Based Answer"},sidebar:"tutorialSidebar",previous:{title:"How to Approach OOP Questions",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Recommendations/How to approach OOP questions"},next:{title:"What is Recursion",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Recursion/"}},s={},u=[{value:"If Input Array is Sorted Then",id:"if-input-array-is-sorted-then",level:2},{value:"If Asked for All permutations/subsets Then",id:"if-asked-for-all-permutationssubsets-then",level:2},{value:"If Given a Tree Then",id:"if-given-a-tree-then",level:2},{value:"If Given a Graph Then",id:"if-given-a-graph-then",level:2},{value:"If Given a Linked List Then",id:"if-given-a-linked-list-then",level:2},{value:"If Recursion is Banned Then",id:"if-recursion-is-banned-then",level:2},{value:"If Must Solve In-place Then",id:"if-must-solve-in-place-then",level:2},{value:"If Asked for maximum/minimum of sub-array/subset/options Then",id:"if-asked-for-maximumminimum-of-sub-arraysubsetoptions-then",level:2},{value:"If Asked for top/least K Items Then",id:"if-asked-for-topleast-k-items-then",level:2},{value:"If Asked for Common Strings Then",id:"if-asked-for-common-strings-then",level:2},{value:"If Asked Sub-string with X Condition",id:"if-asked-sub-string-with-x-condition",level:2},{value:"If Asked Sub-array Sum with X Condition",id:"if-asked-sub-array-sum-with-x-condition",level:2},{value:"Next/Prev Greater or Smaller Element",id:"nextprev-greater-or-smaller-element",level:2},{value:"Else",id:"else",level:2}],m={toc:u},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"which-algo-to-select-pattern-based-answer"},"Which Algo to Select, Pattern Based Answer"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://seanprashad.com/leetcode-patterns/"},"Source")),(0,r.kt)("h2",{id:"if-input-array-is-sorted-then"},"If Input Array is Sorted Then"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Searching%20algos/Binary%20search"},"1. Binary search")),(0,r.kt)("li",{parentName:"ul"},"Two pointers")),(0,r.kt)("h2",{id:"if-asked-for-all-permutationssubsets-then"},"If Asked for All permutations/subsets Then"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Recursion/Backtracking"},"Backtracking"))),(0,r.kt)("h2",{id:"if-given-a-tree-then"},"If Given a Tree Then"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"DFS{inorder,preorder, postorder}"),(0,r.kt)("li",{parentName:"ul"},"BFS")),(0,r.kt)("h2",{id:"if-given-a-graph-then"},"If Given a Graph Then"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"DFS"),(0,r.kt)("li",{parentName:"ul"},"BFS")),(0,r.kt)("h2",{id:"if-given-a-linked-list-then"},"If Given a Linked List Then"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Two pointers ",(0,r.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Linked%20List/"},"Linked list"))),(0,r.kt)("h2",{id:"if-recursion-is-banned-then"},"If Recursion is Banned Then"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Linked%20List/Stack%20&%20Queue#Stack%20%7BLAST%20IN%20FIRST%20OUT%7D"},"Stack {LAST IN FIRST OUT}"))),(0,r.kt)("h2",{id:"if-must-solve-in-place-then"},"If Must Solve In-place Then"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Swap corresponding values"),(0,r.kt)("li",{parentName:"ul"},"Store one or more different values in the same pointer")),(0,r.kt)("h2",{id:"if-asked-for-maximumminimum-of-sub-arraysubsetoptions-then"},"If Asked for maximum/minimum of sub-array/subset/options Then"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Recursion/Intro%20to%20Dynamic%20programming"},"Intro to Dynamic programming"))),(0,r.kt)("h2",{id:"if-asked-for-topleast-k-items-then"},"If Asked for top/least K Items Then"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Linked%20List/Stack%20&%20Queue#Priority%20Queue%202%20%7B%20Heapq%20%7D"},"Heap"))),(0,r.kt)("h2",{id:"if-asked-for-common-strings-then"},"If Asked for Common Strings Then"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Map"),(0,r.kt)("li",{parentName:"ul"},"Trie")),(0,r.kt)("h2",{id:"if-asked-sub-string-with-x-condition"},"If Asked Sub-string with X Condition"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sliding window"),(0,r.kt)("li",{parentName:"ul"},"Monotonic queue")),(0,r.kt)("h2",{id:"if-asked-sub-array-sum-with-x-condition"},"If Asked Sub-array Sum with X Condition"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Misc/Prefix%20sum/"},"Prefix sum"))),(0,r.kt)("h2",{id:"nextprev-greater-or-smaller-element"},"Next/Prev Greater or Smaller Element"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Misc/Monotonic/Monotonic%20Stack"},"Monotonic Stack"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Coding%20Practice/Stack/Next%20greater%20elt"},"ex: Next greater elt"))))),(0,r.kt)("h2",{id:"else"},"Else"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Map/Set for O(1) time & O(n) space"),(0,r.kt)("li",{parentName:"ul"},"Sort input for O(nlogn) time and O(1) space")))}c.isMDXComponent=!0}}]);