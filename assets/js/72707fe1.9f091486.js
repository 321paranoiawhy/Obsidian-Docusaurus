"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2166],{3905:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>m});var o=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var p=o.createContext({}),c=function(e){var r=o.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},s=function(e){var r=c(e.components);return o.createElement(p.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},g=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=c(t),g=n,m=u["".concat(p,".").concat(g)]||u[g]||d[g]||a;return t?o.createElement(m,l(l({ref:r},s),{},{components:t})):o.createElement(m,l({ref:r},s))}));function m(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,l=new Array(a);l[0]=g;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i[u]="string"==typeof e?e:n,l[1]=i;for(var c=2;c<a;c++)l[c]=t[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1719:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var o=t(7462),n=(t(7294),t(3905));const a={"date created":"Sunday, July 31st 2022, 4:35:16 pm","date modified":"Sunday, July 31st 2022, 8:42:04 pm",title:"Topological Sort DFS"},l="Topological Sort DFS",i={unversionedId:"Algo/Tree & Graph/Graph/Topological sort DFS",id:"Algo/Tree & Graph/Graph/Topological sort DFS",title:"Topological Sort DFS",description:"- Video source",source:"@site/docs/Algo/Tree & Graph/Graph/Topological sort DFS.md",sourceDirName:"Algo/Tree & Graph/Graph",slug:"/Algo/Tree & Graph/Graph/Topological sort DFS",permalink:"/Obsidian-Docusaurus/docs/Algo/Tree & Graph/Graph/Topological sort DFS",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Tree & Graph/Graph/Topological sort DFS.md",tags:[],version:"current",frontMatter:{"date created":"Sunday, July 31st 2022, 4:35:16 pm","date modified":"Sunday, July 31st 2022, 8:42:04 pm",title:"Topological Sort DFS"},sidebar:"tutorialSidebar",previous:{title:"Topological Sort Kahns Algorithm",permalink:"/Obsidian-Docusaurus/docs/Algo/Tree & Graph/Graph/Topological Sort Kahns Algorithm"},next:{title:"Trie Data Structure",permalink:"/Obsidian-Docusaurus/docs/Algo/Tree & Graph/Tree/Trie data structure"}},p={},c=[{value:"Topological Ordering of a Tree",id:"topological-ordering-of-a-tree",level:2},{value:"Topological Sort Algorithm DFS Version",id:"topological-sort-algorithm-dfs-version",level:2}],s={toc:c},u="wrapper";function d(e){let{components:r,...t}=e;return(0,n.kt)(u,(0,o.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"topological-sort-dfs"},"Topological Sort DFS"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://youtu.be/eL-KzMXSXXI?list=PLDV1Zeh2NRsDGO4--qE8yH72HFL1Km93P"},"Video source")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("img",{parentName:"li",src:"https://i0.wp.com/algorithms.tutorialhorizon.com/files/2018/03/Topological-Sort.png?ssl=1",alt:null})),(0,n.kt)("li",{parentName:"ul"},"Topological sort algorithm can find a topological ordering in O(V+E)"),(0,n.kt)("li",{parentName:"ul"},"A graph with a cycle can not have a valid ordering",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"only works on as-cyclic directed graph/ no cycle"))),(0,n.kt)("li",{parentName:"ul"},"Topological sort is not unique, there can be multiple ordering."),(0,n.kt)("li",{parentName:"ul"},"Real world application",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Course scheduling"),(0,n.kt)("li",{parentName:"ul"},"Program dependencies think ",(0,n.kt)("inlineCode",{parentName:"li"},"npm")," libraries"),(0,n.kt)("li",{parentName:"ul"},"During program compilation")))),(0,n.kt)("h2",{id:"topological-ordering-of-a-tree"},"Topological Ordering of a Tree"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Ordering of a tree is basically a reverse BFS/level-search\u2026.starting from leaf nodes and going up.")),(0,n.kt)("h2",{id:"topological-sort-algorithm-dfs-version"},"Topological Sort Algorithm DFS Version"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Pick an un-visited node"),(0,n.kt)("li",{parentName:"ul"},"Do DFS on starting with node\u2026visit only un-visited nodes"),(0,n.kt)("li",{parentName:"ul"},"On the recursive callback of the DFS. add the current node to the topological ordering in reverse order.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def topsort(graph):\n\n    N = graph.numberOfNodes()\n    V = [False]*N\n    ordering = [0]*N\n    i = N - 1\n\n    for at in range(N):\n        if V[at] == False:\n            i = dfs(i, at, V, ordering, graph)\n\n    return ordering\n\ndef dfs(i, at, V, ordering, graph):\n    V[at] = True\n\n    edges = graph.getEdgesOf(at)\n\n    for edge in edges:\n        if V[edge.to] == False:\n            i = dfs(i, edge.to, V, ordering, graph)\n\n    ordering[i] = at\n    return i - 1\n")))}d.isMDXComponent=!0}}]);