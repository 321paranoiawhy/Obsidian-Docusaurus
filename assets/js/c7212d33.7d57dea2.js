"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6193],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(r),g=a,m=p["".concat(c,".").concat(g)]||p[g]||d[g]||i;return r?n.createElement(m,o(o({ref:t},u),{},{components:r})):n.createElement(m,o({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=g;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},3209:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const i={tags:["tree","union_find"],title:"1061 Lexicographically Smallest Equivalent String","date created":"Saturday, February 4th 2023, 11:32:46 am","date modified":"Saturday, February 4th 2023, 11:53:55 am"},o="1061 Lexicographically Smallest Equivalent String",l={unversionedId:"Algo/Coding Practice/Tree/1061 Lexicographically Smallest Equivalent String",id:"Algo/Coding Practice/Tree/1061 Lexicographically Smallest Equivalent String",title:"1061 Lexicographically Smallest Equivalent String",description:"Solution",source:"@site/docs/Algo/Coding Practice/Tree/1061 Lexicographically Smallest Equivalent String.md",sourceDirName:"Algo/Coding Practice/Tree",slug:"/Algo/Coding Practice/Tree/1061 Lexicographically Smallest Equivalent String",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Tree/1061 Lexicographically Smallest Equivalent String",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Coding Practice/Tree/1061 Lexicographically Smallest Equivalent String.md",tags:[{label:"tree",permalink:"/Obsidian-Docusaurus/docs/tags/tree"},{label:"union_find",permalink:"/Obsidian-Docusaurus/docs/tags/union-find"}],version:"current",frontMatter:{tags:["tree","union_find"],title:"1061 Lexicographically Smallest Equivalent String","date created":"Saturday, February 4th 2023, 11:32:46 am","date modified":"Saturday, February 4th 2023, 11:53:55 am"},sidebar:"tutorialSidebar",previous:{title:"101 Symmetric Tree.py",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Tree/101 Symmetric Tree.py"},next:{title:"212 Word Search II",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Tree/212 Word Search II"}},c={},s=[{value:"Solution",id:"solution",level:2}],u={toc:s},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1061-lexicographically-smallest-equivalent-string"},"1061 Lexicographically Smallest Equivalent String"),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Tree%20&%20Graph/Tree/Union%20find"},"Union find")),(0,a.kt)("li",{parentName:"ul"},"iterate over the two strings, we can use zip for this"),(0,a.kt)("li",{parentName:"ul"},"union the two strings, but when merging the parents, chose the smallest to be the parent."),(0,a.kt)("li",{parentName:"ul"},"finally based on the ",(0,a.kt)("inlineCode",{parentName:"li"},"basetStr"),", iterate over each string and find the parent for that, and that will be your answer.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def smallestEquivalentString(self, s1: str, s2: str, baseStr: str) -> str:\n        \n        Parent = {}\n\n        def findParent(x):\n            Parent.setdefault(x, x)\n            \n            root = x\n            while root != Parent[root]:\n                root = Parent[root]\n            \n            while x != Parent[x]:\n                Parent[x], x = root, Parent[x]\n\n            return root\n\n        \n        def union(x1, x2):\n            parentX1, parentX2 = findParent(x1), findParent(x2)\n\n            if parentX1 > parentX2:\n                Parent[parentX1] = parentX2\n            else:\n                Parent[parentX2] = parentX1\n\n        \n        for elt1, elt2 in zip(s1, s2):\n            union(elt1, elt2)\n\n        \n        res = []\n        for elt in baseStr:\n            res.append(findParent(elt))\n        \n        return "".join(res) \n')))}d.isMDXComponent=!0}}]);