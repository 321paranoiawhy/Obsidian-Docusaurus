"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7730],{3905:(e,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>m});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),s=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},d=function(e){var r=s(e.components);return n.createElement(l.Provider,{value:r},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(t),f=o,m=u["".concat(l,".").concat(f)]||u[f]||p[f]||a;return t?n.createElement(m,i(i({ref:r},d),{},{components:t})):n.createElement(m,i({ref:r},d))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7112:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var n=t(7462),o=(t(7294),t(3905));const a={"date created":"Thursday, August 18th 2022, 10:36:17 am","date modified":"Thursday, August 18th 2022, 10:44:06 am",title:"79 Word Search"},i="79 Word Search",c={unversionedId:"Algo/Coding Practice/Tree/79 Word search",id:"Algo/Coding Practice/Tree/79 Word search",title:"79 Word Search",description:"Solution",source:"@site/docs/Algo/Coding Practice/Tree/79 Word search.md",sourceDirName:"Algo/Coding Practice/Tree",slug:"/Algo/Coding Practice/Tree/79 Word search",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Tree/79 Word search",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Coding Practice/Tree/79 Word search.md",tags:[],version:"current",frontMatter:{"date created":"Thursday, August 18th 2022, 10:36:17 am","date modified":"Thursday, August 18th 2022, 10:44:06 am",title:"79 Word Search"},sidebar:"tutorialSidebar",previous:{title:"236 Lowest Common Ancestor of a Binary Tree",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Tree/236 Lowest Common Ancestor of a Binary Tree"},next:{title:"863 All Nodes Distance K in Binary Tree",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Tree/863 All Nodes Distance K in Binary Tree"}},l={},s=[{value:"Solution",id:"solution",level:2}],d={toc:s},u="wrapper";function p(e){let{components:r,...t}=e;return(0,o.kt)(u,(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"79-word-search"},"79 Word Search"),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Start from every entry in the matrix and check if it matches the first index of the word",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"If it is a match, we will DFS(search) starting from that entry"),(0,o.kt)("li",{parentName:"ul"},"we'll go up, down, left, and right, increasing the index"),(0,o.kt)("li",{parentName:"ul"},"keep ",(0,o.kt)("inlineCode",{parentName:"li"},"set")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"flag")," , to not",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"get into an in-finite loop"),(0,o.kt)("li",{parentName:"ul"},"revisit the same entry again")))))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"We're using ",(0,o.kt)("em",{parentName:"p"}," to flag entries we are visiting, if you encounter a ")," return false as it's a loop.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        R, C = len(board), len(board[0])\n        LENGTH = len(word)\n        \n        def dfs(r,c, index):\n            if (r < 0 or r >= R) or (c < 0 or c >= C):\n                return False\n            if board[r][c] != word[index] or board[r][c]=="*":\n                return False\n            if index >= LENGTH-1: \n                return True\n            \n            memo = board[r][c]\n            board[r][c] = "*"\n            res = dfs(r,c+1, index+1) or dfs(r+1, c, index+1) or dfs(r-1, c, index+1) or dfs(r,c-1,index+1)\n            board[r][c] = memo\n            return res\n        \n        for r in range(R):\n            for c in range(C):\n                if board[r][c] == word[0] and dfs(r,c,0):\n                        return True\n        return False\n')))}p.isMDXComponent=!0}}]);