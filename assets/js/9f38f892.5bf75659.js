"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7524],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>p});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),m=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},c=function(e){var a=m(e.components);return n.createElement(s.Provider,{value:a},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=m(t),d=r,p=u["".concat(s,".").concat(d)]||u[d]||g[d]||o;return t?n.createElement(p,i(i({ref:a},c),{},{components:t})):n.createElement(p,i({ref:a},c))}));function p(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=t[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5566:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var n=t(7462),r=(t(7294),t(3905));const o={"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, July 24th 2022, 3:44:17 pm",title:"What is an Image"},i="What is an Image",l={unversionedId:"Containerization/Docker/images",id:"Containerization/Docker/images",title:"What is an Image",description:"- Images are app binaries and dependencies with metadata about the image data and how to run the image",source:"@site/docs/Containerization/Docker/3. images.md",sourceDirName:"Containerization/Docker",slug:"/Containerization/Docker/images",permalink:"/obsidian/docs/Containerization/Docker/images",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Containerization/Docker/3. images.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, July 24th 2022, 3:44:17 pm",title:"What is an Image"},sidebar:"tutorialSidebar",previous:{title:"Parts of Dockerfile",permalink:"/obsidian/docs/Containerization/Docker/dockerfiles"},next:{title:"What is a Container",permalink:"/obsidian/docs/Containerization/Docker/containers"}},s={},m=[{value:"Pull Existing Image",id:"pull-existing-image",level:2},{value:"Example",id:"example",level:3},{value:"Build Your Own Image",id:"build-your-own-image",level:2},{value:"The Dockerfile is Not Named Dockerfile",id:"the-dockerfile-is-not-named-dockerfile",level:3},{value:"List Images We Have",id:"list-images-we-have",level:2},{value:"Remove an Image",id:"remove-an-image",level:2},{value:"Remove All Image",id:"remove-all-image",level:3},{value:"Push Image to Docker-hub",id:"push-image-to-docker-hub",level:2},{value:"Tagging a Container",id:"tagging-a-container",level:2},{value:"Create an Image with Tag",id:"create-an-image-with-tag",level:3},{value:"Give a Tag to Existing Image",id:"give-a-tag-to-existing-image",level:3},{value:"Joining Multiple Docker Images into One",id:"joining-multiple-docker-images-into-one",level:2}],c={toc:m},u="wrapper";function g(e){let{components:a,...t}=e;return(0,r.kt)(u,(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"what-is-an-image"},"What is an Image"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Images are app binaries and dependencies with metadata about the image data and how to run the image"),(0,r.kt)("li",{parentName:"ul"},"we can have image in two ways",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Pull an already made from docker-hub or"),(0,r.kt)("li",{parentName:"ol"},"Build our own")))),(0,r.kt)("h2",{id:"pull-existing-image"},"Pull Existing Image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull [image_name]\n")),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull NGINX\ndocker pull MONGODB\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Once we have our image we can run it ",(0,r.kt)("a",{parentName:"p",href:"/obsidian/docs/Containerization/Docker/containers"},"4. containers"))),(0,r.kt)("h2",{id:"build-your-own-image"},"Build Your Own Image"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Best to use docker-hub-username/project-name as your image name"),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"After creating a dockerfile run the following command [","[Containerization/Docker/2. dockerfiles]","]"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t tag_name path_to_docker_file\n# -t = tag followd by tag/name\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t zekaryas/hello_world .\n")),(0,r.kt)("h3",{id:"the-dockerfile-is-not-named-dockerfile"},"The Dockerfile is Not Named Dockerfile"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In the above command docker assumes there is a file called dockerfile in the path specified")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t awsome_project -f not_named_dockerfile .\n")),(0,r.kt)("h2",{id:"list-images-we-have"},"List Images We Have"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker image ls\n")),(0,r.kt)("h2",{id:"remove-an-image"},"Remove an Image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker image rm [image_name]\n")),(0,r.kt)("h3",{id:"remove-all-image"},"Remove All Image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker rmi $(docker images -a -q)\n")),(0,r.kt)("h2",{id:"push-image-to-docker-hub"},"Push Image to Docker-hub"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You might need to run ==docker login== for this to work")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker image push [image_name]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker image push zekaryas/hello-world\n")),(0,r.kt)("h2",{id:"tagging-a-container"},"Tagging a Container"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tag is an additional name/info we attach to an image to make it more meaningful"),(0,r.kt)("li",{parentName:"ul"},"The Docker tag command creates a new tag for an image."),(0,r.kt)("li",{parentName:"ul"},"It does not create a new image. The tag points to the same image and is just another way to reference the image.")),(0,r.kt)("h3",{id:"create-an-image-with-tag"},"Create an Image with Tag"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t zekaryas/hello_world .\n")),(0,r.kt)("h3",{id:"give-a-tag-to-existing-image"},"Give a Tag to Existing Image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull nginx  #we have image with tag: latest\n\ndocker image tag nginx zekaryas/nginx #we've the same image with a new tag name zekaryas/nginx\n\ndocker image tag nginx nginx:v1:12:12 #we've the same image with a new tag name nginx:v1:12:12\n\ndocker image tag prev_tag_name new_tag_name  #syntax\n\n")),(0,r.kt)("h2",{id:"joining-multiple-docker-images-into-one"},"Joining Multiple Docker Images into One"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If you have a project that requires multiple docker images you've two options",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"- Use docker-compose, but if docker-compose isn't allowed\u2026\n    - Start `From ubuntu` and install & setup the requires procedure\n    - Or use [docker-multi stage](https://docs.docker.com/develop/develop-images/multistage-build/) build where you can combine multiple images to run a project\n")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"The project could be a python project that also has a go code for some tasks\u2026"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/39626579/is-there-a-way-to-combine-docker-images-into-1-container"},"Source"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'FROM golang:1.7.3 as backend\nWORKDIR /backend\nRUN go get -d -v golang.org/x/net/html  \nCOPY app.go .\nRUN  #install some stuff, compile assets....\n    \nFROM golang:1.7.3 as assets\nWORKDIR /assets\nRUN ./getassets.sh\n\nFROM nodejs:latest as frontend \nRUN npm install\nWORKDIR /assets\nCOPY --from=assets /asets .\nCMD ["./app"] \n\nFROM alpine:latest as mergedassets\nWORKDIR /root/\nCOPY --from=frontend . /\nCOPY --from=backend ./backend .\nCMD ["./app"]\n')))}g.isMDXComponent=!0}}]);