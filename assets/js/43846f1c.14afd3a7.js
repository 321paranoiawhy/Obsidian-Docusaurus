"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4556],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},v=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),v=a,g=d["".concat(o,".").concat(v)]||d[v]||p[v]||l;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=v;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}v.displayName="MDXCreateElement"},1482:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const l={tags:["merge_intervals"],"date created":"Friday, August 5th 2022, 11:51:20 am","date modified":"Wednesday, August 10th 2022, 5:49:25 pm",title:"57 Insert Interval"},i="57 Insert Interval",s={unversionedId:"Algo/Coding Practice/Intervals/57 Insert Interval",id:"Algo/Coding Practice/Intervals/57 Insert Interval",title:"57 Insert Interval",description:"Solution",source:"@site/docs/Algo/Coding Practice/Intervals/57 Insert Interval.md",sourceDirName:"Algo/Coding Practice/Intervals",slug:"/Algo/Coding Practice/Intervals/57 Insert Interval",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Intervals/57 Insert Interval",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Coding Practice/Intervals/57 Insert Interval.md",tags:[{label:"merge_intervals",permalink:"/Obsidian-Docusaurus/docs/tags/merge-intervals"}],version:"current",frontMatter:{tags:["merge_intervals"],"date created":"Friday, August 5th 2022, 11:51:20 am","date modified":"Wednesday, August 10th 2022, 5:49:25 pm",title:"57 Insert Interval"},sidebar:"tutorialSidebar",previous:{title:"Merge K Sorted Lists",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Heap/Merge K Sorted Lists"},next:{title:"146. LRU Cache",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/LinkedList/LRU Cache"}},o={},c=[{value:"Solution",id:"solution",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"57-insert-interval"},"57 Insert Interval"),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Fundamental%20Algorithms/Misc/Intervals/Merge%20intervals"},"First read, Merge intervals")),(0,a.kt)("li",{parentName:"ul"},"First create a new list and add both intervals and the new intervals in sorted order."),(0,a.kt)("li",{parentName:"ul"},"Next run merge intervals ",(0,a.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Fundamental%20Algorithms/Misc/Intervals/Merge%20intervals"},"Merge intervals"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        if len(intervals) == 0:\n            return [newInterval]\n        \n        # add all elts in to new array in sorted order\n        new_intervals = []\n        once = True\n        for elt in intervals:\n            if newInterval[0] <= elt[0] and once:\n                once = False\n                new_intervals.append(newInterval)\n            new_intervals.append(elt)\n        \n        # the new interval can be the last elt\n        if once:\n            new_intervals.append(newInterval)\n        result = [new_intervals[0]]\n\n        # run merge interval\n        for i in range(1, len(new_intervals)):\n            elt = new_intervals[i]\n            last = result[-1]\n            if elt[0]>=last[0] and elt[0]<=last[1]:\n                result[-1][1] = max(elt[1], last[1])\n            else:\n                result.append(elt)\n        return result\n")))}p.isMDXComponent=!0}}]);