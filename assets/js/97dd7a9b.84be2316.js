"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1463],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=a,g=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7896:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Wednesday, August 24th 2022, 3:53:17 pm",title:"Bit Manipulation"},o="Bit Manipulation",l={unversionedId:"Algo/Fundamental Algorithms/Bit manipulation",id:"Algo/Fundamental Algorithms/Bit manipulation",title:"Bit Manipulation",description:"XOR Properties",source:"@site/docs/Algo/Fundamental Algorithms/Bit manipulation.md",sourceDirName:"Algo/Fundamental Algorithms",slug:"/Algo/Fundamental Algorithms/Bit manipulation",permalink:"/Obsidian-Docusaurus/docs/Algo/Fundamental Algorithms/Bit manipulation",draft:!1,editUrl:"https://github.com/321paranoiawhy/321paranoiawhy.github.io/blob/main/docs/Algo/Fundamental Algorithms/Bit manipulation.md",tags:[],version:"current",frontMatter:{"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Wednesday, August 24th 2022, 3:53:17 pm",title:"Bit Manipulation"},sidebar:"tutorialSidebar",previous:{title:"What is Algorithm Analysis",permalink:"/Obsidian-Docusaurus/docs/Algo/Fundamental Algorithms/Algorithm analysis"},next:{title:"Greedy Algorithms",permalink:"/Obsidian-Docusaurus/docs/Algo/Fundamental Algorithms/Greedy algorithms"}},p={},s=[{value:"XOR Properties",id:"xor-properties",level:2},{value:"Find Non Duplicate with XOR",id:"find-non-duplicate-with-xor",level:2},{value:"Looping in Bit World",id:"looping-in-bit-world",level:2}],u={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"bit-manipulation"},"Bit Manipulation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# a&b\n# Multiplication 1&1 = 1, 1&0 = 0, 0&0 = 0, 101 & 111 = 101\nprint(1&1)\n\n# a | b\n# Addition  1|1 = 11,   1|0 = 1,  0|0 = 0,  101 | 111  = 111  \nprint(1|1)\n\n# ~a\n# Negation(not)  ~1 = 0, ~0 =1,    ex: ~101 = 010  \nprint(~1)\n\n# a >> n  \n# Right shift a by n,  \n# Ex: 100101 >> 1 =  10010...same as saying remove the last n bit(s)  \nprint(100101 >> 1)\n\n# a << n  \n# Left shift by n,\n# Ex: 100101 << 1 = 00101..same as saying remove the first n bit(s)  \nprint(100101 << 1)\n")),(0,a.kt)("h2",{id:"xor-properties"},"XOR Properties"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# XOR properties:  \n# a ^ a = 0 => Same elements xored will result in zero  \n# a ^ 0 = a => Element xored with zero will result the element itself   \n")),(0,a.kt)("h2",{id:"find-non-duplicate-with-xor"},"Find Non Duplicate with XOR"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# a ^ b ^ a = b  \n# a ^ a is zero and zero ^ b is the element itself which is b \na = [4,4,7,4,4]\nres = 0\nfor elt in a:\n    res = res ^ elt\nprint(res)  # prints 7\n")),(0,a.kt)("h2",{id:"looping-in-bit-world"},"Looping in Bit World"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Standard code: how to loop bits")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"x = 10101\nwhile x:  #eventually x will be zero=false  \n  last_bit = x % 2  #or last_bit = x & 1\n  print(last_bit)\n  x = x >> 1  #or x = x << 1\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Tips and tricks"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-python"},"a = 12\nprint(a>>1) #-> equal to -> a / 2  \nprint(a<<1) #-> equal to -> a * 2  \n")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"")))}m.isMDXComponent=!0}}]);