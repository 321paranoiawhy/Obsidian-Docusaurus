"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5710],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>f});var a=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=a.createContext({}),c=function(e){var r=a.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=c(e.components);return a.createElement(s.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},m=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=n,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return t?a.createElement(f,o(o({ref:r},p),{},{components:t})):a.createElement(f,o({ref:r},p))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[d]="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6518:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(7462),n=(t(7294),t(3905));const i={title:"987 Vertical Order Traversal of a Binary Tree","date created":"Sunday, September 4th 2022, 1:02:47 pm","date modified":"Sunday, September 4th 2022, 1:13:22 pm"},o="987 Vertical Order Traversal of a Binary Tree",l={unversionedId:"Algo/Coding Practice/Tree/987 Vertical Order Traversal of a Binary Tree",id:"Algo/Coding Practice/Tree/987 Vertical Order Traversal of a Binary Tree",title:"987 Vertical Order Traversal of a Binary Tree",description:"Simpler Version",source:"@site/docs/Algo/Coding Practice/Tree/987 Vertical Order Traversal of a Binary Tree.md",sourceDirName:"Algo/Coding Practice/Tree",slug:"/Algo/Coding Practice/Tree/987 Vertical Order Traversal of a Binary Tree",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Tree/987 Vertical Order Traversal of a Binary Tree",draft:!1,editUrl:"https://github.com/321paranoiawhy/321paranoiawhy.github.io/blob/main/docs/Algo/Coding Practice/Tree/987 Vertical Order Traversal of a Binary Tree.md",tags:[],version:"current",frontMatter:{title:"987 Vertical Order Traversal of a Binary Tree","date created":"Sunday, September 4th 2022, 1:02:47 pm","date modified":"Sunday, September 4th 2022, 1:13:22 pm"},sidebar:"tutorialSidebar",previous:{title:"968 Binary Tree Cameras",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Tree/968 Binary Tree Cameras"},next:{title:"Check is a Tree is",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Tree/Check is a tree is"}},s={},c=[{value:"Simpler Version",id:"simpler-version",level:2},{value:"A More Challenging Version",id:"a-more-challenging-version",level:2}],p={toc:c},d="wrapper";function u(e){let{components:r,...t}=e;return(0,n.kt)(d,(0,a.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"987-vertical-order-traversal-of-a-binary-tree"},"987 Vertical Order Traversal of a Binary Tree"),(0,n.kt)("h2",{id:"simpler-version"},"Simpler Version"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("img",{parentName:"li",src:"https://i2.wp.com/rjp.b44.myftpupload.com/wp-content/uploads/2019/04/image-109.png?resize=286%2C360",alt:null})),(0,n.kt)("li",{parentName:"ul"},"Get vertical order traversal of a binary tree",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The trick is to start with 0 at the root",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"left will be last value -1"),(0,n.kt)("li",{parentName:"ul"},"right will be last value +1"))),(0,n.kt)("li",{parentName:"ul"},"use dictionary with list to store values based on index")))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"-1 -> [4,15]\n 0 -> [10,2,12]\n 1 -> [19, -2]\n")),(0,n.kt)("h2",{id:"a-more-challenging-version"},"A More Challenging Version"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/"},"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/")),(0,n.kt)("li",{parentName:"ul"},"The two key things to consider is",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"if two nodes are on the same level like ","[12, 2]",", store in sorted order ","[2,12]"),(0,n.kt)("li",{parentName:"ul"},"nodes should be stores in top down manner such as 4 should be stored before 15")))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \n        q = deque()\n        q.append([root, 0, 0])\n        result = defaultdict(list)\n        \n        while q:\n            node, x, y = q.popleft()\n            result[x].append((-y, node.val))\n            \n            if node.left:\n                q.append([node.left, x-1, y-1])\n            if node.right:\n                q.append([node.right, x+1, y-1])\n                \n        res = []\n        for _, nodes in sorted(result.items(), key=lambda item: item[0]):\n            res.append([val for _, val in sorted(nodes)])\n            \n        return res\n")))}u.isMDXComponent=!0}}]);