"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4647],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,g=u["".concat(c,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8234:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, July 3rd 2022, 11:33:19 am",title:"What is Backtracking"},o="What is Backtracking",l={unversionedId:"Algo/Fundamental Algorithms/Recursion/Backtracking",id:"Algo/Fundamental Algorithms/Recursion/Backtracking",title:"What is Backtracking",description:"- Backtracking is just another type of recursion where we try every possible options available\u2026brute force aka DFS approach",source:"@site/docs/Algo/Fundamental Algorithms/Recursion/Backtracking.md",sourceDirName:"Algo/Fundamental Algorithms/Recursion",slug:"/Algo/Fundamental Algorithms/Recursion/Backtracking",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Recursion/Backtracking",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Fundamental Algorithms/Recursion/Backtracking.md",tags:[],version:"current",frontMatter:{"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, July 3rd 2022, 11:33:19 am",title:"What is Backtracking"},sidebar:"tutorialSidebar",previous:{title:"What is Recursion",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Recursion/"},next:{title:"Dynamic Programming Template",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Recursion/Dynamic programming template"}},c={},s=[{value:"Backtracking Template",id:"backtracking-template",level:2},{value:"Example Using Backtracking Template",id:"example-using-backtracking-template",level:2}],p={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"what-is-backtracking"},"What is Backtracking"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Backtracking is just another type of recursion where we try every possible options available\u2026brute force aka DFS approach"),(0,r.kt)("li",{parentName:"ul"},"Memory can be used to achieve better performance making it DP programming.")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://scaler.com/topics/images/working-of-backtracking-algorithm",alt:null})),(0,r.kt)("h2",{id:"backtracking-template"},"Backtracking Template"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://youtu.be/H2gnD7Ixeao"},"Video Source "))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def is_valid_path(path):\n    #check if this is a valid solution\n    return True\n\ndef get_candidates(path):\n    # get the next possible candidate based on path\n    return []\n\ndef dfs(path, solutions):\n    if is_valid_path(path):\n        solutions.append(path.copy())\n        return\n\n    for candidate in get_candidate(path):\n        path.append(candidate)\n        dfs(path, solutions)\n        path.pop()\n\ndef solve():\n    solutions = []\n    path = []\n    dfs(path, solutions)\n    return solution\n")),(0,r.kt)("h2",{id:"example-using-backtracking-template"},"Example Using Backtracking Template"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def permute(nums):\n        def getPossibleCand(path):\n            toReturn = []\n            for elt in nums:\n                if elt not in path:\n                    toReturn.append(elt)\n            return toReturn\n    \n        def dfs(path, result):\n            if len(path) == len(nums):\n                result.append(list(path))\n                return\n            \n            for elt in getPossibleCand(path):\n                path.append(elt)\n                dfs(path,result)\n                path.pop()\n            \n        result = []\n        path = []\n        dfs(path, result)\n        print(result)\npermute([1,2,3]) \n# [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n")))}m.isMDXComponent=!0}}]);