"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8288],{3905:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>m});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=t.createContext({}),c=function(e){var n=t.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},u=function(e){var n=c(e.components);return t.createElement(o.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(a),h=r,m=p["".concat(o,".").concat(h)]||p[h]||d[h]||i;return a?t.createElement(m,l(l({ref:n},u),{},{components:a})):t.createElement(m,l({ref:n},u))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=h;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[p]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<i;c++)l[c]=a[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}h.displayName="MDXCreateElement"},7922:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var t=a(7462),r=(a(7294),a(3905));const i={"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, August 14th 2022, 4:10:31 pm",title:"PHP Crash Note"},l="PHP Crash Note",s={unversionedId:"Programming langs/PHP",id:"Programming langs/PHP",title:"PHP Crash Note",description:"Printing",source:"@site/docs/Programming langs/PHP.md",sourceDirName:"Programming langs",slug:"/Programming langs/PHP",permalink:"/Obsidian-Docusaurus/docs/Programming langs/PHP",draft:!1,editUrl:"https://github.com/321paranoiawhy/321paranoiawhy.github.io/blob/main/docs/Programming langs/PHP.md",tags:[],version:"current",frontMatter:{"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, August 14th 2022, 4:10:31 pm",title:"PHP Crash Note"},sidebar:"tutorialSidebar",previous:{title:"You Should Know JavaScript",permalink:"/Obsidian-Docusaurus/docs/Programming langs/JavaScript/You Should Know JavaScript"},next:{title:"Best Practices",permalink:"/Obsidian-Docusaurus/docs/Programming langs/TypeScript/Best practices"}},o={},c=[{value:"Printing",id:"printing",level:2},{value:"Variables",id:"variables",level:2},{value:"Print Datatype of Variable",id:"print-datatype-of-variable",level:3},{value:"Available Data-types",id:"available-data-types",level:4},{value:"Delete a Variable",id:"delete-a-variable",level:3},{value:"Check if Variable is Unset or Undefined",id:"check-if-variable-is-unset-or-undefined",level:4},{value:"Constant Variable",id:"constant-variable",level:3},{value:"Control Flows",id:"control-flows",level:2},{value:"== Vs ===",id:"-vs-",level:3},{value:"If/else",id:"ifelse",level:3},{value:"Switch",id:"switch",level:3},{value:"While",id:"while",level:3},{value:"For",id:"for",level:3},{value:"Foreach",id:"foreach",level:3},{value:"Data Structures",id:"data-structures",level:2},{value:"Strings",id:"strings",level:3},{value:"Array",id:"array",level:3},{value:"Hashmap {associative array}",id:"hashmap-associative-array",level:3},{value:"Functions",id:"functions",level:2},{value:"Define Function",id:"define-function",level:3},{value:"Function with Arguments",id:"function-with-arguments",level:3},{value:"Anonymous Functions",id:"anonymous-functions",level:3},{value:"Variable Arguments var_args",id:"variable-arguments-var_args",level:3},{value:"OOP",id:"oop",level:2},{value:"Define Classes",id:"define-classes",level:3},{value:"Objects",id:"objects",level:3},{value:"Constructor and Destructor",id:"constructor-and-destructor",level:3},{value:"Access Modifiers",id:"access-modifiers",level:3},{value:"Inheritance",id:"inheritance",level:3},{value:"Static Modifier",id:"static-modifier",level:3},{value:"Interfaces",id:"interfaces",level:3},{value:"Abstract",id:"abstract",level:3},{value:"Namespace, Typed-PHP\u2026",id:"namespace-typed-php",level:3}],u={toc:c},p="wrapper";function d(e){let{components:n,...a}=e;return(0,r.kt)(p,(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"php-crash-note"},"PHP Crash Note"),(0,r.kt)("h2",{id:"printing"},"Printing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'echo "This is php";\n\nprint("This is PHP");\n')),(0,r.kt)("h2",{id:"variables"},"Variables"),(0,r.kt)("p",null,"mind the dollar sign ($)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$text = "hello world";\n$n = 5;\n$y = 10.5;\n$z = true;\n\necho $n;\n')),(0,r.kt)("h3",{id:"print-datatype-of-variable"},"Print Datatype of Variable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"var_dump($n) // prints int(5)\n")),(0,r.kt)("h4",{id:"available-data-types"},"Available Data-types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"Integer, Float, String, Booleans, Array, Object, resource and NULL\n")),(0,r.kt)("h3",{id:"delete-a-variable"},"Delete a Variable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"unset($z)\n")),(0,r.kt)("h4",{id:"check-if-variable-is-unset-or-undefined"},"Check if Variable is Unset or Undefined"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'if(!isset($z)){\n    echo "we need var z";\n}\n')),(0,r.kt)("h3",{id:"constant-variable"},"Constant Variable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'define("PI", 3.14);\necho PI;\n')),(0,r.kt)("h2",{id:"control-flows"},"Control Flows"),(0,r.kt)("h3",{id:"-vs-"},"== Vs ==="),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"// == checks value sequality\n// === checks value and data type\n$a = 0;\n$b = '0';\n\nassert($a == $b); //prints true\nassert($a === $b); //prints false\n")),(0,r.kt)("h3",{id:"ifelse"},"If/else"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'#&&/|| C syntax\nif(true && 14>12){\n    print("here")\n}else{\n    print("else")\n}\n')),(0,r.kt)("h3",{id:"switch"},"Switch"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"switch ($x) {\n    case '0':\n        print 'Switch does type coercion';\n        break; // You must include a break, or you will fall through\n               // to cases 'two' and 'three'\n    case 'two':\n    case 'three':\n        // Do something if $variable is either 'two' or 'three'\n        break;\n    default:\n        // Do something by default\n}\n")),(0,r.kt)("h3",{id:"while"},"While"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$i = 0;\nwhile ($i < 5) {\n    echo $i++;\n} // Prints "01234"\n')),(0,r.kt)("h3",{id:"for"},"For"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'for ($x = 0; $x < 10; $x++) {\n    echo $x;\n}// Prints "0123456789"\n')),(0,r.kt)("h3",{id:"foreach"},"Foreach"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$my_array = [1,2];\n\n// Foreach loops can iterate over arrays\nforeach ($my_array as $array) {\n    echo $array;\n} // Prints \"12\"\n\n$wheels = ['bicycle' => 2, 'car' => 4];\n\n// You can iterate over the keys as well as the values\nforeach ($wheels as $vehicle => $wheel_count) {\n    echo \"A $vehicle has $wheel_count wheels\";\n}\n#A bicycle has 2 wheels\n#A car has 4 wheels\n")),(0,r.kt)("h2",{id:"data-structures"},"Data Structures"),(0,r.kt)("h3",{id:"strings"},"Strings"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$country = "south africa";\n\nehco strlen($country);  //prints length of the string\n\necho strrev($country);  //returns reversesd string\n')),(0,r.kt)("h3",{id:"array"},"Array"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$my_array = [1,2,3,4]\necho $my_array;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$my_array[] = 5 // add new array\nunset($my_array[2]) // remove an array\ncount($my_array) //returns size of array\nsort($array) //sorts the array\n")),(0,r.kt)("h3",{id:"hashmap-associative-array"},"Hashmap {associative array}"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All arrays in PHP are associative arrays (hashmaps in some languages)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$associative = ['One' => 1, 'Two' => 2, 'Three' => 3];\n\necho $associative['One']; // prints 1\n\n$associative['Four'] = 4; //Add an element\n")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"define-function"},"Define Function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'// Define a function with "function":\nfunction my_function () {\n    return \'Hello\';\n}\necho my_function(); // => "Hello"\n')),(0,r.kt)("h3",{id:"function-with-arguments"},"Function with Arguments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function add ($x, $y = 1) { // $y is optional and defaults to 1\n    $result = $x + $y;\n    return $result;\n}\n\necho add(4); // => 5\necho add(4, 2); // => 6\n")),(0,r.kt)("h3",{id:"anonymous-functions"},"Anonymous Functions"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Function is an object you can store, return or use it as a normal variable.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$inc = function ($x) {\n    return $x + 1;\n};\n\necho $inc(2); // => 3\n")),(0,r.kt)("h3",{id:"variable-arguments-var_args"},"Variable Arguments var_args"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'function variable($word, ...$list) {\n    echo $word . " || ";\n    foreach ($list as $item) {\n        echo $item . \' | \';\n    }\n}\n\nvariable("Separate", "Hello", "World");\n//Separate || Hello | World |\n')),(0,r.kt)("h2",{id:"oop"},"OOP"),(0,r.kt)("h3",{id:"define-classes"},"Define Classes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"class\xa0Fruit {  \n\xa0\xa0// Properties  \n\xa0\xa0public\xa0$name;  \n\xa0\xa0public\xa0$color;  \n  \n\xa0\xa0// Methods  \n\xa0\xa0function\xa0set_name($name) {  \n\xa0\xa0\xa0\xa0$this->name = $name;  \n\xa0 }  \n\xa0\xa0function\xa0get_name() {  \n\xa0\xa0\xa0\xa0return\xa0$this->name;  \n\xa0 }  \n}  \n")),(0,r.kt)("h3",{id:"objects"},"Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$apple =\xa0new\xa0Fruit();  \n$banana =\xa0new\xa0Fruit();  \n$apple->set_name('Apple');  \n$banana->set_name('Banana');  \n  \necho\xa0$apple->get_name();  \necho\xa0$banana->get_name();\n\nvar_dump($apple\xa0instanceof\xa0Fruit);\n")),(0,r.kt)("h3",{id:"constructor-and-destructor"},"Constructor and Destructor"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class\xa0Fruit {  \n\xa0\xa0public\xa0$name;  \n\xa0\xa0public\xa0$color;  \n  \n\xa0\xa0function\xa0__construct($name) {  \n\xa0\xa0\xa0 $this->name = $name;  \n\xa0 }\n\n  function\xa0__destruct() {  \n\xa0\xa0\xa0\xa0echo\xa0"The fruit is going to heaven {$this->name}.";  \n\xa0 }\n\xa0\xa0function\xa0get_name() {  \n\xa0\xa0\xa0\xa0return\xa0$this->name;  \n\xa0 }  \n}  \n  \n$apple =\xa0new\xa0Fruit("Apple");  \necho\xa0$apple->get_name();\n')),(0,r.kt)("h3",{id:"access-modifiers"},"Access Modifiers"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"public"),(0,r.kt)("li",{parentName:"ol"},"private"),(0,r.kt)("li",{parentName:"ol"},"protected")),(0,r.kt)("h3",{id:"inheritance"},"Inheritance"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class Animal{\n    private $name;\n\n    public function __construct($name){\n        $this -> name = $name;\n    }\n\n    public function getName(){\n        return $this->name;\n    }\n}\n\nclass Dog extends Animal{\n    private $owner;\n\n    public function __construct($name, $owner){\n        parent::__construct($name);\n        $this->owner = $owner;\n    }\n\n    public function getOwner(){\n        return $this->owner;\n    }\n\n    //overriding\n    public function getName(){\n        return "Catch ".$this->name;\n    }\n}\n')),(0,r.kt)("h3",{id:"static-modifier"},"Static Modifier"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class Config{\n\n    public static $DB_NAME = "DB_Name";\n\n    public static function get_connection($host){\n        return $host."/".Config::$DB_NAME;\n    }\n\n}\n\necho Config::$DB_NAME;\necho Config::get_connection("localhost");\n\n')),(0,r.kt)("h3",{id:"interfaces"},"Interfaces"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'interface IEngine{\n\n    function start();\n        \n    function stop();\n        \n    function status();   \n}\n    \nclass CarEngine implements IEngine{\n    private $status = "Loading";\n      \n    function start(){\n        $this->status = "Running";\n    }\n        \n    function stop(){\n        $this->status = "Resting";\n    }       \n        \n     function status(){\n        return $this->status;\n    }\n      \n}   \n    \n$c = new CarEngine();\necho $c->status();  //loading\necho "\\n";\n$c->start();  //running\necho $c->status();\n')),(0,r.kt)("h3",{id:"abstract"},"Abstract"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'abstract class Car {  \n\xa0 public $name;  \n\xa0 public function __construct($name) {  \n\xa0\xa0\xa0 $this->name = $name;  \n\xa0 }  \n\xa0 abstract public function intro();  \n}  \n  \n// Child classes  \nclass Audi extends Car {  \n\xa0 public function intro() {  \n\xa0\xa0\xa0 return "Choose German quality! I\'m an $this->name!";  \n\xa0 }  \n}\n\n$audi = new Audi("Audi");  \necho $audi->intro();\n')),(0,r.kt)("h3",{id:"namespace-typed-php"},"Namespace, Typed-PHP\u2026"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To be included\u2026")))}d.isMDXComponent=!0}}]);