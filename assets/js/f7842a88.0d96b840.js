"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1771],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(r),m=a,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7007:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const i={"date created":"Saturday, August 20th 2022, 12:31:38 pm","date modified":"Friday, September 2nd 2022, 9:47:24 am",title:"78 Subsets"},o="78 Subsets",s={unversionedId:"Algo/Coding Practice/Array/78 Subsets",id:"Algo/Coding Practice/Array/78 Subsets",title:"78 Subsets",description:"Solution",source:"@site/docs/Algo/Coding Practice/Array/78 Subsets.md",sourceDirName:"Algo/Coding Practice/Array",slug:"/Algo/Coding Practice/Array/78 Subsets",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Array/78 Subsets",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Coding Practice/Array/78 Subsets.md",tags:[],version:"current",frontMatter:{"date created":"Saturday, August 20th 2022, 12:31:38 pm","date modified":"Friday, September 2nd 2022, 9:47:24 am",title:"78 Subsets"},sidebar:"tutorialSidebar",previous:{title:"560 Subarray Sum Equals K",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Array/560 Subarray Sum Equals K"},next:{title:"190 Reverse Bits",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Binary/190 Reverse Bits"}},l={},u=[{value:"Solution",id:"solution",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"78-subsets"},"78 Subsets"),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Two ways to do it",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"DFS, build a tree with all the elt's in the array and finally store the path into the result")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def dfs(index, path, result):\n    result.append(path[:])\n    if index == LENGTH:\n        return\n\n    for i in range(1, 3):\n        if (index + i) <= LENGTH:\n            path.append(arr[index+i])\n            dfs(index+i, path, result)\n            path.pop()\n\n\narr = [1,2,3]\nLENGTH = len(arr)-1\nresult = [[]]\nfor i in range(len(arr)):\n    dfs(i, [arr[i]], result)\n\nprint(result)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"BFS subset pattern")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Given a set of [1, 5, 3]\n\nStart with an empty set: [[]]\n- Add the first number (1) to all the existing subsets to create new subsets: [[], [1]];\n- Add the second number (5) to all the existing subsets: [[], [1], [5], [1,5]];\n- Add the third number (3) to all the existing subsets: [[], [1], [5], [1,5], [3], [1,3], [5,3], [1,5,3]].\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("img",{parentName:"li",src:"https://hackernoon.com/_next/image?url=https%3A%2F%2Fcdn.hackernoon.com%2Fimages%2FG9YRlqC9joZNTWsi1ul7tRkO6tv1-hemg3w8d.jpg&w=828&q=75",alt:"BFS subset pattern"}))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        result = [[]]\n        for i in range(len(nums)):\n            temp = [list(elt) for elt in result] #copy\n            [elt.append(nums[i]) for elt in temp] #add elt to copy\n            result = result + temp\n        return result\n")))}d.isMDXComponent=!0}}]);