"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1907],{3905:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>m});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),u=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},s=function(e){var r=u(e.components);return n.createElement(c.Provider,{value:r},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(t),f=o,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||a;return t?n.createElement(m,i(i({ref:r},s),{},{components:t})):n.createElement(m,i({ref:r},s))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=t[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},8754:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var n=t(7462),o=(t(7294),t(3905));const a={"date created":"Tuesday, July 26th 2022, 2:09:40 pm","date modified":"Tuesday, July 26th 2022, 2:18:25 pm",title:"Trie Data Structure"},i="Trie Data Structure",l={unversionedId:"Algo/Tree & Graph/Tree/Trie data structure",id:"Algo/Tree & Graph/Tree/Trie data structure",title:"Trie Data Structure",description:"- Video explanation",source:"@site/docs/Algo/Tree & Graph/Tree/Trie data structure.md",sourceDirName:"Algo/Tree & Graph/Tree",slug:"/Algo/Tree & Graph/Tree/Trie data structure",permalink:"/obsidian/docs/Algo/Tree & Graph/Tree/Trie data structure",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Tree & Graph/Tree/Trie data structure.md",tags:[],version:"current",frontMatter:{"date created":"Tuesday, July 26th 2022, 2:09:40 pm","date modified":"Tuesday, July 26th 2022, 2:18:25 pm",title:"Trie Data Structure"},sidebar:"tutorialSidebar",previous:{title:"Topological Sort DFS",permalink:"/obsidian/docs/Algo/Tree & Graph/Graph/Topological sort DFS"},next:{title:"Union Find",permalink:"/obsidian/docs/Algo/Tree & Graph/Tree/Union find"}},c={},u=[],s={toc:u},p="wrapper";function d(e){let{components:r,...t}=e;return(0,o.kt)(p,(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"trie-data-structure"},"Trie Data Structure"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://youtu.be/oobqoCJlHA0"},"Video explanation")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/implement-trie-prefix-tree/"},"Leetcode question")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("img",{parentName:"li",src:"https://miro.medium.com/max/1200/1*-K7LHR1JFGIP_4AuzJel4A.png",alt:null}))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def __init__(self):\n        self.children = {}\n        self.end = False\n\nclass Trie:\n\n    def __init__(self):\n        self.root = Node()\n        \n\n    def insert(self, word: str) -> None:\n        curr = self.root\n        \n        for w in word:\n            if w not in curr.children:\n                curr.children[w] = Node()\n            curr = curr.children[w]\n        curr.end = True\n        \n\n    def search(self, word: str) -> bool:\n        curr = self.root\n        \n        for w in word:\n            if w not in curr.children:\n                return False\n            curr = curr.children[w]\n        return curr.end\n        \n\n    def startsWith(self, prefix: str) -> bool:\n        curr = self.root\n        \n        for w in prefix:\n            if w not in curr.children:\n                return False\n            curr = curr.children[w]\n        return True\n")))}d.isMDXComponent=!0}}]);