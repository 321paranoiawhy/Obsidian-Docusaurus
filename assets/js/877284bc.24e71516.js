"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2676],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>f});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=t.createContext({}),d=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},c=function(e){var n=d(e.components);return t.createElement(p.Provider,{value:n},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=d(r),g=o,f=s["".concat(p,".").concat(g)]||s[g]||u[g]||i;return r?t.createElement(f,a(a({ref:n},c),{},{components:r})):t.createElement(f,a({ref:n},c))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=g;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[s]="string"==typeof e?e:o,a[1]=l;for(var d=2;d<i;d++)a[d]=r[d];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},9825:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var t=r(7462),o=(r(7294),r(3905));const i={tags:["graph","topological_sort"],"date created":"Monday, August 22nd 2022, 12:17:18 pm","date modified":"Monday, August 22nd 2022, 1:00:12 pm",title:"Alien Dictionary"},a="Alien Dictionary",l={unversionedId:"Algo/Coding Practice/Graph/Alien dictionary",id:"Algo/Coding Practice/Graph/Alien dictionary",title:"Alien Dictionary",description:"Solution",source:"@site/docs/Algo/Coding Practice/Graph/Alien dictionary.md",sourceDirName:"Algo/Coding Practice/Graph",slug:"/Algo/Coding Practice/Graph/Alien dictionary",permalink:"/obsidian/docs/Algo/Coding Practice/Graph/Alien dictionary",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Coding Practice/Graph/Alien dictionary.md",tags:[{label:"graph",permalink:"/obsidian/docs/tags/graph"},{label:"topological_sort",permalink:"/obsidian/docs/tags/topological-sort"}],version:"current",frontMatter:{tags:["graph","topological_sort"],"date created":"Monday, August 22nd 2022, 12:17:18 pm","date modified":"Monday, August 22nd 2022, 1:00:12 pm",title:"Alien Dictionary"},sidebar:"tutorialSidebar",previous:{title:"417 Pacific Atlantic Water Flow",permalink:"/obsidian/docs/Algo/Coding Practice/Graph/417 Pacific Atlantic Water Flow"},next:{title:"621. Task Scheduler",permalink:"/obsidian/docs/Algo/Coding Practice/Heap/Task Scheduler"}},p={},d=[{value:"Solution",id:"solution",level:2}],c={toc:d},s="wrapper";function u(e){let{components:n,...r}=e;return(0,o.kt)(s,(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"alien-dictionary"},"Alien Dictionary"),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.lintcode.com/problem/892/"},"Free on LintCode")),(0,o.kt)("li",{parentName:"ul"},"Think of how English alphabets are sorted")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ad\napp\napple\nmap\n\n#how did this sorting happened -> based on English alphabet\n- a is before m, so it is placed before m\n    - a -> m, {-> = before}\n- the first 3 has words, have the same beginning letter a \n    - we need to look for the next letters\n- d is before p, so it is placed before any other p\n    - d -> p\n- app and apple has same prefix {app}, difference {le}\n    - this tells us => p -> l\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This pattern creates an order, a is before m, d is before p and p is before l",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"This pattern is related to topological sort"))),(0,o.kt)("li",{parentName:"ul"},"We can use ",(0,o.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Tree%20&%20Graph/Graph/Topological%20Sort%20Kahns%20Algorithm"},"Topological Sort Kahns Algorithm"),", to find this ordering, which is our answer"),(0,o.kt)("li",{parentName:"ul"},"Steps:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Convert inputs to graph"),(0,o.kt)("li",{parentName:"ul"},"Find the in_degree"),(0,o.kt)("li",{parentName:"ul"},"Run ",(0,o.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Tree%20&%20Graph/Graph/Topological%20Sort%20Kahns%20Algorithm"},"Topological Sort Kahns Algorithm"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from typing import (\n    List,\n)\nfrom collections import defaultdict, deque\nclass Solution:\n    """\n    @param words: a list of words\n    @return: a string which is correct order\n    """\n    def alien_order(self, words: List[str]) -> str:\n        # Write your code here\n        graph = {}\n\n        for word in words:\n            for c in word:\n                if c not in graph:\n                    graph[c] = set()\n\n        for first, second in zip(words, words[1:]):\n            length = min(len(first), len(second))\n            for j in range(length):\n                u = first[j]\n                v = second[j]\n                if u != v:\n                    graph[u].add(v)\n                    break  # later characters\' order are meaningless\n                # first = \'ab\', second = \'a\' . invalid\n                if j == length - 1 and len(first) > len(second):\n                    graph.clear()\n                    return\n\n        \n        print(graph)\n        # calculate in_degree\n        in_degree = defaultdict(int)\n        for node in graph:\n            for edge in graph[node]:\n                in_degree[edge] += 1\n        \n        print(in_degree)\n\n        #store elts with 0 incoming edges\n        queue = deque()\n        for node in graph:\n            if in_degree[node] == 0:\n                queue.append(node)\n        \n        order = []\n        while queue:\n            n = queue.pop()\n            order.append(n)\n\n            for edge in graph[n]:\n                in_degree[edge] -= 1\n                if in_degree[edge] == 0:\n                    queue.append(edge)\n                    \n        return "".join(order)\n')))}u.isMDXComponent=!0}}]);