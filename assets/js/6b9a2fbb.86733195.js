"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[669],{3905:(e,r,n)=>{n.d(r,{Zo:()=>s,kt:()=>h});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=t.createContext({}),l=function(e){var r=t.useContext(d),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},s=function(e){var r=l(e.components);return t.createElement(d.Provider,{value:r},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=l(n),f=o,h=u["".concat(d,".").concat(f)]||u[f]||p[f]||a;return n?t.createElement(h,i(i({ref:r},s),{},{components:n})):t.createElement(h,i({ref:r},s))}));function h(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var c={};for(var d in r)hasOwnProperty.call(r,d)&&(c[d]=r[d]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2395:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var t=n(7462),o=(n(7294),n(3905));const a={"date created":"Friday, August 19th 2022, 9:43:35 am","date modified":"Friday, August 19th 2022, 10:02:21 am",title:"212 Word Search II"},i="212 Word Search II",c={unversionedId:"Algo/Coding Practice/Tree/212 Word Search II",id:"Algo/Coding Practice/Tree/212 Word Search II",title:"212 Word Search II",description:"Solution",source:"@site/docs/Algo/Coding Practice/Tree/212 Word Search II.md",sourceDirName:"Algo/Coding Practice/Tree",slug:"/Algo/Coding Practice/Tree/212 Word Search II",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Tree/212 Word Search II",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Coding Practice/Tree/212 Word Search II.md",tags:[],version:"current",frontMatter:{"date created":"Friday, August 19th 2022, 9:43:35 am","date modified":"Friday, August 19th 2022, 10:02:21 am",title:"212 Word Search II"},sidebar:"tutorialSidebar",previous:{title:"1061 Lexicographically Smallest Equivalent String",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Tree/1061 Lexicographically Smallest Equivalent String"},next:{title:"222 Count Complete Tree Nodes",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Tree/222 Count Complete Tree Nodes"}},d={},l=[{value:"Solution",id:"solution",level:2}],s={toc:l},u="wrapper";function p(e){let{components:r,...n}=e;return(0,o.kt)(u,(0,t.Z)({},s,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"212-word-search-ii"},"212 Word Search II"),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Similar to ",(0,o.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Coding%20Practice/Tree/79%20Word%20search"},"79 Word search")),(0,o.kt)("li",{parentName:"ul"},"For ",(0,o.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Coding%20Practice/Tree/79%20Word%20search"},"79 Word search")," we had one word, so using index to check if the path is a match was simple, however we now have multiple words",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"which can be very similar or different words, consider the following word_set")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'word_set = [\n    "app",\n    "apps",\n    "apple",\n    "appologize"\n]\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"It is clear to see using index will not quite work here, better approach would be trie(prefix tree) ",(0,o.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Tree%20&%20Graph/Tree/Trie%20data%20structure"},"Trie data structure"),", with Trie we can",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"build the word set and look up if a word or a prefix exists efficiently")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def __init__(self):\n        self.children = {}\n        self.end = False\n\nclass Trie:\n    def __init__(self):\n        self.root = Node()\n        \n    def add(self, word):\n        curr = self.root\n        \n        for w in word:\n            if w not in curr.children:\n                curr.children[w] = Node()\n            curr = curr.children[w]\n        curr.end = True\n\n    #we're running search and start_with along with dfs\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n\n        #build the triee with words\n        trie = Trie()\n        for word in words:\n            trie.add(word)\n            \n        R,C = len(board), len(board[0])\n        res = set()\n        \n        def dfs(r,c,node,word):\n            if r<0 or r >= R or c<0 or c>=C:\n                return\n            \n            char = board[r][c]\n            if char not in node.children:\n                return\n            if char == "*":\n                return \n            \n            \n            board[r][c] = "*"\n            node = node.children[char]\n            word += char\n            if node.end:  #we found a word\n                res.add(word)\n                \n            \n            dfs(r-1,c,node, word)\n            dfs(r+1,c,node, word)\n            dfs(r,c+1,node, word)\n            dfs(r,c-1,node, word)\n            \n            board[r][c] = char\n        \n        for r in range(R):\n            for c in range(C):\n                dfs(r,c,trie.root,"")\n                \n        return list(res)\n')))}p.isMDXComponent=!0}}]);