"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2565],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(t),f=i,d=u["".concat(l,".").concat(f)]||u[f]||c[f]||o;return t?r.createElement(d,a(a({ref:n},m),{},{components:t})):r.createElement(d,a({ref:n},m))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5840:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=t(7462),i=(t(7294),t(3905));const o={"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, July 3rd 2022, 11:06:46 am",title:"Inspiring Math Algos"},a="Inspiring Math Algos",s={unversionedId:"Algo/Python Tips & Tricks/Inspiring Math algos",id:"Algo/Python Tips & Tricks/Inspiring Math algos",title:"Inspiring Math Algos",description:"The Sieve of Eratosthenes",source:"@site/docs/Algo/Python Tips & Tricks/Inspiring Math algos.md",sourceDirName:"Algo/Python Tips & Tricks",slug:"/Algo/Python Tips & Tricks/Inspiring Math algos",permalink:"/obsidian/docs/Algo/Python Tips & Tricks/Inspiring Math algos",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Python Tips & Tricks/Inspiring Math algos.md",tags:[],version:"current",frontMatter:{"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, July 3rd 2022, 11:06:46 am",title:"Inspiring Math Algos"},sidebar:"tutorialSidebar",previous:{title:"Infinity and -infinity in Python",permalink:"/obsidian/docs/Algo/Python Tips & Tricks/Infinity in python"},next:{title:"More Heapq",permalink:"/obsidian/docs/Algo/Python Tips & Tricks/More on heapq"}},l={},p=[{value:"The Sieve of Eratosthenes",id:"the-sieve-of-eratosthenes",level:2},{value:"Finding GCD(Greatest Common divisor) of Two Numbers",id:"finding-gcdgreatest-common-divisor-of-two-numbers",level:2}],m={toc:p},u="wrapper";function c(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"inspiring-math-algos"},"Inspiring Math Algos"),(0,i.kt)("h2",{id:"the-sieve-of-eratosthenes"},"The Sieve of Eratosthenes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The Sieve of Eratosthenes is a highly efficient way to generate a list of primes. It works by recognizing that all non-prime numbers are divisible by a prime number."),(0,i.kt)("li",{parentName:"ul"},"How it works",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"We start with a list of all the numbers up through some value max. First, we cross off all numbers divisible by 2"),(0,i.kt)("li",{parentName:"ul"},"Then, we look for the next prime (the next non-crossed off number) and cross off all numbers divisible by it. By crossing off all numbers divisible by 2, 3, 5, 7, 11, and so on,"),(0,i.kt)("li",{parentName:"ul"},"Finally we wind up with a list of prime numbers from 2 through max.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/python-program-for-sieve-of-eratosthenes"},"Code source"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def SieveOfEratosthenes(num):\n    prime = [True for i in range(num+1)]\n# boolean array\n    p = 2\n    while (p * p <= num):\n \n        # If prime[p] is not\n        # changed, then it is a prime\n        if (prime[p] == True):\n \n            # Updating all multiples of p\n            for i in range(p * p, num+1, p):\n                prime[i] = False\n        p += 1\n \n    # Print all prime numbers\n    for p in range(2, num+1):\n        if prime[p]:\n            print(p)\n \n \n# Driver code\nif __name__ == \'__main__\':\n    num = 50\n    print("Following are the prime numbers smaller"),\n    print("than or equal to", num)\n    SieveOfEratosthenes(num)\n')),(0,i.kt)("h2",{id:"finding-gcdgreatest-common-divisor-of-two-numbers"},"Finding GCD(Greatest Common divisor) of Two Numbers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"\ndef gcd(m,n):\n    if m == n:\n        return m\n    elif m > n:\n        return gcd(m-n,n)\n    else:\n        return gcd(m, n-m)\n\nprint(gcd(84,44))\n")))}c.isMDXComponent=!0}}]);