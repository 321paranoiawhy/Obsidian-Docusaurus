"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4521],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),h=u(n),d=a,m=h["".concat(s,".").concat(d)]||h[d]||p[d]||l;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[h]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9918:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const l={"date created":"Sunday, July 24th 2022, 11:02:23 pm","date modified":"Sunday, July 24th 2022, 11:02:37 pm",title:"Shebang (#!)"},o="Shebang (#!)",i={unversionedId:"Linux/Shebang",id:"Linux/Shebang",title:"Shebang (#!)",description:"!)",source:"@site/docs/Linux/Shebang.md",sourceDirName:"Linux",slug:"/Linux/Shebang",permalink:"/Obsidian-Docusaurus/docs/Linux/Shebang",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Linux/Shebang.md",tags:[],version:"current",frontMatter:{"date created":"Sunday, July 24th 2022, 11:02:23 pm","date modified":"Sunday, July 24th 2022, 11:02:37 pm",title:"Shebang (#!)"},sidebar:"tutorialSidebar",previous:{title:"Remote Connection",permalink:"/Obsidian-Docusaurus/docs/Linux/Remote connection"},next:{title:"From State of Js 2022",permalink:"/Obsidian-Docusaurus/docs/Programming langs/JavaScript/From state of js 2022"}},s={},u=[{value:"When to Use Env?",id:"when-to-use-env",level:2}],c={toc:u},h="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"shebang-"},"Shebang (#!)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The #! shebang is used to tell the kernel which interpreter should be used to run the commands present in the file."),(0,a.kt)("li",{parentName:"ul"},"Example: if we have a file with the following content inside")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash  \necho "Hello World!"\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The text after the shebang(#!) which is (/bin/bash) tells the kernel this file should be run with the command /bin/bash in front.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"./hello.sh  \n# the kernel actually will turn the above command as  \n/bin/bash ./hello.sh\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"#!/bin/cat  \nAll the contents of this file will be  \nprinted in the screen when it's executed \n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"./hello.sh  \n# the kernel will turn it into /bin/cat ./hello.sh  \n# the result will be the following output  \n#!/bin/cat  \nAll the contents of this file will be  \nprinted in the screen when it's executed\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For our script header we can first find path of the lang with ",(0,a.kt)("inlineCode",{parentName:"p"},"which program")," and add it on top of the script !#+result-of(which program)\nex: !#+result-of(which python)")),(0,a.kt)("h2",{id:"when-to-use-env"},"When to Use Env?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"When the interpreter is within the Linux system such as (cat, ls, bash\u2026) we can use the #!bin/Linux-command format, however, for user-installed interpreters such as (node, python\u2026) we need to use their environment variables")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"We can still use #!/path-to-node but that won\u2019t be portable to other machines as the path is dependent on where the user installed node.js.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"#!/usr/bin/env node  \nconsole.log('Hello World from NodeJS');  \n  \n# now we can run the application as  \n./hello.js  \n# the kernel will turn it into path-to-node ./hello.js\n")))}p.isMDXComponent=!0}}]);