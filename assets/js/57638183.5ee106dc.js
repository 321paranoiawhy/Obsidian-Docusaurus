"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2994],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,k=c["".concat(s,".").concat(d)]||c[d]||m[d]||o;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8695:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={title:"Best Practices","date created":"Sunday, October 2nd 2022, 4:31:59 pm","date modified":"Sunday, April 30th 2023, 2:18:03 pm"},i="Best Practices",l={unversionedId:"Frameworks/React/Best practices",id:"Frameworks/React/Best practices",title:"Best Practices",description:"Use Typescript",source:"@site/docs/Frameworks/React/Best practices.md",sourceDirName:"Frameworks/React",slug:"/Frameworks/React/Best practices",permalink:"/Obsidian-Docusaurus/docs/Frameworks/React/Best practices",draft:!1,editUrl:"https://github.com/321paranoiawhy/321paranoiawhy.github.io/blob/main/docs/Frameworks/React/Best practices.md",tags:[],version:"current",frontMatter:{title:"Best Practices","date created":"Sunday, October 2nd 2022, 4:31:59 pm","date modified":"Sunday, April 30th 2023, 2:18:03 pm"},sidebar:"tutorialSidebar",previous:{title:"1000. Authentication",permalink:"/Obsidian-Docusaurus/docs/Frameworks/Nextjs/Authentication"},next:{title:"Common Commands",permalink:"/Obsidian-Docusaurus/docs/Linux/Common Commands"}},s={},u=[{value:"Use Typescript",id:"use-typescript",level:2},{value:"State",id:"state",level:2},{value:"State Should Be Immutable",id:"state-should-be-immutable",level:3},{value:"Avoid Props in Initial States",id:"avoid-props-in-initial-states",level:3},{value:"Use Memoization",id:"use-memoization",level:2},{value:"React.memo : Memorize React Components",id:"reactmemo--memorize-react-components",level:3},{value:"useMemo : Memorize Function Result",id:"usememo--memorize-function-result",level:3},{value:"Other Useful Hooks &amp; Concepts",id:"other-useful-hooks--concepts",level:2},{value:"useRef",id:"useref",level:3},{value:"useContext",id:"usecontext",level:3},{value:"Avoid Inline Function Definition in the Render Function.",id:"avoid-inline-function-definition-in-the-render-function",level:2},{value:"Spreading Props on DOM Elements",id:"spreading-props-on-dom-elements",level:2},{value:"React Web Workers",id:"react-web-workers",level:2},{value:"Different Ways to Write CSS in React",id:"different-ways-to-write-css-in-react",level:2},{value:"Import Styles",id:"import-styles",level:3},{value:"Write Inline Styles",id:"write-inline-styles",level:3},{value:"Use CSS Modules",id:"use-css-modules",level:3}],p={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"best-practices"},"Best Practices"),(0,r.kt)("h2",{id:"use-typescript"},"Use Typescript"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/basic_type_example"},"How to add types to react"))),(0,r.kt)("h2",{id:"state"},"State"),(0,r.kt)("h3",{id:"state-should-be-immutable"},"State Should Be Immutable"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"React state should be treated as immutable. We should never mutate this.state directly, as calling setState() afterward may replace the mutation you made.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'addNewUser = () =>{\n   /**\n    *  OfCourse not correct way to insert\n    *  new user in user list\n    */\n   const users = this.state.users;\n   users.push({\n       userName: "robin",\n       email: "email@email.com"\n   });\n   setState({users: users});\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The concern here is that we are pushing new users onto the variable users, which is a reference to ",(0,r.kt)("inlineCode",{parentName:"li"},"this.state.users"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"//for array\naddNewUser = () => {\n   setState(state => ({\n     users: [...state.users, {newdata}]\n   }));\n};\n\n//for object\naddNewUser = () => {\n   setState(state => ({\n     users: {...state.users, age: newdata}\n   }));\n};\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/Obsidian-Docusaurus/docs/Programming%20langs/TypeScript/More%20on%20Typescript#Readonly"},"How to use Readonly to enforce state immutability"))),(0,r.kt)("h3",{id:"avoid-props-in-initial-states"},"Avoid Props in Initial States"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Don't initialize state with props which can be changed later. Instead, use props directly in the component.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"//before\nclass EditPanelComponent extends Component {\n    \n    constructor(props){\n        super(props);\n\n        this.state ={\n            isEditMode: false,\n            applyCoupon: props.applyCoupon\n        }\n    }\n\n    render(){\n        return <div>\n                    {this.state.applyCoupon && \n                    <>Enter Coupon: <Input/></>}\n               </div>\n    }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the props are changed without the refreshing the component,",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the new prop value will never be assigned to the state\u2019s ",(0,r.kt)("inlineCode",{parentName:"li"},"applyCoupon"),"."))),(0,r.kt)("li",{parentName:"ul"},"This is because the constructor function is only called when ",(0,r.kt)("inlineCode",{parentName:"li"},"EditPanelComponent")," is first created.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"//after\nclass EditPanelComponent extends Component {\n    \n    constructor(props){\n        super(props);\n\n        this.state ={\n            isEditMode: false\n        }\n    }\n\n    render(){\n        return <div>{this.props.applyCoupon && \n         <>Enter Coupon:<Input/></>}</div>\n    }\n} \n")),(0,r.kt)("h2",{id:"use-memoization"},"Use Memoization"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"There are three ways we can achieve memorization in react",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Pure-Component for memorizing Class-Based components",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"no discussed since class components are no longer recommended")))),(0,r.kt)("li",{parentName:"ul"},"React.memo for memorizing functional components",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"useCallback")," for memorizing function instance"))),(0,r.kt)("li",{parentName:"ul"},"useMemo for memorizing heavy functions result")))),(0,r.kt)("h3",{id:"reactmemo--memorize-react-components"},"React.memo : Memorize React Components"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Memo allows us to implement memorization in functional components"),(0,r.kt)("li",{parentName:"ul"},"It will only force the component to re-render if the props are changed.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const UserDetail = ({title, full_name, profile_img}) =>{\n\n    return (\n        <div className="user-detail-wrapper">\n            <img src={profile_img} />\n            <h4>{full_name}</h4>\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default React.memo(UserDetail);\n\n//usage in parent component\nreturn (\n    <>\n        <p>{counter}</p>\n        <UserDetail \n            title="Mr." \n            full_name="Zack" \n            profile_img="image.png"\n            />\n        //other components\n    </>\n);\n\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"in the above examples, ",(0,r.kt)("inlineCode",{parentName:"li"},"UserDetail")," will not re-render as long as it's props aren't changes even if the other components re-render, however React.memo has one limitation",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"it is unable to handle functional props, if we introduce callback functions to ",(0,r.kt)("inlineCode",{parentName:"li"},"userDetail")," component its behavior will change")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'//..prev code\n\n//usage in parent component\nconst updateProfile = () => {\n    //...\n}\nreturn (\n    <>\n        <p>{counter}</p>\n        <UserDetail \n            title="Mr." \n            full_name="Zack" \n            profile_img="image.png"\n            onUpdateClick={updateProfile}\n            />\n        //other components\n    </>\n);\n\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"based on the above new code, if you somehow we change ",(0,r.kt)("inlineCode",{parentName:"li"},"counter variable i.e using setCounter")," ",(0,r.kt)("inlineCode",{parentName:"li"},"UserDetail")," will ",(0,r.kt)("inlineCode",{parentName:"li"},"re-render")," even tough its props hasn't changed, how can we fix this",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"useCallback"),"\xa0is typically used to optimize the performance of child components that depend on a function prop."),(0,r.kt)("li",{parentName:"ul"},"By ",(0,r.kt)("inlineCode",{parentName:"li"},"memoizing")," the function using\xa0",(0,r.kt)("inlineCode",{parentName:"li"},"useCallback"),", we can prevent unnecessary re-renders of the child components that use the function, even if the function's dependencies change.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'//..prev Code\n//usage in parent component\n\nconst updateProfile = useCallback(() => {\n    //...\n}, []);\n\n// if we have a function with parameters\n// const updateProfile = useCallback((a,b) => {\n//  //...\n//}, [a,b]);\n\nreturn (\n    <>\n        <p>{counter}</p>\n        <UserDetail \n            title="Mr." \n            full_name="Zack" \n            profile_img="image.png"\n            onUpdateClick={updateProfile}\n            />\n        //other components\n    </>\n);\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You should always use React.memo LITERALLY, as comparing the tree returned by the Component is always more expensive than comparing a pair of props properties ","[Source]","(When should you NOT use React memo? - Stack Overflow](",(0,r.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/63405621)"},"https://stackoverflow.com/a/63405621)"))),(0,r.kt)("h3",{id:"usememo--memorize-function-result"},"useMemo : Memorize Function Result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const multiply = (x,y) => {\n  return x*y\n}\n\nconst cachedValue = useMemo(() => multiply(x, y), [x, y])\n\nreturn <p>{ cachedValue(12,12) }</p>\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The computed result is stored in the ",(0,r.kt)("inlineCode",{parentName:"li"},"cachedValue")," variable and ",(0,r.kt)("inlineCode",{parentName:"li"},"useMemo()")," Hook will return it each time unless the inputs are changed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("img",{parentName:"li",src:"https://pbs.twimg.com/media/DqaQy-7VAAEc-u5.jpg",alt:null}))),(0,r.kt)("h2",{id:"other-useful-hooks--concepts"},"Other Useful Hooks & Concepts"),(0,r.kt)("h3",{id:"useref"},"useRef"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It can be used to store a mutable value that does not cause a re-render when updated.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For states that shouldn't cause re-render"))),(0,r.kt)("li",{parentName:"ul"},"It can be used to access a DOM element directly."),(0,r.kt)("li",{parentName:"ul"},"value is stored inside current property, ",(0,r.kt)("inlineCode",{parentName:"li"},"{current: $value}"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function App() {\n  const [inputValue, setInputValue] = useState("");\n  const count = useRef(0);\n\n  useEffect(() => {\n    count.current = count.current + 1;\n  });\n\n  return (\n    <>\n      <h1>Render Count: {count.current}</h1>\n    </>\n  );\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In the above example, If we tried to count how many times our application renders using the useState Hook{inside the useEffect hook}, we would be caught in an infinite loop since this Hook itself causes a re-render.")),(0,r.kt)("h3",{id:"usecontext"},"useContext"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"what is react-context or ",(0,r.kt)("inlineCode",{parentName:"li"},"useContext")," ?",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"useContext")," is a hook in React that enables components to consume context values created by a parent component and passed down through the component tree."),(0,r.kt)("li",{parentName:"ul"},"It is an alternative to the prop drilling technique used to pass down data through several layers of components."))),(0,r.kt)("li",{parentName:"ul"},"How to use ",(0,r.kt)("inlineCode",{parentName:"li"},"useContext"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"create context"),(0,r.kt)("li",{parentName:"ul"},"provide the context at parent with modifier ",(0,r.kt)("inlineCode",{parentName:"li"},"Context.provide")),(0,r.kt)("li",{parentName:"ul"},"use the context in child components with ",(0,r.kt)("inlineCode",{parentName:"li"},"useContext"))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'//create the context\nimport React from "react";\nconst CountContext = React.createContext();\n\nexport default CountContext;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'//provide it at the parent\nimport React, { useState } from "react";\nimport Child from "./Child";\nimport CountContext from "./context";\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n\n  const countHandler = () => {\n    setCount(count + 1);\n  };\n\n  return (\n    <CountContext.Provider value={{ count, countHandler }}>\n      <Child />\n      <h2>{count}</h2>\n    </CountContext.Provider>\n  );\n};\n\nexport default App;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'//use it inside a child\nimport { useContext } from "react";\nimport CountContext from "./context";\n\nconst Child = () => {\n  const { countHandler } = useContext(CountContext);\n\n  return (\n    <div>\n      <button onClick={countHandler}>Increment</button>\n    </div>\n  );\n};\nexport default Child;\n')),(0,r.kt)("h2",{id:"avoid-inline-function-definition-in-the-render-function"},"Avoid Inline Function Definition in the Render Function."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Since functions are objects in JavaScript ",(0,r.kt)("inlineCode",{parentName:"li"},"({} !== {})"),", the inline function will always fail the prop diff when React does a diff check."),(0,r.kt)("li",{parentName:"ul"},"An arrow function will create a new instance of the function on each render if it's used in a JSX property.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This might create a lot of work for the garbage collector.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"//before\n<Comment onClick={(e)=> this.setState({elt: e})} comment={comment} key={comment.id}/>\n\n\n//after\nonCommentClick = (event) => {\n    this.setState({elt:event}) \n}\n\n<Comment onClick={this.onCommentClick} comment={comment} key={comment.id}/>\n")),(0,r.kt)("h2",{id:"spreading-props-on-dom-elements"},"Spreading Props on DOM Elements"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You should avoid spreading properties into a DOM element as it adds unknown HTML attribute, which is unnecessary and a bad practice.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"<div {...props}>\n    {props.text}\n</div>\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Instead of spreading props, you can set specific attributes:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"<div witdth={props.width} hight={props.hight}>\n    {props.text}\n</div>\n")),(0,r.kt)("h2",{id:"react-web-workers"},"React Web Workers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@shopify/react-web-worker"},"Popular react web worker library")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Programming%20langs/JavaScript/You%20Should%20Know%20JavaScript#Web%20Worker"},"Web Worker"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import React, {useEffect} from 'react';\nimport {Page} from '@shopify/polaris';\nimport {createWorkerFactory, useWorker} from '@shopify/react-web-worker';\n\n// assume ./worker.ts contains\n// export function hello(name) {\n//  return `Hello, ${name}`;\n// }\n\nconst createWorker = createWorkerFactory(() => import('./worker'));\n\nfunction Home() {\n  const worker = useWorker(createWorker);\n  const [message, setMessage] = React.useState(null);\n\n  useEffect(() => {\n    (async () => {\n      // Note: in your actual app code, make sure to check if Home\n      // is still mounted before setting state asynchronously!\n      const webWorkerMessage = await worker.hello('Tobi');\n      setMessage(webWorkerMessage);\n    })();\n  }, [worker]);\n\n  return <Page title=\"Home\"> {message} </Page>;\n}\n")),(0,r.kt)("h2",{id:"different-ways-to-write-css-in-react"},"Different Ways to Write CSS in React"),(0,r.kt)("h3",{id:"import-styles"},"Import Styles"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import "./Components/css/App.css"; //imported styles\nfunction App() {\n  return (\n    <div className="main">\n    </div>\n  );\n}\nexport default App;\n')),(0,r.kt)("h3",{id:"write-inline-styles"},"Write Inline Styles"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<div className="main" style={{color:"red"}}>\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"or construct an object of styles")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function App() {\n  const styles = {\n    main: {\n      backgroundColor: "#f1f1f1",\n      width: "100%",\n    },\n    inputText: {\n      padding: "10px",\n      color: "red",\n    },\n  };\n  return (\n    <div className="main" style={styles.main}>\n      <input type="text" style={styles.inputText}></input>\n    </div>\n  );\n}\nexport default App;\n')),(0,r.kt)("h3",{id:"use-css-modules"},"Use CSS Modules"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"CSS Modules allows us to use the same class name in multiple files without clashes since each class name is given a unique programmatic name."),(0,r.kt)("li",{parentName:"ul"},"This is especially useful in larger applications. Every class name is scoped locally to the specific component in which it is being imported."),(0,r.kt)("li",{parentName:"ul"},"rule",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"create a file ending with .module.css")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"/* styles.module.css */\n.font {\n  color: #f00;\n  font-size: 20px;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import styles from "./styles.module.css";\nfunction App() {\n  return (\n    <h1 className={styles.heading}>Hello World</h1>\n  );\n}\nexport default App;\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Other relevant methods",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"TailwindCSS"),(0,r.kt)("li",{parentName:"ul"},"Styled-components")))))}m.isMDXComponent=!0}}]);