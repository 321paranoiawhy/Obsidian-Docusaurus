"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[358],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>p});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(r),f=o,p=m["".concat(s,".").concat(f)]||m[f]||u[f]||a;return r?n.createElement(p,i(i({ref:t},d),{},{components:r})):n.createElement(p,i({ref:t},d))}));function p(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},1539:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={tags:["tree","dfs"],"date created":"Wednesday, August 3rd 2022, 9:11:12 pm","date modified":"Wednesday, August 10th 2022, 11:11:28 am",title:"236 Lowest Common Ancestor of a Binary Tree"},i="236 Lowest Common Ancestor of a Binary Tree",l={unversionedId:"Algo/Coding Practice/Tree/236 Lowest Common Ancestor of a Binary Tree",id:"Algo/Coding Practice/Tree/236 Lowest Common Ancestor of a Binary Tree",title:"236 Lowest Common Ancestor of a Binary Tree",description:"Solution",source:"@site/docs/Algo/Coding Practice/Tree/236 Lowest Common Ancestor of a Binary Tree.md",sourceDirName:"Algo/Coding Practice/Tree",slug:"/Algo/Coding Practice/Tree/236 Lowest Common Ancestor of a Binary Tree",permalink:"/obsidian/docs/Algo/Coding Practice/Tree/236 Lowest Common Ancestor of a Binary Tree",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Coding Practice/Tree/236 Lowest Common Ancestor of a Binary Tree.md",tags:[{label:"tree",permalink:"/obsidian/docs/tags/tree"},{label:"dfs",permalink:"/obsidian/docs/tags/dfs"}],version:"current",frontMatter:{tags:["tree","dfs"],"date created":"Wednesday, August 3rd 2022, 9:11:12 pm","date modified":"Wednesday, August 10th 2022, 11:11:28 am",title:"236 Lowest Common Ancestor of a Binary Tree"},sidebar:"tutorialSidebar",previous:{title:"222 Count Complete Tree Nodes",permalink:"/obsidian/docs/Algo/Coding Practice/Tree/222 Count Complete Tree Nodes"},next:{title:"79 Word Search",permalink:"/obsidian/docs/Algo/Coding Practice/Tree/79 Word search"}},s={},c=[{value:"Solution",id:"solution",level:2}],d={toc:c},m="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"236-lowest-common-ancestor-of-a-binary-tree"},"236 Lowest Common Ancestor of a Binary Tree"),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/"},"Source")),(0,o.kt)("li",{parentName:"ul"},"Traverse the tree in a depth first manner."),(0,o.kt)("li",{parentName:"ul"},"The moment you encounter either of the nodes\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"p"),"\xa0or\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"q"),", return some boolean flag."),(0,o.kt)("li",{parentName:"ul"},"The flag helps to determine if we found the required nodes in any of the paths."),(0,o.kt)("li",{parentName:"ul"},"The least common ancestor would then be the node for which both the sub-tree recursions return a\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"True"),"\xa0flag.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"It can also be the node which itself is one of\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"p"),"\xa0or\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"q"),"\xa0and for which one of the sub-tree recursions returns a\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"True"),"\xa0flag.")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        self.ans = None\n        def dfs(node):\n            if not node:\n                return False\n            \n            left = dfs(node.left)\n            right = dfs(node.right)\n            \n            mid = node == p or node == q\n            \n            if left+right+mid >= 2:\n                self.ans = node\n            \n            return left or right or mid\n        \n        dfs(root)\n        return self.ans\n")))}u.isMDXComponent=!0}}]);