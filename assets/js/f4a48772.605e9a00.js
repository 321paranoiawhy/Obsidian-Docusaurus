"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2699],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(r),g=o,d=p["".concat(l,".").concat(g)]||p[g]||m[g]||a;return r?n.createElement(d,i(i({ref:t},c),{},{components:r})):n.createElement(d,i({ref:t},c))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},8543:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const a={"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Thursday, June 16th 2022, 1:51:40 pm",title:"Insertion Sort"},i="Insertion Sort",s={unversionedId:"Algo/Fundamental Algorithms/Sorting algos/Insertion sort",id:"Algo/Fundamental Algorithms/Sorting algos/Insertion sort",title:"Insertion Sort",description:"- Insertion sort also know as shifting sort",source:"@site/docs/Algo/Fundamental Algorithms/Sorting algos/2. Insertion sort.md",sourceDirName:"Algo/Fundamental Algorithms/Sorting algos",slug:"/Algo/Fundamental Algorithms/Sorting algos/Insertion sort",permalink:"/Obsidian-Docusaurus/docs/Algo/Fundamental Algorithms/Sorting algos/Insertion sort",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Fundamental Algorithms/Sorting algos/2. Insertion sort.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Thursday, June 16th 2022, 1:51:40 pm",title:"Insertion Sort"},sidebar:"tutorialSidebar",previous:{title:"Selection Sort",permalink:"/Obsidian-Docusaurus/docs/Algo/Fundamental Algorithms/Sorting algos/Selection Sort"},next:{title:"Merge Sort",permalink:"/Obsidian-Docusaurus/docs/Algo/Fundamental Algorithms/Sorting algos/Merge Sort"}},l={},u=[],c={toc:u},p="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"insertion-sort"},"Insertion Sort"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Insertion sort also know as shifting sort"),(0,o.kt)("li",{parentName:"ul"},"Insertion-sort is an excellent algorithm for sorting small sequences (say, less than 50 elements)")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://media.geeksforgeeks.org/wp-content/uploads/insertion_sort-recursion.png",alt:null})),(0,o.kt)("p",null,"Also possible to use swap but a bit inefficient (multiple swap)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def SortWithInsertion(array):\n    for i in range(1, len(array)):\n        j = i\n        # THIS IS WORKING BCOZ INSERTION WORKS BY SHIFTING TO THE LEFT <-----\n        while j > 0 and array[j - 1] > array[j]:\n            array[j - 1], array[j] = array[j], array[j - 1]\n            j = j - 1\n    return array\n        \nprint(SortWithInsertion([7, 6, 5, 4, 3, 2, 1]))\n")))}m.isMDXComponent=!0}}]);