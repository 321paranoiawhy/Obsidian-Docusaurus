"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3974],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(r),f=i,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||a;return r?n.createElement(m,o(o({ref:t},u),{},{components:r})):n.createElement(m,o({ref:t},u))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:i,o[1]=c;for(var s=2;s<a;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},4551:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var n=r(7462),i=(r(7294),r(3905));const a={tags:["matrix","dfs","set","graph"],"date created":"Tuesday, August 23rd 2022, 12:12:16 pm","date modified":"Tuesday, August 23rd 2022, 12:21:31 pm",title:"417 Pacific Atlantic Water Flow"},o="417 Pacific Atlantic Water Flow",c={unversionedId:"Algo/Coding Practice/Graph/417 Pacific Atlantic Water Flow",id:"Algo/Coding Practice/Graph/417 Pacific Atlantic Water Flow",title:"417 Pacific Atlantic Water Flow",description:"Solution",source:"@site/docs/Algo/Coding Practice/Graph/417 Pacific Atlantic Water Flow.md",sourceDirName:"Algo/Coding Practice/Graph",slug:"/Algo/Coding Practice/Graph/417 Pacific Atlantic Water Flow",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Graph/417 Pacific Atlantic Water Flow",draft:!1,editUrl:"https://github.com/321paranoiawhy/321paranoiawhy.github.io/blob/main/docs/Algo/Coding Practice/Graph/417 Pacific Atlantic Water Flow.md",tags:[{label:"matrix",permalink:"/Obsidian-Docusaurus/docs/tags/matrix"},{label:"dfs",permalink:"/Obsidian-Docusaurus/docs/tags/dfs"},{label:"set",permalink:"/Obsidian-Docusaurus/docs/tags/set"},{label:"graph",permalink:"/Obsidian-Docusaurus/docs/tags/graph"}],version:"current",frontMatter:{tags:["matrix","dfs","set","graph"],"date created":"Tuesday, August 23rd 2022, 12:12:16 pm","date modified":"Tuesday, August 23rd 2022, 12:21:31 pm",title:"417 Pacific Atlantic Water Flow"},sidebar:"tutorialSidebar",previous:{title:"178 Graph Valid",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Graph/178 Graph Valid"},next:{title:"Alien Dictionary",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Graph/Alien dictionary"}},l={},s=[{value:"Solution",id:"solution",level:2}],u={toc:s},d="wrapper";function p(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"417-pacific-atlantic-water-flow"},"417 Pacific Atlantic Water Flow"),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Reverse thinking",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"instead of brute forcing if every node can reach the ocean, think if the ocean can reach the nodes"))),(0,i.kt)("li",{parentName:"ul"},"For every side do a ",(0,i.kt)("inlineCode",{parentName:"li"},"DFS"),", your check will be reverse of the given formula,",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"new formula = ",(0,i.kt)("inlineCode",{parentName:"li"},"prev < next")))),(0,i.kt)("li",{parentName:"ul"},"Use set to store both result and visited nodes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"We're going in four direction, so we need a method not run in infinite loop"))),(0,i.kt)("li",{parentName:"ul"},"Use set's ",(0,i.kt)("inlineCode",{parentName:"li"},"&")," method to quickly find nodes common to 2 or more sets",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Python%20Tips%20&%20Tricks/Sets%20-%20intersection,%20union%20and%20more"},"Sets - intersection, union and more"))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        ROW, COLUMN = len(heights), len(heights[0])\n        atlantic, pacific = set(), set()\n        \n        def dfs(r,c, visit, prev):\n            if r < 0 or r == ROW or c < 0 or c == COLUMN:\n                return\n            if prev > heights[r][c]:\n                return\n            if (r,c) in visit:\n                return\n            \n            visit.add((r,c))\n            dfs(r+1,c, visit, heights[r][c])\n            dfs(r-1,c, visit, heights[r][c])\n            dfs(r,c+1, visit, heights[r][c])\n            dfs(r,c-1, visit, heights[r][c])\n            \n        \n        for r in range(ROW):\n            dfs(r,0,pacific, heights[r][0])\n            dfs(r,COLUMN-1,atlantic, heights[r][COLUMN-1])\n            \n        for c in range(COLUMN):\n            dfs(0,c,pacific, heights[0][c])\n            dfs(ROW-1,c,atlantic, heights[ROW-1][c])\n        \n        return atlantic & pacific\n")))}p.isMDXComponent=!0}}]);