"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7509],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),s=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(m.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=a,g=p["".concat(m,".").concat(d)]||p[d]||c[d]||i;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8552:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, August 7th 2022, 1:18:00 pm",title:"What is Dynamic Programming"},o="What is Dynamic Programming",l={unversionedId:"Algo/Fundamental Algorithms/Recursion/Intro to Dynamic programming",id:"Algo/Fundamental Algorithms/Recursion/Intro to Dynamic programming",title:"What is Dynamic Programming",description:"Recursion + memory = Dynamic programming",source:"@site/docs/Algo/Fundamental Algorithms/Recursion/Intro to Dynamic programming.md",sourceDirName:"Algo/Fundamental Algorithms/Recursion",slug:"/Algo/Fundamental Algorithms/Recursion/Intro to Dynamic programming",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Recursion/Intro to Dynamic programming",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Fundamental Algorithms/Recursion/Intro to Dynamic programming.md",tags:[],version:"current",frontMatter:{"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, August 7th 2022, 1:18:00 pm",title:"What is Dynamic Programming"},sidebar:"tutorialSidebar",previous:{title:"Dynamic Programming Template",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Recursion/Dynamic programming template"},next:{title:"Binary Search",permalink:"/obsidian/docs/Algo/Fundamental Algorithms/Searching algos/Binary search"}},m={},s=[{value:"Bottom-up Vs Top-down DP",id:"bottom-up-vs-top-down-dp",level:2},{value:"DP Vs Greedy Algo",id:"dp-vs-greedy-algo",level:2},{value:"Tips for Dynamic Programming",id:"tips-for-dynamic-programming",level:2}],u={toc:s},p="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"what-is-dynamic-programming"},"What is Dynamic Programming"),(0,a.kt)("p",null,"Recursion + memory = Dynamic programming"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Dynamic programming is mostly just a matter of taking a recursive algorithm and finding the overlapping sub-problems (that is, the repeated calls)."),(0,a.kt)("li",{parentName:"ul"},"You then cache those results for future recursive calls.")),(0,a.kt)("h2",{id:"bottom-up-vs-top-down-dp"},"Bottom-up Vs Top-down DP"),(0,a.kt)("p",null,"There are two ways to implement a DP algorithm:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Bottom-up, also known as tabulation.  \ndef fibo(n):\n    arr = [0] * (n+1)\n    arr[0] = 0\n    arr[1] = 1\n    for i in range(2, n+1):\n        arr[i] = arr[i-1] + arr[i-2]\n    print(arr)\n    return arr[n]\nprint(fibo(5))\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Bottom-up, also known as tabulation.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Bottom-up is implemented with iteration and starts at the base cases."),(0,a.kt)("li",{parentName:"ul"},"A bottom-up implementation runtime is usually faster, as iteration does not have the overhead that recursion does.")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Top-down, also known as memorization.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Top-down is implemented with recursion and made efficient with memorization."),(0,a.kt)("li",{parentName:"ul"},"A top-down implementation is usually much easier to write. This is because with recursion, the ordering of sub-problems does not matter, whereas with tabulation, we need to go through a logical ordering of solving sub-problems.")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"#Top-down, also known as memorization.  \nmemo = {}\ndef fibo(n):\n    if n in [0,1]:\n        return n\n    if n not in memo:\n        memo[n] = fibo(n-1) + fibo(n-2)\n    return memo[n]\nprint(fibo(5))\n")),(0,a.kt)("h2",{id:"dp-vs-greedy-algo"},"DP Vs Greedy Algo"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If a problem is asking for the maximum/minimum/longest/shortest of something, the number of ways to do something, or if it is possible to reach a certain point, it is probably greedy or DP."),(0,a.kt)("li",{parentName:"ul"},"Thus, how do we know which algo to use",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},'The characteristic that is common in DP problems is that future "decisions" depend on earlier decisions.'),(0,a.kt)("li",{parentName:"ul"},"Deciding to do something at one step may affect the ability to do something in a later step."),(0,a.kt)("li",{parentName:"ul"},"This characteristic is what makes a greedy algorithm invalid for a DP problem - we need to factor in results from previous decisions."),(0,a.kt)("li",{parentName:"ul"},"with greedy at each step we decide the best value not caring about past decisions")))),(0,a.kt)("h2",{id:"tips-for-dynamic-programming"},"Tips for Dynamic Programming"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In recursive problems, the key to the problem is",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"To figure out the relationship between a base case and its sub-problems."))),(0,a.kt)("li",{parentName:"ul"},"Steps:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"First write the base case and the other some consequent sub cases",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Thinking top down with tree is also an alternative"))),(0,a.kt)("li",{parentName:"ul"},"Identity any relationship",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This is the key to the solution."))),(0,a.kt)("li",{parentName:"ul"},"If any repetitive step that can lead to memorization which = dynamic programming.")))))}c.isMDXComponent=!0}}]);