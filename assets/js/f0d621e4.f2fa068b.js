"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3459],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),h=r,d=m["".concat(s,".").concat(h)]||m[h]||c[h]||i;return n?a.createElement(d,o(o({ref:t},p),{},{components:n})):a.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2596:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={title:"621. Task Scheduler","date created":"Monday, November 7th 2022, 1:25:46 pm","date modified":"Saturday, November 12th 2022, 6:29:21 pm"},o="621. Task Scheduler",l={unversionedId:"Algo/Coding Practice/Heap/Task Scheduler",id:"Algo/Coding Practice/Heap/Task Scheduler",title:"621. Task Scheduler",description:"- somehow similar to Topological Sort Kahns Algorithm",source:"@site/docs/Algo/Coding Practice/Heap/621. Task Scheduler.md",sourceDirName:"Algo/Coding Practice/Heap",slug:"/Algo/Coding Practice/Heap/Task Scheduler",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Heap/Task Scheduler",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Coding Practice/Heap/621. Task Scheduler.md",tags:[],version:"current",sidebarPosition:621,frontMatter:{title:"621. Task Scheduler","date created":"Monday, November 7th 2022, 1:25:46 pm","date modified":"Saturday, November 12th 2022, 6:29:21 pm"},sidebar:"tutorialSidebar",previous:{title:"Alien Dictionary",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Graph/Alien dictionary"},next:{title:"23 Merge K Sorted List",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Heap/23 Merge k sorted list"}},s={},u=[{value:"Solution",id:"solution",level:2},{value:"Hash-map Version",id:"hash-map-version",level:3},{value:"Queue Version",id:"queue-version",level:3}],p={toc:u},m="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"621-task-scheduler"},"621. Task Scheduler"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"somehow similar to ",(0,r.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Tree%20&%20Graph/Graph/Topological%20Sort%20Kahns%20Algorithm"},"Topological Sort Kahns Algorithm")),(0,r.kt)("li",{parentName:"ul"},"key things to note",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"every task takes one unit of time"),(0,r.kt)("li",{parentName:"ul"},"the goal is to minimize the idle time"))),(0,r.kt)("li",{parentName:"ul"},"intuition",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"count the tasks we have in the list",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"ex: ",(0,r.kt)("inlineCode",{parentName:"li"},"A:3, B:2")))),(0,r.kt)("li",{parentName:"ul"},"be greedy and always process the maximum tasks first",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"for this we can use the ",(0,r.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Fundamental%20Algorithms/Linked%20List/Stack%20&%20Queue#Priority%20Queue%202%20%7B%20Heapq%20%7D"},"Priority Queue 2 { Heapq }")," data structure"))),(0,r.kt)("li",{parentName:"ul"},"the key thing is, after processing a task, when should you process it next?",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"let's say the current time is 1{just starting}, and the idle time is 2",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the answers is current time + idle time = 3 {when time is four}, ",(0,r.kt)("em",{parentName:"li"},"check the code below")))),(0,r.kt)("li",{parentName:"ul"},"to do this(",(0,r.kt)("em",{parentName:"li"},"pseudo code"),")",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"start processing from the heap, pop the max task"),(0,r.kt)("li",{parentName:"ul"},"after processing, if the number of tasks left isn't zero, schedule it for latter using either queue or hash-map, I will be using hash-map",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"store on the hash map, ",(0,r.kt)("inlineCode",{parentName:"li"},"map[current_time+idle_time].add(number of tasks left)")),(0,r.kt)("li",{parentName:"ul"},"number of tasks left = last number of tasks - 1"))),(0,r.kt)("li",{parentName:"ul"},"check is with the current time, whether there are tasks schedule",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"if yes add them to heap, and delete from hash-map"))),(0,r.kt)("li",{parentName:"ul"},"the program stops when there are no more tasks left in either heap or hash-map")))))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"n = 2\ntasks = A -> \ntime  = 1 ->\n\n#next time we can process task A is [n + t = 3]\ntasks = A -> B -> A\ntime  = 1 -> 2 -> 3\n")),(0,r.kt)("h2",{id:"solution"},"Solution"),(0,r.kt)("h3",{id:"hash-map-version"},"Hash-map Version"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        \n        counts = Counter(tasks)\n        \n        mh = [-count for count in counts.values()]\n        heapq.heapify(mh)\n        \n        memo = defaultdict(list)\n        time = 0\n        \n        while mh or memo:\n            time += 1\n            \n            if mh:\n                top = heapq.heappop(mh) + 1\n                if top != 0:\n                    memo[time+n].append(top)\n             \n            if time in memo:\n                for new in memo[time]:\n                    heapq.heappush(mh, new)\n                del memo[time]\n        return time\n            \n")),(0,r.kt)("h3",{id:"queue-version"},"Queue Version"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        \n        counts = Counter(tasks)\n        \n        mh = [-count for count in counts.values()]\n        heapq.heapify(mh)\n        \n        q = deque()\n        time = 0\n        \n        while mh or q:\n            time += 1\n            \n            if mh:\n                top = heapq.heappop(mh) + 1\n                if top != 0:\n                    q.append([time+n, top])\n                    \n            if q and q[0][0] == time:\n                _, value = q.popleft()\n                heapq.heappush(mh, value)\n        return time\n            \n")))}c.isMDXComponent=!0}}]);