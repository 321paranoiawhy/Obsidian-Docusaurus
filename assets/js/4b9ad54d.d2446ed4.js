"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5044],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(r),g=o,m=p["".concat(l,".").concat(g)]||p[g]||u[g]||i;return r?n.createElement(m,a(a({ref:t},d),{},{components:r})):n.createElement(m,a({ref:t},d))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},3750:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const i={"date created":"Wednesday, August 10th 2022, 6:04:10 pm","date modified":"Sunday, November 6th 2022, 5:28:49 pm",title:"23 Merge K Sorted List"},a="23 Merge K Sorted List",s={unversionedId:"Algo/Coding Practice/Heap/23 Merge k sorted list",id:"Algo/Coding Practice/Heap/23 Merge k sorted list",title:"23 Merge K Sorted List",description:"- First read Merge K Sorted Lists",source:"@site/docs/Algo/Coding Practice/Heap/23 Merge k sorted list.md",sourceDirName:"Algo/Coding Practice/Heap",slug:"/Algo/Coding Practice/Heap/23 Merge k sorted list",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Heap/23 Merge k sorted list",draft:!1,editUrl:"https://github.com/321paranoiawhy/321paranoiawhy.github.io/blob/main/docs/Algo/Coding Practice/Heap/23 Merge k sorted list.md",tags:[],version:"current",frontMatter:{"date created":"Wednesday, August 10th 2022, 6:04:10 pm","date modified":"Sunday, November 6th 2022, 5:28:49 pm",title:"23 Merge K Sorted List"},sidebar:"tutorialSidebar",previous:{title:"621. Task Scheduler",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Heap/Task Scheduler"},next:{title:"Merge K Sorted Lists",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Heap/Merge K Sorted Lists"}},l={},c=[],d={toc:c},p="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"23-merge-k-sorted-list"},"23 Merge K Sorted List"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Coding%20Practice/Heap/Merge%20K%20Sorted%20Lists"},"First read Merge K Sorted Lists"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"head = point = ListNode(0)\nq = PriorityQueue()\n\n#insert the first elt of each list\nfor l in lists:\n    if l:\n        q.put((l.val, l))\n        \nwhile not q.empty():\n    val, node = q.get()  #take out the smallest elt\n    point.next = ListNode(val)\n    point = point.next\n    node = node.next\n    if node:\n        q.put((node.val, node)) # insert the next elt from same list\nreturn head.next\n")))}u.isMDXComponent=!0}}]);