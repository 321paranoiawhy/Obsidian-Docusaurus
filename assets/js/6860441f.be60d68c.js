"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7617],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(r),p=o,f=d["".concat(u,".").concat(p)]||d[p]||m[p]||i;return r?n.createElement(f,a(a({ref:t},l),{},{components:r})):n.createElement(f,a({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=p;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5440:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const i={"date created":"Wednesday, August 24th 2022, 4:11:39 pm","date modified":"Wednesday, August 24th 2022, 4:15:23 pm",title:"191 Number of 1 Bits"},a="191 Number of 1 Bits",s={unversionedId:"Algo/Coding Practice/Binary/191 Number of 1 Bits",id:"Algo/Coding Practice/Binary/191 Number of 1 Bits",title:"191 Number of 1 Bits",description:"Solution",source:"@site/docs/Algo/Coding Practice/Binary/191 Number of 1 Bits.md",sourceDirName:"Algo/Coding Practice/Binary",slug:"/Algo/Coding Practice/Binary/191 Number of 1 Bits",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Binary/191 Number of 1 Bits",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Coding Practice/Binary/191 Number of 1 Bits.md",tags:[],version:"current",frontMatter:{"date created":"Wednesday, August 24th 2022, 4:11:39 pm","date modified":"Wednesday, August 24th 2022, 4:15:23 pm",title:"191 Number of 1 Bits"},sidebar:"tutorialSidebar",previous:{title:"190 Reverse Bits",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Binary/190 Reverse Bits"},next:{title:"1143 Longest Common Sub-sequence",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/DP/1143 Longest Common Subsequence"}},u={},c=[{value:"Solution",id:"solution",level:2}],l={toc:c},d="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"191-number-of-1-bits"},"191 Number of 1 Bits"),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Iterate through the bits and add the last bit to result ",(0,o.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Fundamental%20Algorithms/Bit%20manipulation"},"Bit manipulation"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def hammingWeight(self, n: int) -> int:\n        res = 0\n        while n:\n            last_bit = n & 1\n            res = res + last_bit\n            n = n >> 1\n        return res\n            \n")))}m.isMDXComponent=!0}}]);