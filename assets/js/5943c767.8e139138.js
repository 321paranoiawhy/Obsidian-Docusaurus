"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4512],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,k=c["".concat(i,".").concat(d)]||c[d]||m[d]||l;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<l;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2995:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const l={"date created":"Thursday, July 21st 2022, 8:54:35 pm","date modified":"Sunday, April 30th 2023, 2:26:44 pm",title:"You Should Know JavaScript"},o="You Should Know JavaScript",s={unversionedId:"Programming langs/JavaScript/You Should Know JavaScript",id:"Programming langs/JavaScript/You Should Know JavaScript",title:"You Should Know JavaScript",description:"JS Map and Set",source:"@site/docs/Programming langs/JavaScript/You Should Know JavaScript.md",sourceDirName:"Programming langs/JavaScript",slug:"/Programming langs/JavaScript/You Should Know JavaScript",permalink:"/obsidian/docs/Programming langs/JavaScript/You Should Know JavaScript",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Programming langs/JavaScript/You Should Know JavaScript.md",tags:[],version:"current",frontMatter:{"date created":"Thursday, July 21st 2022, 8:54:35 pm","date modified":"Sunday, April 30th 2023, 2:26:44 pm",title:"You Should Know JavaScript"},sidebar:"tutorialSidebar",previous:{title:"From State of Js 2022",permalink:"/obsidian/docs/Programming langs/JavaScript/From state of js 2022"},next:{title:"PHP Crash Note",permalink:"/obsidian/docs/Programming langs/PHP"}},i={},u=[{value:"JS Map and Set",id:"js-map-and-set",level:2},{value:"Map",id:"map",level:3},{value:"Map Vs Object",id:"map-vs-object",level:4},{value:"Iteration",id:"iteration",level:4},{value:"Set",id:"set",level:2},{value:"Iteration",id:"iteration-1",level:3},{value:"Higher Order Functions",id:"higher-order-functions",level:2},{value:"Filter",id:"filter",level:3},{value:"Map",id:"map-1",level:3},{value:"Foreach",id:"foreach",level:3},{value:"Reduce",id:"reduce",level:3},{value:"Find",id:"find",level:3},{value:"FindLast",id:"findlast",level:3},{value:"Every",id:"every",level:3},{value:"Some",id:"some",level:3},{value:"FindIndex",id:"findindex",level:3},{value:"FindLastIndex",id:"findlastindex",level:3},{value:"Data Manipulation Snippets for JS/React",id:"data-manipulation-snippets-for-jsreact",level:2},{value:"Named Export Vs Default Export in ES6/React",id:"named-export-vs-default-export-in-es6react",level:2},{value:"Named Export: (export)",id:"named-export-export",level:3},{value:"Default Export: (export default)",id:"default-export-export-default",level:3},{value:"Web Worker",id:"web-worker",level:2},{value:"Create a Web Worker",id:"create-a-web-worker",level:3},{value:"Send Message &amp; Responses",id:"send-message--responses",level:3},{value:"Receive Message &amp; Response",id:"receive-message--response",level:3},{value:"JS Sorting",id:"js-sorting",level:2},{value:"Slice Vs Splice",id:"slice-vs-splice",level:3},{value:"Slice",id:"slice",level:4},{value:"Splice",id:"splice",level:4},{value:"What is the Difference Between Var, Let, Const",id:"what-is-the-difference-between-var-let-const",level:2},{value:"What is Closure Ins JavaScript?",id:"what-is-closure-ins-javascript",level:2}],p={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"you-should-know-javascript"},"You Should Know JavaScript"),(0,r.kt)("h2",{id:"js-map-and-set"},"JS Map and Set"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://javascript.info/map-set"},"Source from JavaScript-info"))),(0,r.kt)("h3",{id:"map"},"Map"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Map is a collection of keyed data items, just like an Object. But the main difference is that Map allows keys of any type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Avoid using map","[key]","=value or map","[key]"," to set and get value from a map, instead use set and get methods"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-txt"},"new Map() \n    \u2013 creates the map.\nmap.set(key, value) \n    \u2013 stores the value by the key.\nmap.get(key) \n    \u2013 returns the value by the key, undefined if key doesn\u2019t exist in map.\nmap.has(key) \n    \u2013 returns true if the key exists, false otherwise.\nmap.delete(key) \n    \u2013 removes the element (the key/value pair) by the key.\nmap.clear() \n    \u2013 removes everything from the map.\nmap.size \n    \u2013 returns the current element count.\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let map = new Map();\n\nmap.set('1', 'str1');   // a string key\nmap.set(1, 'num1');     // a numeric key\nmap.set(true, 'bool1'); // a boolean key\n\n// remember the regular Object? it would convert keys to string\n// Map keeps the type, so these two are different:\nconsole.log(map.get(1)); // 'num1'\nconsole.log(map.get('1') ); // 'str1'\n\nconsole.log(map.size); // 3\n")),(0,r.kt)("h4",{id:"map-vs-object"},"Map Vs Object"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"for js object key must be string, otherwise it will be converted to string, however in map key can be anything(object, primitives)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const obj = {};\n\nobj[12] = 'number of columns';\nobj[{name: 'John'}] = 450;\n\nconsole.log(obj);  //{ '12': 'number of columns', '[object Object]': 450 }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const m = new Map();\n\nm.set(12, 'number of columns');\nm.set({name: 'John'}, 450);\n\nconsole.log(m);  //Map(2) { 12 => 'number of columns', { name: 'John' } => 450 }\n")),(0,r.kt)("h4",{id:"iteration"},"Iteration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const priceMap = new Map([\n    ['mac', 2400],\n    ['iphone', 1200],\n    ['samsung', 900]\n]); //map can be created with array\n\nfor (let brand of priceMap.keys()) {\n  console.log(brand, priceMap.get(brand));\n}\n\n\n//or\npriceMap.forEach((value,key, map) => {\n    console.log(key, value);\n})\n")),(0,r.kt)("h2",{id:"set"},"Set"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A Set is a special type collection \u2013 \u201cset of values\u201d (without keys), where each value may occur only once."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"like map key can be any js type(number, boolean, array, object\u2026)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-txt"},"new Set([iterable]) \n    \u2013 creates the set, and if an iterable object is provided (usually an array), copies values from it into the set.\n    \nset.add(value) \n    \u2013 adds a value, returns the set itself.\n    \nset.delete(value) \n    \u2013 removes the value, returns true if value existed at the moment of the call, otherwise false.\n    \nset.has(value) \n    \u2013 returns true if the value exists in the set, otherwise false.\n    \nset.clear() \n    \u2013 removes everything from the set.\n    \nset.size \n    \u2013 is the elements count.\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let set = new Set();\n\nlet john = { name: "John" };\nlet pete = { name: "Pete" };\nlet mary = { name: "Mary" };\n\n// visits, some users come multiple times\nset.add(john);\nset.add(pete);\n//set.add([1,2,34]);\nset.add(john);\nset.add(mary);\n\n// set keeps only unique values\nconsole.log( set.size ); // 3\n\nfor (let user of set) {\n  console.log(user); // John (then Pete and Mary)\n}\n')),(0,r.kt)("h3",{id:"iteration-1"},"Iteration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let set = new Set(["oranges", "apples", "bananas"]);\n\nfor (let value of set) console.log(value);\n\n// the same with forEach:\nset.forEach((value, valueAgain, set) => {\n  console.log(value);\n});\n')),(0,r.kt)("h2",{id:"higher-order-functions"},"Higher Order Functions"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A function which takes another function as an argument or returns a function is known as a higher order function.")),(0,r.kt)("h3",{id:"filter"},"Filter"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns a new array with any elements for which the callback function returns\xa0",(0,r.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];\n\nconst result = words.filter(word => word.length > 6);\n\nconsole.log(result);\n")),(0,r.kt)("h3",{id:"map-1"},"Map"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Creates a new array"),"\xa0populated with the results of calling a provided function on every element in the calling array."),(0,r.kt)("li",{parentName:"ul"},"The original array does not get altered")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const array1 = [1, 4, 9, 16];\n\n// pass a function to map\nconst map1 = array1.map(x => x * 2);\n\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n")),(0,r.kt)("h3",{id:"foreach"},"Foreach"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Executes a callback function on each of the elements in an array in order.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const numbers =\xa0[28, 77, 45, 99, 27];  \n  \nnumbers.forEach(number => {\xa0\xa0  \n\xa0\xa0console.log(number);  \n});\n")),(0,r.kt)("h3",{id:"reduce"},"Reduce"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Iterates through an array and returns a single value")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const arrayOfNumbers =\xa0[1, 2, 3, 4];  \n  \nconst sum =\xa0arrayOfNumbers.reduce((accumulator, currentValue) => {\xa0\xa0  \n\xa0\xa0return accumulator +\xa0currentValue;  \n});\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We can pass initial value")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const array1 = [1, 2, 3, 4];\n\n// 0 + 1 + 2 + 3 + 4\nconst initialValue = 0;\nconst sumWithInitial = array1.reduce(\n  (accumulator, currentValue) => accumulator + currentValue,\n  initialValue\n);\n\nconsole.log(sumWithInitial);\n// expected output: 10\n")),(0,r.kt)("h3",{id:"find"},"Find"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns the first element in the provided array that satisfies the provided testing function."),(0,r.kt)("li",{parentName:"ul"},"If no values satisfy the testing function,\xa0",(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined"},(0,r.kt)("inlineCode",{parentName:"a"},"undefined")),"\xa0is returned.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const array1 = [5, 12, 8, 130, 44];\n\nconst found = array1.find(element => element > 10);\n\nconsole.log(found);\n// expected output: 12\n")),(0,r.kt)("h3",{id:"findlast"},"FindLast"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns the value of the last element in an array that satisfies the provided testing function."),(0,r.kt)("li",{parentName:"ul"},"If no elements satisfy the testing function,\xa0",(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined"},(0,r.kt)("inlineCode",{parentName:"a"},"undefined")),"\xa0is returned.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const array1 = [5, 12, 50, 130, 44];\n\nconst found = array1.findLast((element) => element > 45);\n\nconsole.log(found);\n// expected output: 130\n")),(0,r.kt)("h3",{id:"every"},"Every"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The\xa0",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"every()")),"\xa0method tests whether all elements in the array pass the test implemented by the provided function."),(0,r.kt)("li",{parentName:"ul"},"It returns a Boolean value.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const array1 = [1, 30, 39, 29, 10, 13];\n\nconsole.log(array1.every(val => val < 40));\n// expected output: true\n")),(0,r.kt)("h3",{id:"some"},"Some"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The\xa0",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"some()")),"\xa0method tests whether at least one element in the array passes the test implemented by the provided function."),(0,r.kt)("li",{parentName:"ul"},"It returns a Boolean value.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const array = [1, 2, 3, 4, 5];\n\n// checks whether an element is even\nconst even = (element) => element % 2 === 0;\n\nconsole.log(array.some(even));\n// expected output: true\n")),(0,r.kt)("h3",{id:"findindex"},"FindIndex"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns the index of the first element in an array that satisfies the provided testing function."),(0,r.kt)("li",{parentName:"ul"},"If no elements satisfy the testing function, -1 is returned.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const array1 = [5, 12, 8, 130, 44];\n\nconst isLargeNumber = (element) => element > 13;\n\nconsole.log(array1.findIndex(isLargeNumber));\n// expected output: 3\n")),(0,r.kt)("h3",{id:"findlastindex"},"FindLastIndex"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Returns the index of the last element in an array that satisfies the provided testing function."),(0,r.kt)("li",{parentName:"ul"},"If no elements satisfy the testing function, -1 is returned.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const array1 = [5, 12, 50, 130, 44];\n\nconst isLargeNumber = (element) => element > 45;\n\nconsole.log(array1.findLastIndex(isLargeNumber));\n// expected output: 3  (of element with value: 30)\n")),(0,r.kt)("h2",{id:"data-manipulation-snippets-for-jsreact"},"Data Manipulation Snippets for JS/React"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let data = {\n    todos: []\n};\n//const [state, setState] = useState(data);\n\n//add\ndata = { todos: [...data.todos, newData] }\n//setState(data)\n\n//remove by id\ndata = { todos: data.todos.filter(todo => todo.id !== id) }\n\n//update by id\ndata = { todos: data.todos.map(todo => {\n    if(todo.id === id){\n        todo.status = 'updated';\n    }\n    return todo;\n}) };\n\n//add new entry\ndata = {...data, notes: []}\n")),(0,r.kt)("h2",{id:"named-export-vs-default-export-in-es6react"},"Named Export Vs Default Export in ES6/React"),(0,r.kt)("h3",{id:"named-export-export"},"Named Export: (export)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Can have multiple named exports per file."),(0,r.kt)("li",{parentName:"ul"},"You import the specific exports you want surrounded in braces"),(0,r.kt)("li",{parentName:"ul"},"The name of imported module has to be the same as the name of the exported module. Or you need to use ",(0,r.kt)("inlineCode",{parentName:"li"},"as"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// exports from ./MyComponent.js file  \nexport const MyComponent = () => {}  \nexport const MyComponent2 = () => {}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// imports  \n// ex. importing a single named export  \nimport { MyComponent } from "./MyComponent";// ex. importing multiple named exports  \nimport { MyComponent, MyComponent2 } from "./MyComponent";\n\nimport * as MainComponents from "./MyComponent";  \n// use MainComponents.MyComponent and MainComponents.MyComponent2 here\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// ex. giving a named import a different name by using "as":  \nimport { MyComponent2 as MyNewComponent } from "./MyComponent";\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Named exports are useful to export several values. During the import, one will be able to use the same name to refer to the corresponding value.")),(0,r.kt)("h3",{id:"default-export-export-default"},"Default Export: (export default)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"One can have only one default export per file."),(0,r.kt)("li",{parentName:"ul"},"When we import we have to specify a name.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const MyComponent = () => {}\nexport default MyComponent;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// import\nimport MyDefaultComponent from "./MyDefaultExport";\n')),(0,r.kt)("h2",{id:"web-worker"},"Web Worker"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers"},"Mozilla documentation")),(0,r.kt)("li",{parentName:"ul"},"Web Workers are a simple means for web content to run scripts in background threads. The worker thread can perform tasks without interfering with the user interface."),(0,r.kt)("li",{parentName:"ul"},"What you can and can't inside web workers",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"You can run whatever code you like inside the worker thread, with some exceptions.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For example, you can't directly manipulate the ",(0,r.kt)("inlineCode",{parentName:"li"},"DOM")," from inside a worker, or use some default methods and properties of the window object"))),(0,r.kt)("li",{parentName:"ul"},"You can use a large number of items available under window, including ",(0,r.kt)("inlineCode",{parentName:"li"},"WebSockets"),", and data storage mechanisms like ",(0,r.kt)("inlineCode",{parentName:"li"},"IndexedDB"),".")))),(0,r.kt)("h3",{id:"create-a-web-worker"},"Create a Web Worker"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const worker = new Worker('worker-file.js');\n")),(0,r.kt)("h3",{id:"send-message--responses"},"Send Message & Responses"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Both the client and server use ",(0,r.kt)("inlineCode",{parentName:"li"},"postMessage")," to send messages & responses to each other",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The client uses it to send request"),(0,r.kt)("li",{parentName:"ul"},"The server uses it to send response")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const worker = new Worker('worker-file.js');\nmyWorker.postMessage([first.value, second.value]);\n")),(0,r.kt)("h3",{id:"receive-message--response"},"Receive Message & Response"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Both client and server respond to messages via the ",(0,r.kt)("inlineCode",{parentName:"li"},"onmessage")," event handler",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The message is contained within the message event's data attribute."),(0,r.kt)("li",{parentName:"ul"},"The data is copied rather than shared.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"//webworker.js\n//receive message from server side\nonmessage = function(e) {\n  console.log('Worker: Message received from main script');\n  const result = e.data[0] * e.data[1];\n  if (isNaN(result)) {\n    postMessage('Please write two numbers');  //send the message to client\n  } else {\n    const workerResult = 'Result: ' + result;\n    console.log('Worker: Posting message back to main script');\n    postMessage(workerResult);  //send the message to client\n  }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const worker = new Worker('worker-file.js');\nmyWorker.postMessage([first.value, second.value]);\n\n//client can receive response with onmessage\nmyWorker.onmessage = function(e) {\n    result.textContent = e.data;\n    console.log('Message received from worker');\n}\n")),(0,r.kt)("h2",{id:"js-sorting"},"JS Sorting"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Sorting is in-place in JavaScript")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"sort linear array")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const array = [5,4,3,2,1];\narray.sort()\nconsole.log(array)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"sort objects by",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"string"),(0,r.kt)("li",{parentName:"ul"},"numeric value")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const array = [\n    {\n        id: 4,\n        name: "Zeku"\n    },\n    {\n        id: 1,\n        name: "Abel"\n    }\n]\n\n\n//sort by string value\narray.sort((a,b) => a.name.localeCompare(b.name));\nconsole.log(array)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const array = [\n    {\n        id: 4,\n        name: "Zeku"\n    },\n    {\n        id: 1,\n        name: "Abel"\n    }\n]\n\n\n//sort by numberic value\narray.sort((a,b) => a.id - b.id);\nconsole.log(array)\n')),(0,r.kt)("h3",{id:"slice-vs-splice"},"Slice Vs Splice"),(0,r.kt)("h4",{id:"slice"},"Slice"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"syntax => slice(start, end), end is not included")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"return portion of an array")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];\n\nconsole.log(animals.slice(0, 2));\n")),(0,r.kt)("h4",{id:"splice"},"Splice"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"syntax => splice(start_index, number_of_elts_to_remove, \u2026list_of_elts_to_add)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Remove elets with Splice")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let array = [1,2,3,4,5];\n\narray.splice(3, 1); //removes number 4\nconsole.log(array)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add elements with slice")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let array = [1,2,3,4,5];\n\narray.splice(3, 0, 'A', 'B', 'C'); //Add A,B,C\nconsole.log(array)\n")),(0,r.kt)("h2",{id:"what-is-the-difference-between-var-let-const"},"What is the Difference Between Var, Let, Const"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"There are 3 type of scopes",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"global"),(0,r.kt)("li",{parentName:"ul"},"local"),(0,r.kt)("li",{parentName:"ul"},"lexical scope or block scope")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Variables declared with var are either function-scoped or global-scoped, depending on whether they are declared within a function or outside a function. variables declared with either const or let are block scope")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"let & const",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"block scope {}"))),(0,r.kt)("li",{parentName:"ul"},"var",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"function scope or global scope"))),(0,r.kt)("li",{parentName:"ul"},"const",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"can not be re-initialized")))),(0,r.kt)("h2",{id:"what-is-closure-ins-javascript"},"What is Closure Ins JavaScript?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"},"Closures - JavaScript | MDN")),(0,r.kt)("li",{parentName:"ul"},"a closure gives you access to an outer function's scope from an inner function.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function makeFunc() {\n  var name = "Mozilla"; // name is a local variable created by init\n  return function displayName() {\n    // displayName() is the inner function, that forms the closure\n    console.log(name); // use variable declared in the parent function\n  }\n}\nconst res = makeFunc();\nres();\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Code explanation",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"In some programming languages, the local variables within a function exist for just the duration of that function's execution."),(0,r.kt)("li",{parentName:"ul"},"Once makeFunc() finishes executing, you might expect that the name variable would no longer be accessible. However, because the code still works as expected, this is obviously not the case in JavaScript.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function add(x) {\n  return function (y) {\n    return x + y;\n  };\n}\n\nconst res = add(14)(14) //res = 14\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Real world example of using closures",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#practical_closures"},"Closures - JavaScript | MDN"))))))}m.isMDXComponent=!0}}]);