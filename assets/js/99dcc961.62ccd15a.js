"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5905],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),s=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),f=a,g=c["".concat(d,".").concat(f)]||c[f]||p[f]||i;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8026:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={"date created":"Thursday, August 11th 2022, 10:27:00 am","date modified":"Sunday, August 14th 2022, 11:39:30 am",title:"863 All Nodes Distance K in Binary Tree"},o="863 All Nodes Distance K in Binary Tree",l={unversionedId:"Algo/Coding Practice/Tree/863 All Nodes Distance K in Binary Tree",id:"Algo/Coding Practice/Tree/863 All Nodes Distance K in Binary Tree",title:"863 All Nodes Distance K in Binary Tree",description:"Solution 1",source:"@site/docs/Algo/Coding Practice/Tree/863 All Nodes Distance K in Binary Tree.md",sourceDirName:"Algo/Coding Practice/Tree",slug:"/Algo/Coding Practice/Tree/863 All Nodes Distance K in Binary Tree",permalink:"/obsidian/docs/Algo/Coding Practice/Tree/863 All Nodes Distance K in Binary Tree",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Coding Practice/Tree/863 All Nodes Distance K in Binary Tree.md",tags:[],version:"current",frontMatter:{"date created":"Thursday, August 11th 2022, 10:27:00 am","date modified":"Sunday, August 14th 2022, 11:39:30 am",title:"863 All Nodes Distance K in Binary Tree"},sidebar:"tutorialSidebar",previous:{title:"79 Word Search",permalink:"/obsidian/docs/Algo/Coding Practice/Tree/79 Word search"},next:{title:"968 Binary Tree Cameras",permalink:"/obsidian/docs/Algo/Coding Practice/Tree/968 Binary Tree Cameras"}},d={},s=[{value:"Solution 1",id:"solution-1",level:2},{value:"Solution 2 {O(n)}",id:"solution-2-on",level:2}],u={toc:s},c="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"863-all-nodes-distance-k-in-binary-tree"},"863 All Nodes Distance K in Binary Tree"),(0,a.kt)("h2",{id:"solution-1"},"Solution 1"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Turn the tree into an undirected graph",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This can be done with any DFS"))),(0,a.kt)("li",{parentName:"ul"},"Once we have the graph do another tree traversal or DFS",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Start from the target and distance zero then Increase the distance +1 every-time you jump to node children"),(0,a.kt)("li",{parentName:"ul"},"==Using BFS as traversal is also possible=="))),(0,a.kt)("li",{parentName:"ul"},"Complexity",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Time \u2013 The algorithm is O(N) but since sorting the overall will be O(Nlogn)"),(0,a.kt)("li",{parentName:"ul"},"Space \u2013 O(N)")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def distanceK(self, root: TreeNode, target: TreeNode, radius: int) -> List[int]:\n        target = target.val\n        if radius == 0:\n            return [target]\n        graph = defaultdict(list)\n\n        # build a directed graph\n        def dfs(node):\n            if node:\n                dfs(node.left)\n\n                # directed graph is two ways    \n                if node.left:\n                    graph[node.val].append(node.left.val)\n                    graph[node.left.val].append(node.val)\n                if node.right:\n                    graph[node.val].append(node.right.val)\n                    graph[node.right.val].append(node.val)\n\n                dfs(node.right)\n\n        dfs(root)\n        visited = set()\n\n        # do a dfs radius 0 -> radius 1..\n        # radius = distance\n        def dfs2(path, result):\n            curr_target, curr_radius = path\n            if curr_radius == radius:\n                if curr_target != target:\n                    result.add(curr_target)\n                return\n\n            visited.add(curr_target)\n\n            for next_target in graph[curr_target]:\n                if next_target not in visited:\n                    dfs2([next_target, curr_radius + 1], result)\n\n        res = set()\n        path = [target, 0]\n        dfs2(path, res)\n\n        return sorted(list(res))\n")),(0,a.kt)("h2",{id:"solution-2-on"},"Solution 2 {O(n)}"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Re-construct the tree by adding a parent field"),(0,a.kt)("li",{parentName:"ul"},"We then traverse as above by starting from the target node",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"We will traverse in three direction, left, right and up{parent}"))),(0,a.kt)("li",{parentName:"ul"},"Complexity",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Time \u2013 O(N)"),(0,a.kt)("li",{parentName:"ul"},"Space \u2013 O(N)")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution(object):\n    def distanceK(self, root, target, K):\n        def dfs(node, par = None):\n            if node:\n                node.par = par\n                dfs(node.left, node)\n                dfs(node.right, node)\n\n        dfs(root)\n\n        queue = deque()\n        queue.append([target, 0])\n        seen = {target}\n        while queue:\n            if queue[0][1] == K:\n                return [node.val for node, d in queue]\n            node, d = queue.popleft()\n            for nei in (node.left, node.right, node.par):\n                if nei and nei not in seen:\n                    seen.add(nei)\n                    queue.append((nei, d+1))\n\n        return []\n")))}p.isMDXComponent=!0}}]);