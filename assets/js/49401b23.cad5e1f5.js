"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4772],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=o,k=p["".concat(c,".").concat(d)]||p[d]||u[d]||r;return n?a.createElement(k,i(i({ref:t},m),{},{components:n})):a.createElement(k,i({ref:t},m))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},626:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const r={"date created":"Wednesday, July 27th 2022, 11:08:39 pm","date modified":"Sunday, October 23rd 2022, 4:57:29 pm",title:"Monotonic Stack"},i="Monotonic Stack",l={unversionedId:"Algo/Fundamental Algorithms/Misc/Monotonic/Monotonic Stack",id:"Algo/Fundamental Algorithms/Misc/Monotonic/Monotonic Stack",title:"Monotonic Stack",description:'- The word "monotonic" means a list or a function is either always increasing, or always decreasing.',source:"@site/docs/Algo/Fundamental Algorithms/Misc/Monotonic/Monotonic Stack.md",sourceDirName:"Algo/Fundamental Algorithms/Misc/Monotonic",slug:"/Algo/Fundamental Algorithms/Misc/Monotonic/Monotonic Stack",permalink:"/Obsidian-Docusaurus/docs/Algo/Fundamental Algorithms/Misc/Monotonic/Monotonic Stack",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Fundamental Algorithms/Misc/Monotonic/Monotonic Stack.md",tags:[],version:"current",frontMatter:{"date created":"Wednesday, July 27th 2022, 11:08:39 pm","date modified":"Sunday, October 23rd 2022, 4:57:29 pm",title:"Monotonic Stack"},sidebar:"tutorialSidebar",previous:{title:"Merge Intervals",permalink:"/Obsidian-Docusaurus/docs/Algo/Fundamental Algorithms/Misc/Intervals/Merge intervals"},next:{title:"Monotonic Decreasing Queue",permalink:"/Obsidian-Docusaurus/docs/Algo/Fundamental Algorithms/Misc/Monotonic/Monotonic queue"}},c={},s=[{value:"Monotonic Decreasing Stack Code Template",id:"monotonic-decreasing-stack-code-template",level:2},{value:"Application of Monotonic Stack",id:"application-of-monotonic-stack",level:2}],m={toc:s},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"monotonic-stack"},"Monotonic Stack"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'The word "monotonic" means a list or a function is either always increasing, or always decreasing.',(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},'In that case, a "monotonic stack" or a "monotonic deque" is a stack or a deque that has this property.'))),(0,o.kt)("li",{parentName:"ul"},"Monotonic stack is like a regular stack with one key distinction in the push operation:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Before we push a new element onto the stack, we first check if adding it breaks the monotonic condition."),(0,o.kt)("li",{parentName:"ul"},"If it does, then we pop the top element off the stack until pushing the new element no longer breaks the monotonic condition."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("img",{parentName:"li",src:"https://miro.medium.com/max/1400/1*HC8mM4Kv66ms3iFevERzIg.png",alt:null}))),(0,o.kt)("h2",{id:"monotonic-decreasing-stack-code-template"},"Monotonic Decreasing Stack Code Template"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def mono_stack(nums):\n    n = len(nums)\n    stack = []\n    result = [-1] * n\n    \n    for index, elt in range(n):\n        while stack and nums[stack[-1]] < elt:\n            result[stack[-1]] = elt\n            stack.pop()\n        \n        stack.append(index)\n    \n    return result\n")),(0,o.kt)("h2",{id:"application-of-monotonic-stack"},"Application of Monotonic Stack"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We can use this technique to find the next smaller or greater ",(0,o.kt)("inlineCode",{parentName:"li"},"elt")," by iterating from start-end",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Or we can use it to find the previous smaller or greater ",(0,o.kt)("inlineCode",{parentName:"li"},"elt")," by iterating from end - front"))),(0,o.kt)("li",{parentName:"ul"},"Next Largest or Smallest Element in a List",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/next-greater-element-i/"},"Get the next greater element for every array element"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Coding%20Practice/Stack/Next%20greater%20elt"},"Solution to Next greater elt")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/daily-temperatures/"},"daily-temperatures"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Coding%20Practice/Stack/739%20Daily%20Temperatures"},"Solution to Daily Temperatures")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/trapping-rain-water"},"Trapping Rain Water")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/largest-rectangle-in-histogram"},"Largest Rectangle in Histogram")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/steps-to-make-array-non-decreasing"},"Steps to Make Array Non-decreasing")))),(0,o.kt)("li",{parentName:"ul"},"Maximum or Minimum Element in a Sliding Window")))}u.isMDXComponent=!0}}]);