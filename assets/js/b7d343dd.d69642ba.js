"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6751],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,k=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(k,i(i({ref:t},p),{},{components:n})):r.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1422:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, July 3rd 2022, 11:54:45 am",title:"What is Docker Compose?"},i="What is Docker Compose?",s={unversionedId:"Containerization/Docker/docker compose",id:"Containerization/Docker/docker compose",title:"What is Docker Compose?",description:"- Compose is a tool for defining and running multi-container Docker applications.",source:"@site/docs/Containerization/Docker/6. docker compose.md",sourceDirName:"Containerization/Docker",slug:"/Containerization/Docker/docker compose",permalink:"/Obsidian-Docusaurus/docs/Containerization/Docker/docker compose",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Containerization/Docker/6. docker compose.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Sunday, July 3rd 2022, 11:54:45 am",title:"What is Docker Compose?"},sidebar:"tutorialSidebar",previous:{title:"Volumes",permalink:"/Obsidian-Docusaurus/docs/Containerization/Docker/volumes"},next:{title:"Miscellaneous",permalink:"/Obsidian-Docusaurus/docs/Containerization/Docker/Miscellaneous"}},l={},c=[{value:"Docker-compose&#39;s Three Steps",id:"docker-composes-three-steps",level:2},{value:"Declaring the Dependencies",id:"declaring-the-dependencies",level:2},{value:"Docker-compose Commands",id:"docker-compose-commands",level:2},{value:"Build",id:"build",level:3},{value:"Start",id:"start",level:3},{value:"Restart",id:"restart",level:3},{value:"Stop",id:"stop",level:3},{value:"Up",id:"up",level:3},{value:"PS",id:"ps",level:3},{value:"Down",id:"down",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"what-is-docker-compose"},"What is Docker Compose?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Compose is a tool for defining and running multi-container Docker applications."),(0,o.kt)("li",{parentName:"ul"},"With Compose, you use a YAML file to configure your application\u2019s services.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Then, with a single command, you create and start all the services from your configuration."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/docker/awesome-compose"},"More examples here"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'version: "3.7" \nservices: \n    ... \nvolumes: \n    ... \nnetworks: \n    ...\n')),(0,o.kt)("h2",{id:"docker-composes-three-steps"},"Docker-compose's Three Steps"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Define your app's environments with a ",(0,o.kt)("inlineCode",{parentName:"li"},"Dockerfile")),(0,o.kt)("li",{parentName:"ol"},"Define the services that make up your app in ",(0,o.kt)("inlineCode",{parentName:"li"},"docker-compose.yml"),"\xa0so they can be run together in an isolated environment."),(0,o.kt)("li",{parentName:"ol"},"Run ",(0,o.kt)("inlineCode",{parentName:"li"},"docker compose up")," to start and run your apps,")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"version: '3.8'\n\nservices:\n notes:\n  build: .   #path to where the docker-file is ex: ./dir/src/\n  ports:\n   - 8000:8000\n   - 9229:9229\n  environment:\n   - SERVER_PORT=8000\n   - CONNECTIONSTRING=mongodb://mongo:27017/notes\n  volumes:\n   - ./:/app\n\n mongo:\n  image: mongo:4.2.8\n  ports:\n   - 27017:27017\n  volumes:\n   - mongodb:/data/db\n   - mongodb_config:/data/configdb\n\nvolumes:\n mongodb:\n mongodb_config:\n")),(0,o.kt)("h2",{id:"declaring-the-dependencies"},"Declaring the Dependencies"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We need to create a dependency chain between our services, so that some services get loaded before (and unloaded after) other ones."),(0,o.kt)("li",{parentName:"ul"},"We can achieve this result through the\xa0",(0,o.kt)("em",{parentName:"li"},"depends_on"),"\xa0keyword")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"services:\n  kafka:\n    image: wurstmeister/kafka:2.11-0.11.0.3\n    depends_on:\n      - zookeeper\n    ...\n  zookeeper:\n    image: wurstmeister/zookeeper\n    ...\n#First zookeeper starts then kafka starts\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"We should be aware, however, that Compose will not wait for the\xa0",(0,o.kt)("em",{parentName:"p"},"zookeeper"),"\xa0service to finish loading before starting the\xa0",(0,o.kt)("em",{parentName:"p"},"kafka"),"\xa0service: it will simply wait for it to start.")),(0,o.kt)("h2",{id:"docker-compose-commands"},"Docker-compose Commands"),(0,o.kt)("h3",{id:"build"},"Build"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Builds images in the\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"docker-compose.yml"),"\xa0file. The job of the\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"build"),"\xa0command is to get the images ready to create containers,"),(0,o.kt)("li",{parentName:"ul"},"So if a service is using the prebuilt image, it will skip this service.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose build\n")),(0,o.kt)("h3",{id:"start"},"Start"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Starts existing containers for a service.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose start\n")),(0,o.kt)("h3",{id:"restart"},"Restart"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Restarts all stopped and running services.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose restart\n")),(0,o.kt)("h3",{id:"stop"},"Stop"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This command stops the running containers of specified services.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose stop\n")),(0,o.kt)("h3",{id:"up"},"Up"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"It builds the images if they are not located locally and starts the containers."),(0,o.kt)("li",{parentName:"ul"},"If images are already built, it will fork the container directly."),(0,o.kt)("li",{parentName:"ul"},"If there are existing containers for a service, and the service\u2019s configuration or image was changed after the container\u2019s creation,\xa0",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"docker-compose up"),"\xa0picks up the changes by stopping and recreating the containers (preserving mounted volumes).")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up\n\ndocker-compose up -d  #-d detached /background\n\ndocker-compose up -d --build\n#build the images\n#And then start the containers\n")),(0,o.kt)("h3",{id:"ps"},"PS"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This command list all the containers in the current\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"docker-compose"),"\xa0file. They can then either be running or stopped.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose ps\n")),(0,o.kt)("h3",{id:"down"},"Down"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Stops containers and removes containers, networks, volumes, and images created by\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"up"),".",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Networks and volumes defined as\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"external"),"\xa0are never removed.")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose down\n")))}d.isMDXComponent=!0}}]);