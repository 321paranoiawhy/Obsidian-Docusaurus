"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4313],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>b});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=i,b=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return r?n.createElement(b,o(o({ref:t},u),{},{components:r})):n.createElement(b,o({ref:t},u))}));function b(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1435:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(7462),i=(r(7294),r(3905));const a={"date created":"Wednesday, August 24th 2022, 3:51:41 pm","date modified":"Saturday, November 12th 2022, 6:57:37 pm",title:"190 Reverse Bits"},o="190 Reverse Bits",s={unversionedId:"Algo/Coding Practice/Binary/190 Reverse Bits",id:"Algo/Coding Practice/Binary/190 Reverse Bits",title:"190 Reverse Bits",description:"Solution",source:"@site/docs/Algo/Coding Practice/Binary/190 Reverse Bits.md",sourceDirName:"Algo/Coding Practice/Binary",slug:"/Algo/Coding Practice/Binary/190 Reverse Bits",permalink:"/obsidian/docs/Algo/Coding Practice/Binary/190 Reverse Bits",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Coding Practice/Binary/190 Reverse Bits.md",tags:[],version:"current",frontMatter:{"date created":"Wednesday, August 24th 2022, 3:51:41 pm","date modified":"Saturday, November 12th 2022, 6:57:37 pm",title:"190 Reverse Bits"},sidebar:"tutorialSidebar",previous:{title:"78 Subsets",permalink:"/obsidian/docs/Algo/Coding Practice/Array/78 Subsets"},next:{title:"191 Number of 1 Bits",permalink:"/obsidian/docs/Algo/Coding Practice/Binary/191 Number of 1 Bits"}},l={},c=[{value:"Solution",id:"solution",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"190-reverse-bits"},"190 Reverse Bits"),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Iterate over the binary number with ",(0,i.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Bit%20manipulation#Looping%20in%20Bit%20World"},"Looping in Bit World")),(0,i.kt)("li",{parentName:"ul"},"Add the last bits to the end of the 32 bits answer",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The last bit will be placed at answer's ",(0,i.kt)("inlineCode",{parentName:"li"},"31th")," bit"),(0,i.kt)("li",{parentName:"ul"},"The next last bit will be placed at answer's ",(0,i.kt)("inlineCode",{parentName:"li"},"30th")," bit {31-1}\u2026")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"reverse 1001\nres = 0\n\nget last of reverse => 1\nturn to 31 bits 1 << 31 = 1...0 {length 31}\nadd to res\nres = res + 31 bits  {res = 1...0}\n\n\nget last of reverse => 0\nturn to 30 bits 0 << 30 = 0...0 {length 30}\nadd to res\nres = res + 30 bits {res = 10...0}\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def reverseBits(self, n: int) -> int:\n        \n        res = 0\n        num = 31\n        \n        while n:\n            last_bit = n & 1\n            \n            res = res | (last_bit << num)\n            num -= 1\n            \n            n = n >> 1\n            \n        return res\n")))}p.isMDXComponent=!0}}]);