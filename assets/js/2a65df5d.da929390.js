"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3070],{3905:(e,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>y});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),s=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},d=function(e){var r=s(e.components);return n.createElement(l.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=s(t),m=o,y=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return t?n.createElement(y,a(a({ref:r},d),{},{components:t})):n.createElement(y,a({ref:r},d))}));function y(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c[p]="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=t[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6601:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var n=t(7462),o=(t(7294),t(3905));const i={tags:["tree","recursion"],"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Wednesday, August 10th 2022, 11:15:27 am",title:"101 Symmetric Tree.py"},a="101 Symmetric Tree.py",c={unversionedId:"Algo/Coding Practice/Tree/101 Symmetric Tree.py",id:"Algo/Coding Practice/Tree/101 Symmetric Tree.py",title:"101 Symmetric Tree.py",description:"",source:"@site/docs/Algo/Coding Practice/Tree/101 Symmetric Tree.py.md",sourceDirName:"Algo/Coding Practice/Tree",slug:"/Algo/Coding Practice/Tree/101 Symmetric Tree.py",permalink:"/obsidian/docs/Algo/Coding Practice/Tree/101 Symmetric Tree.py",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Coding Practice/Tree/101 Symmetric Tree.py.md",tags:[{label:"tree",permalink:"/obsidian/docs/tags/tree"},{label:"recursion",permalink:"/obsidian/docs/tags/recursion"}],version:"current",frontMatter:{tags:["tree","recursion"],"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Wednesday, August 10th 2022, 11:15:27 am",title:"101 Symmetric Tree.py"},sidebar:"tutorialSidebar",previous:{title:"5 Longest Palindromic Sub-string",permalink:"/obsidian/docs/Algo/Coding Practice/String/5 Longest Palindromic Substring.py"},next:{title:"1061 Lexicographically Smallest Equivalent String",permalink:"/obsidian/docs/Algo/Coding Practice/Tree/1061 Lexicographically Smallest Equivalent String"}},l={},s=[],d={toc:s},p="wrapper";function u(e){let{components:r,...t}=e;return(0,o.kt)(p,(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"101-symmetric-treepy"},"101 Symmetric Tree.py"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        def check(node1, node2):\n            if not node1 and not node2:\n                return True\n            elif not node1 or not node2:\n                return False\n            elif node1.val == node2.val:\n                return check(node1.left, node2.right) and check(node1.right, node2.left)\n            else:\n                return False\n        return check(root.left, root.right)\n")))}u.isMDXComponent=!0}}]);