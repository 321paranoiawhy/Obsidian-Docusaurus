"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8652],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),m=a,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4811:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={tags:["stack","monotonic_stack"],"date created":"Friday, August 5th 2022, 12:13:39 pm","date modified":"Wednesday, August 10th 2022, 11:19:36 am",title:"Next Greater Elt"},i="Next Greater Elt",c={unversionedId:"Algo/Coding Practice/Stack/Next greater elt",id:"Algo/Coding Practice/Stack/Next greater elt",title:"Next Greater Elt",description:"Question",source:"@site/docs/Algo/Coding Practice/Stack/Next greater elt.md",sourceDirName:"Algo/Coding Practice/Stack",slug:"/Algo/Coding Practice/Stack/Next greater elt",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Stack/Next greater elt",draft:!1,editUrl:"https://github.com/321paranoiawhy/321paranoiawhy.github.io/blob/main/docs/Algo/Coding Practice/Stack/Next greater elt.md",tags:[{label:"stack",permalink:"/Obsidian-Docusaurus/docs/tags/stack"},{label:"monotonic_stack",permalink:"/Obsidian-Docusaurus/docs/tags/monotonic-stack"}],version:"current",frontMatter:{tags:["stack","monotonic_stack"],"date created":"Friday, August 5th 2022, 12:13:39 pm","date modified":"Wednesday, August 10th 2022, 11:19:36 am",title:"Next Greater Elt"},sidebar:"tutorialSidebar",previous:{title:"739 Daily Temperatures",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/Stack/739 Daily Temperatures"},next:{title:"128 Longest Consecutive Sequence",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/String/128 Longest Consecutive Sequence"}},l={},s=[{value:"Question",id:"question",level:2},{value:"Solution",id:"solution",level:2}],u={toc:s},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"next-greater-elt"},"Next Greater Elt"),(0,a.kt)("h2",{id:"question"},"Question"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Given a list of number find the next greater elt for each elts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [4,7,1,6,5]\nOutput: [7,-1,6,7,-1]\n\nfor 4 -> the next greater elt is 7\nfor 7 -> no greater elt thus -1\nfor 1 -> the next greater elt is 6\n...\n")),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use ",(0,a.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Fundamental%20Algorithms/Misc/Monotonic/Monotonic%20Stack"},"Monotonic Stack"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def nextGreaterElements(self, nums: List[int]) -> List[int]:\n        \n        stack = []\n        result = [-1] * len(nums)\n        \n        for index, elt in enumerate(nums):\n            while stack and elt > nums[stack[-1]]:\n                result[stack[-1]] = elt\n                stack.pop()\n                \n            stack.append(index)\n                \n        return result\n")))}d.isMDXComponent=!0}}]);