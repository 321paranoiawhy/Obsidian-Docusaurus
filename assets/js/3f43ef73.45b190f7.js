"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[473],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(r),d=a,m=p["".concat(c,".").concat(d)]||p[d]||g[d]||o;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5652:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={tags:["string","anagram"],"date created":"Monday, July 25th 2022, 9:03:44 pm","date modified":"Wednesday, August 10th 2022, 11:16:13 am",title:"49 Group Anagrams"},i="49 Group Anagrams",s={unversionedId:"Algo/Coding Practice/String/49 Group Anagrams",id:"Algo/Coding Practice/String/49 Group Anagrams",title:"49 Group Anagrams",description:"",source:"@site/docs/Algo/Coding Practice/String/49 Group Anagrams.md",sourceDirName:"Algo/Coding Practice/String",slug:"/Algo/Coding Practice/String/49 Group Anagrams",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/String/49 Group Anagrams",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Coding Practice/String/49 Group Anagrams.md",tags:[{label:"string",permalink:"/Obsidian-Docusaurus/docs/tags/string"},{label:"anagram",permalink:"/Obsidian-Docusaurus/docs/tags/anagram"}],version:"current",frontMatter:{tags:["string","anagram"],"date created":"Monday, July 25th 2022, 9:03:44 pm","date modified":"Wednesday, August 10th 2022, 11:16:13 am",title:"49 Group Anagrams"},sidebar:"tutorialSidebar",previous:{title:"424 Longest Repeating Character Replacement",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/String/424 Longest Repeating Character Replacement.py"},next:{title:"5 Longest Palindromic Sub-string",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/String/5 Longest Palindromic Substring.py"}},c={},l=[],u={toc:l},p="wrapper";function g(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"49-group-anagrams"},"49 Group Anagrams"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        \n        def findKey(elt):\n            memo = [0] * 26\n            for e in elt:\n                memo[ord(e)-97] += 1\n            return memo\n            \n        \n        dic = defaultdict(list)\n        \n        for elt in strs:\n            dic[tuple(findKey(elt))].append(elt)\n        \n        return dic.values()\n")))}g.isMDXComponent=!0}}]);