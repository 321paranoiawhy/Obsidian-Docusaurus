"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2315],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),d=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return o.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=d(n),h=r,m=c["".concat(p,".").concat(h)]||c[h]||u[h]||a;return n?o.createElement(m,i(i({ref:t},s),{},{components:n})):o.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7450:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var o=n(7462),r=(n(7294),n(3905));const a={"date created":"Sunday, July 31st 2022, 6:15:24 pm","date modified":"Monday, August 1st 2022, 10:43:37 am",title:"Topological Sort Kahns Algorithm"},i="Topological Sort Kahns Algorithm",l={unversionedId:"Algo/Tree & Graph/Graph/Topological Sort Kahns Algorithm",id:"Algo/Tree & Graph/Graph/Topological Sort Kahns Algorithm",title:"Topological Sort Kahns Algorithm",description:"- Video source",source:"@site/docs/Algo/Tree & Graph/Graph/Topological Sort Kahns Algorithm.md",sourceDirName:"Algo/Tree & Graph/Graph",slug:"/Algo/Tree & Graph/Graph/Topological Sort Kahns Algorithm",permalink:"/Obsidian-Docusaurus/docs/Algo/Tree & Graph/Graph/Topological Sort Kahns Algorithm",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Tree & Graph/Graph/Topological Sort Kahns Algorithm.md",tags:[],version:"current",frontMatter:{"date created":"Sunday, July 31st 2022, 6:15:24 pm","date modified":"Monday, August 1st 2022, 10:43:37 am",title:"Topological Sort Kahns Algorithm"},sidebar:"tutorialSidebar",previous:{title:"Built-in Functions",permalink:"/Obsidian-Docusaurus/docs/Algo/Python Tips & Tricks/built-in list functions"},next:{title:"Topological Sort DFS",permalink:"/Obsidian-Docusaurus/docs/Algo/Tree & Graph/Graph/Topological sort DFS"}},p={},d=[{value:"Algorithm Explanation",id:"algorithm-explanation",level:2}],s={toc:d},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"topological-sort-kahns-algorithm"},"Topological Sort Kahns Algorithm"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://youtu.be/cIBFEhD77b4?list=PLDV1Zeh2NRsDGO4--qE8yH72HFL1Km93P"},"Video source")),(0,r.kt)("li",{parentName:"ul"},"Has the same properties as ",(0,r.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Tree%20&%20Graph/Graph/Topological%20sort%20DFS"},"Topological sort DFS"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Also known as ",(0,r.kt)("inlineCode",{parentName:"li"},"Topological sort BFS")))),(0,r.kt)("li",{parentName:"ul"},"The intuition behind kahn's algorithm",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Repeatedly remove nodes without any dependencies from the graph and add them to the topological ordering"),(0,r.kt)("li",{parentName:"ul"},"As nodes without dependencies(and their outgoing edges) are removed from the graph, new nodes without dependencies are created/born"),(0,r.kt)("li",{parentName:"ul"},"We repeat removing nodes without dependencies from the graph until all nodes are processed, or a cycle is detected"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("img",{parentName:"li",src:"https://pencilprogrammer.com/wp-content/uploads/2020/11/Khans-Topological-Sort-Algorithm.png",alt:null}))),(0,r.kt)("h2",{id:"algorithm-explanation"},"Algorithm Explanation"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://linuxhint.com/wp-content/uploads/2021/12/word-image-1177.png",alt:null})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The first node in the topological ordering will be the node that doesn't have any incoming edges. Essentially, any node that has an in-degree of 0 can start the topologically sorted order. If there are multiple such nodes, their relative order doesn't matter and they can appear in any order.")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Initialize a queue,\xa0",(0,r.kt)("inlineCode",{parentName:"li"},"Q"),"\xa0to keep a track of all the nodes in the graph with 0 in-degree."),(0,r.kt)("li",{parentName:"ol"},"Iterate over all the edges in the input and create an adjacency list and also a map of node v/s in-degree."),(0,r.kt)("li",{parentName:"ol"},"Add all the nodes with 0 in-degree to\xa0",(0,r.kt)("inlineCode",{parentName:"li"},"Q"),"."),(0,r.kt)("li",{parentName:"ol"},"The following steps are to be done until the\xa0",(0,r.kt)("inlineCode",{parentName:"li"},"Q"),"\xa0becomes empty.",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Pop a node from the\xa0",(0,r.kt)("inlineCode",{parentName:"li"},"Q"),". Let's call this node,\xa0",(0,r.kt)("inlineCode",{parentName:"li"},"N"),"."),(0,r.kt)("li",{parentName:"ol"},"For all the neighbors of this node,\xa0",(0,r.kt)("inlineCode",{parentName:"li"},"N"),", reduce their in-degree by 1. If any of the nodes' in-degree reaches 0, add it to the\xa0",(0,r.kt)("inlineCode",{parentName:"li"},"Q"),"."),(0,r.kt)("li",{parentName:"ol"},"Add the node\xa0",(0,r.kt)("inlineCode",{parentName:"li"},"N"),"\xa0to the list maintaining topologically sorted order."),(0,r.kt)("li",{parentName:"ol"},"Continue from step 4.1.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"q = deque()\nin_degree = defaultdict(int) #notice -> we count the incoming edges to a node\n\nfor node in graph:\n    for edge in node:\n        in_degree[edge] += 1\n\nfor node in graph:\n    if in_degree[node] == 0:\n        q.append(node)\n\norder = []\n\nwhile q:\n    node = q.popleft()\n    order.append(node)\n\n    for edge in node:\n        in_degree[edge] -= 1\n        if in_degree[edge] == 0:\n            q.append(edge)\n\nif len(order) != number_of_nodes:\n    return null #graph contains cycle\n\nreturn order\n\n")))}u.isMDXComponent=!0}}]);