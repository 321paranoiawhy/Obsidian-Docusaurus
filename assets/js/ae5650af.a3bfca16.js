"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8050],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(t),p=a,g=d["".concat(o,".").concat(p)]||d[p]||m[p]||i;return t?r.createElement(g,l(l({ref:n},c),{},{components:t})):r.createElement(g,l({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=p;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[d]="string"==typeof e?e:a,l[1]=s;for(var u=2;u<i;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1357:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const i={tags:["dp","sub_sequence","binary_search","dfs"],"date created":"Thursday, August 4th 2022, 11:13:57 am","date modified":"Wednesday, August 10th 2022, 11:22:39 am",title:"300 Longest Increasing Sub-sequence"},l="300 Longest Increasing Sub-sequence",s={unversionedId:"Algo/Coding Practice/DP/300 Longest Increasing Subsequence",id:"Algo/Coding Practice/DP/300 Longest Increasing Subsequence",title:"300 Longest Increasing Sub-sequence",description:"DFS + Memo",source:"@site/docs/Algo/Coding Practice/DP/300 Longest Increasing Subsequence.md",sourceDirName:"Algo/Coding Practice/DP",slug:"/Algo/Coding Practice/DP/300 Longest Increasing Subsequence",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/DP/300 Longest Increasing Subsequence",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Coding Practice/DP/300 Longest Increasing Subsequence.md",tags:[{label:"dp",permalink:"/Obsidian-Docusaurus/docs/tags/dp"},{label:"sub_sequence",permalink:"/Obsidian-Docusaurus/docs/tags/sub-sequence"},{label:"binary_search",permalink:"/Obsidian-Docusaurus/docs/tags/binary-search"},{label:"dfs",permalink:"/Obsidian-Docusaurus/docs/tags/dfs"}],version:"current",frontMatter:{tags:["dp","sub_sequence","binary_search","dfs"],"date created":"Thursday, August 4th 2022, 11:13:57 am","date modified":"Wednesday, August 10th 2022, 11:22:39 am",title:"300 Longest Increasing Sub-sequence"},sidebar:"tutorialSidebar",previous:{title:"1143 Longest Common Sub-sequence",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/DP/1143 Longest Common Subsequence"},next:{title:"Longest Common Sub-string",permalink:"/Obsidian-Docusaurus/docs/Algo/Coding Practice/DP/Longest common substring"}},o={},u=[{value:"DFS + Memo",id:"dfs--memo",level:2},{value:"DP O(n2)",id:"dp-on2",level:2},{value:"Binary Search O(nlogn)",id:"binary-search-onlogn",level:2}],c={toc:u},d="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"300-longest-increasing-sub-sequence"},"300 Longest Increasing Sub-sequence"),(0,a.kt)("h2",{id:"dfs--memo"},"DFS + Memo"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Build a tree with all the nodes"),(0,a.kt)("li",{parentName:"ul"},"Child will be any node which",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Is greater than the parent and"),(0,a.kt)("li",{parentName:"ul"},"One of the next elts. elt with index greater than parent index"))),(0,a.kt)("li",{parentName:"ul"},"At any node we have two choices",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Chose the current node only"),(0,a.kt)("li",{parentName:"ul"},"Chose the current node plus,  the previous sequences"))),(0,a.kt)("li",{parentName:"ul"},"Memorize the results using index")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"memo = {}\nlength = len(nums)\n\ndef dfs(i):\n    if i == length-1:\n        return 1\n    if i in memo:\n        return memo[i]\n    \n    res = 1\n    for j in range(i, length):\n        if nums[j] > nums[i]:\n            res = max(res, 1+dfs(j))\n    \n    memo[i] = res\n    return memo[i]\n\nfor i in range(length):\n    dfs(i)\nreturn max(memo.values()) if memo else 1\n")),(0,a.kt)("h2",{id:"dp-on2"},"DP O(n2)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The last elt will always have a value of 1",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"And the elt before it will have two choices",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If it is greater than the next elt add 1 to it"),(0,a.kt)("li",{parentName:"ul"},"Else keep the current value which is 1"))))),(0,a.kt)("li",{parentName:"ul"},"For every elt we have to consider it combination will all the next elts.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"length = len(nums)\ndp = [1]*length\n\nfor i in range(length-1, -1, -1):\n    for j in range(i+1, length):\n        if nums[i] < nums[j]:\n            dp[i] = max(dp[i], 1+dp[j])\nreturn max(dp)\n")),(0,a.kt)("h2",{id:"binary-search-onlogn"},"Binary Search O(nlogn)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We can use binary to actually build the increasing sequence itself"),(0,a.kt)("li",{parentName:"ul"},"The logic is if the current number is greater than what we have seen before add it to the sequence"),(0,a.kt)("li",{parentName:"ul"},"If it is not find which index to replace it with")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"tail = []\n\nfor num in nums:\n    if not tail or num > tail[-1]:\n        tail.append(num)\n    else:\n        tail[bisect_left(tail, num)] = num\n    print(tail)\n\nreturn len(tail)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/Obsidian-Docusaurus/docs/Algo/Python%20Tips%20&%20Tricks/In-built%20Binary%20search"},"Read about python binary search before"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[10,9,2,5,3,7,101,18]\n\n10 -> [10]  #The tail is empy so add 10\n9 -> [9]    #9 is not greater than 10, so replace it with index 0\n2 -> [2]    #2 is not greater than 9, so replace it with index 0\n5 -> [2, 5] #5 is greater than 2, add to tail\n3 -> [2, 3] #3 is not greater than 5, so replace it with index 1\n7 -> [2, 3, 7]\n101 -> [2, 3, 7, 101]\n18 -> [2, 3, 7, 18]\n\n# Lets say there we have a new elt 4, the result will be\n4 -> [2,3,4,18] #4 is not greater than 18, so replace it with index 2\n")))}m.isMDXComponent=!0}}]);