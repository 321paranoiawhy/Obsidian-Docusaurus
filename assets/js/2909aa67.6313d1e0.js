"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5792],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>y});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(r),m=a,y=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return r?n.createElement(y,i(i({ref:t},u),{},{components:r})):n.createElement(y,i({ref:t},u))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7043:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={tags:["stack","monotonic_stack"],"date created":"Friday, August 5th 2022, 12:20:39 pm","date modified":"Wednesday, August 10th 2022, 11:17:03 am",title:"739 Daily Temperatures"},i="739 Daily Temperatures",c={unversionedId:"Algo/Coding Practice/Stack/739 Daily Temperatures",id:"Algo/Coding Practice/Stack/739 Daily Temperatures",title:"739 Daily Temperatures",description:"Solution",source:"@site/docs/Algo/Coding Practice/Stack/739 Daily Temperatures.md",sourceDirName:"Algo/Coding Practice/Stack",slug:"/Algo/Coding Practice/Stack/739 Daily Temperatures",permalink:"/obsidian/docs/Algo/Coding Practice/Stack/739 Daily Temperatures",draft:!1,editUrl:"https://github.com/zekaryas1/notes/blob/main/docs/Algo/Coding Practice/Stack/739 Daily Temperatures.md",tags:[{label:"stack",permalink:"/obsidian/docs/tags/stack"},{label:"monotonic_stack",permalink:"/obsidian/docs/tags/monotonic-stack"}],version:"current",frontMatter:{tags:["stack","monotonic_stack"],"date created":"Friday, August 5th 2022, 12:20:39 pm","date modified":"Wednesday, August 10th 2022, 11:17:03 am",title:"739 Daily Temperatures"},sidebar:"tutorialSidebar",previous:{title:"22 Generate Parentheses",permalink:"/obsidian/docs/Algo/Coding Practice/Stack/22 Generate Parentheses"},next:{title:"Next Greater Elt",permalink:"/obsidian/docs/Algo/Coding Practice/Stack/Next greater elt"}},s={},l=[{value:"Solution",id:"solution",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"739-daily-temperatures"},"739 Daily Temperatures"),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use ",(0,a.kt)("a",{parentName:"li",href:"/obsidian/docs/Algo/Fundamental%20Algorithms/Misc/Monotonic/Monotonic%20Stack"},"Monotonic Stack"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        \n        result = [0]*len(temperatures)\n        stack = []\n        \n        for index, elt in enumerate(temperatures):\n            \n            while stack and temperatures[stack[-1]] < elt:\n                result[stack[-1]] = index - stack[-1]\n                stack.pop()\n            \n            stack.append(index)\n        \n        return result\n")))}d.isMDXComponent=!0}}]);