"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5085],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),d=i,m=c["".concat(s,".").concat(d)]||c[d]||h[d]||l;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,a=new Array(l);a[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:i,a[1]=o;for(var p=2;p<l;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7856:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const l={"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Monday, January 2nd 2023, 11:22:19 am",title:"String Operations"},a="String Operations",o={unversionedId:"Algo/Python Tips & Tricks/String",id:"Algo/Python Tips & Tricks/String",title:"String Operations",description:"Reverse a String",source:"@site/docs/Algo/Python Tips & Tricks/String.md",sourceDirName:"Algo/Python Tips & Tricks",slug:"/Algo/Python Tips & Tricks/String",permalink:"/Obsidian-Docusaurus/docs/Algo/Python Tips & Tricks/String",draft:!1,editUrl:"https://github.com/321paranoiawhy/321paranoiawhy.github.io/blob/main/docs/Algo/Python Tips & Tricks/String.md",tags:[],version:"current",frontMatter:{"date created":"Thursday, June 16th 2022, 1:47:45 pm","date modified":"Monday, January 2nd 2023, 11:22:19 am",title:"String Operations"},sidebar:"tutorialSidebar",previous:{title:"Sorting in Python",permalink:"/Obsidian-Docusaurus/docs/Algo/Python Tips & Tricks/Sorting"},next:{title:"Python Collections Module",permalink:"/Obsidian-Docusaurus/docs/Algo/Python Tips & Tricks/Useful Python Collections module"}},s={},p=[{value:"Reverse a String",id:"reverse-a-string",level:2},{value:"String Concatenation",id:"string-concatenation",level:2},{value:"String Property Checking",id:"string-property-checking",level:2},{value:"String Formatting",id:"string-formatting",level:2},{value:"Strip",id:"strip",level:2},{value:"Replace",id:"replace",level:2},{value:"Split",id:"split",level:2},{value:"Join",id:"join",level:2},{value:"Count",id:"count",level:2},{value:"Find",id:"find",level:2},{value:"Zfill",id:"zfill",level:2}],u={toc:p},c="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"string-operations"},"String Operations"),(0,i.kt)("h2",{id:"reverse-a-string"},"Reverse a String"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'a = "hello world"\nprint(a[::-1])\n')),(0,i.kt)("h2",{id:"string-concatenation"},"String Concatenation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In java string concatenation is O(n","*","*2) thus you should use StringBuilder."),(0,i.kt)("li",{parentName:"ul"},"In python string concatenation is O(n), because the underline cpython handles the string builder."),(0,i.kt)("li",{parentName:"ul"},"In python string is immutable, thus you can not do string replacement in place.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Instead convert it into a list.")))),(0,i.kt)("h2",{id:"string-property-checking"},"String Property Checking"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isupper")," to check if a string is all uppercase"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"islower")," to check if a string is all lowercase"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isnumeric")," to check if a string is all numeric"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isalpha")," to check is a string is all alphabet"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isalnum")," to check if a string is all numeric and alphabet"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isspace")," to check is a string is all space/empty")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'print("USA".isupper()) #true\n\nprint("b".islower()) #true\nprint("Bc".islower()) #false\n\nprint("123".isnumeric()) #true\n\nprint("abc".isalpha()) #true\nprint("ab c".isalpha()) #false\n\nprint("abc123".isalnum()) #true\n\nprint("".isspace()) #false\nprint(" ".isspace()) #true\nprint(" \\t".isspace()) #true\n')),(0,i.kt)("h2",{id:"string-formatting"},"String Formatting"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'print(f"The solution to 24 + 24 is {24 + 24}")\n')),(0,i.kt)("h2",{id:"strip"},"Strip"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The strip() method returns a copy of the string by removing both the leading and the trailing characters (based on the string argument passed).")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'" hello ".strip() #removed the white spaces output = hello\n\n"##hello##".strip(\'#\') #removed the #s at the start end end output = hello\n\n"www.hello.com".strip(\'wcom\')  #removed wcom from the string output = .hello.\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"hello python".removeprefix("hello")  #output = python\n\n"hello python".removesuffic("python") #output = hello\n')),(0,i.kt)("h2",{id:"replace"},"Replace"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The replace() method replaces a specified phrase with another specified phrase.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"hello world python".replace(" ", "-") #\'hello-world-python\'\n')),(0,i.kt)("h2",{id:"split"},"Split"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The split() method splits a string into a list. You can specify the separator, default separator is any whitespace.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"\"hello world python\".split() #['hello', 'world', 'python']\n\n\"www.python.com\".split(\".\") #['www', 'python', 'com']\n")),(0,i.kt)("h2",{id:"join"},"Join"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The join() method takes all items in an iterable and joins them into one string. A string must be specified as the separator.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'a = ["hello", "python"]\n\n"".join(a)  #hellopython\n\n" ".join(a) #hello python\n\n"-".join(a)  #hello-python\n')),(0,i.kt)("h2",{id:"count"},"Count"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The count() method returns the number of elements with the specified value.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"\"hello world\".count('l') #3\n\n")),(0,i.kt)("h2",{id:"find"},"Find"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The find() method finds the first occurrence of the specified value. The find() method returns -1 if the value is not found.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"hello world".find(\'l\') #2\n\n"hello world".find("l", 2) #3 starts looking from index 2\n\n"hello world".rfind(\'l\') #9 starts looking from the end\n')),(0,i.kt)("h2",{id:"zfill"},"Zfill"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The zfill() method adds zeros (0) at the beginning of the string, until it reaches the specified length.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"43".zfill(5) #00042\n"-43".zfill(5) #-0042\n')))}h.isMDXComponent=!0}}]);